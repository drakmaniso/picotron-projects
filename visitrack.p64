picotron cartridge // www.picotron.net
version 2

:: gfx/
:: map/
:: sfx/
:: src/
:: pal/
:: drak.lua
--[[pod_format="raw",created="2024-04-07 07:42:45",modified="2024-04-11 12:39:12",revision=912]]

-- A 'require' function similar to standard Lua.
-- Idea from elgopher on the BBS
function require(name)
	if (_modules == nil) _modules = {}

	local cached = _modules[name]
	if (cached) return cached

	local filename = fullpath(name .. '.lua')
	local src = fetch(filename) 

	if (type(src) != "string") panic("could not include " .. filename)

	-- https://www.lua.org/manual/5.4/manual.html#pdf-load
	-- chunk name (for error reporting)
	-- mode ("t" for text only -- no binary chunk loading)
	-- _ENV upvalue
	-- @ is a special character that tells debugger the string is a filename
	local func, err = load(src, "@" .. filename, "t", _ENV)
	if (not func) panic("Syntax error:", tostr(err))

	local module = func()
	_modules[name] = module

	return module
end


function panic(...)
	local args = { ... }
	foreach(
		args,
		function(str)
			send_message(3, { event = "report_error", content = str })
		end
	)
	stop()
end


-- Table utility functions --------------------------------------------------------


function tostrrec(t)
	if type(t) != "table" then
		return tostr(t)
	end
	
	local s = nil
	for k, v in pairs(t) do
		if not(s) then
			s = "{ "
		else
			s ..= ", "
		end
		s ..= tostr(k) .. " = " .. tostrrec(v)
	end
	s ..= " }"

	return s
end


-- Char utilities -----------------------------------------------------------------


function keyp_num()
	if (keyp("9")) return 9
	if (keyp("8")) return 8
	if (keyp("7")) return 7
	if (keyp("6")) return 6
	if (keyp("5")) return 5
	if (keyp("4")) return 4
	if (keyp("3")) return 3
	if (keyp("2")) return 2
	if (keyp("1")) return 1
	if (keyp("0")) return 0
	return nil
end


function is_num_char(c)
	if (not c) return
	return ("0" <= c) and (c <= "9")
end


function is_hexa_char(c)
	if (not c) return
	local is_num = ("0" <= c) and (c <= "9")
	local is_hex_alpha = ("a" <= c) and (c <= "f")
	return is_num or is_hex_alpha
end


-- Drawing -------------------------------------------------------------------------


-- From Sophie on the discord
function get_drawspace()
    return {
        cam_x=peek4(0x5510),
        cam_y=peek4(0x5514),
        clip_l=peek2(0x5528),
        clip_t=peek2(0x552a),
        clip_r=peek2(0x552c),
        clip_b=peek2(0x552e),
    }
end


function set_drawspace(drawspace)
    poke4(0x5510,drawspace.cam_x)
    poke4(0x5514,drawspace.cam_y)
    poke2(0x5528,drawspace.clip_l)
    poke2(0x552a,drawspace.clip_t)
    poke2(0x552c,drawspace.clip_r)
    poke2(0x552e,drawspace.clip_b)
end

:: gfx/0.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTAzLTI0IDAwOjQ4OjA2Iixtb2RpZmllZD0iMjAyNC0w
NC0xMSAxMjo1Njo1MiIscmV2aXNpb249MTc0NV1dbHo0AKACAAB7MwAA8yV7WzBdPXtibXA9cHh1
AEMgCAgEMAdgF1AHAAdABwAHICcwN0AXsCxmbGFncz0wLHBhbl94CADHeT0wLHpvb209OH0sQgBz
EBAE8CEXAAIAExAIAEMAF-ACCQAPFQAkHxGFAAsdOYUA1SsnkFdgVxAHYCdAB2ACAP8BQCdgBzA3
QCdAF0A3wBfwG1YAHfYHJBfABxAHsAcQB6AHMAeQBzAHgBcABwIAE4AWABOgJgBPwBfwFGQAHfIF
Iq4wziBOB24gThdeIE4nTiBONz4IACEXXhgAX84wrvATVgAiXc4gPkc_BAAfzlIAIx-wMQBK-wUL
BgQAJ2AHIAdQB5AHkAcgB2AnYEAACx43QAARIJUBUSAHAFdQCgCfQFcgBxAHAAcQTAAeEjeLAAcE
AB83QwAeBo4AAoYACQwAD08AHmBHUAeQJ3AdAS9HUDsAIEAHkDdgBgAPOwAdExBJAQFRASM3EFkB
H5CbAR4E2wEgEBdOAT9gN1DdAS4kEBdNAT8QN1CQACRFIAdQR_IBD5IAKAPVARVHCgAOUAAPcwIU
LzdgcQIjDnEDDzEAn58THQT-GJvw-201AByP8Jv-GE-w-w43AB1v_v8YdfCINgAdX-_A-xiIOQEe
DzEArIIHBwRyTzsSTgIAH3I7AAsvMTE8AAFyDi8RDhIOLQQAD0MADw-hAB4PMQDv8AUJCQTAB3AX
YCcgZxAHECcgBxAXMJUID0QAHv8CEAcwFxAHICcQBxBnICdgF3BEAB43kGcQAgAfkGsCHP8BMA8W
QB4wLiA_MC5AHlAOED8AHP8BEA8WUB5ALjA_IC4wHkAOMKYBHg8xAP----------------------
------------------------------9jUG09N319
:: gfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTAzLTI0IDAwOjQ4OjA2IixzdG9yZWQ9IjIwMjQtMDMt
MjQgMDA6NDg6MDYiXV1sejQABAAAAAMAAAAwbmls
:: label.png
b64$iVBORw0KGgoAAAANSUhEUgAAAeAAAAEOCAIAAADe_FMwAAAcf0lEQVR4Ae2dQWgkx7nHu-tN
QAGDyR66Dwt6Duv1oXEv7GHMjPBA5gUe9MWQ_IVBiIBg1oJg2IDQIZjgdEwwOQiBF4xB64EFI4TI
4wV8EQTMBGQk8BwEltEhzhJnQZDRQWFhIQt5j7xDLe3a6Zmanpnunqrp349m9PWo-lX1r5rv_672
vx7-zQIAAP2oFLze5y-e0fYsXn-8sQg__eiDlJKf-uzn-IYAICfsfz3_m-yerE0Z1qBJq7OomClV
Ew1WTJK_OlOjAZKIDBJ5IceKwQPj06dVyvHpy9qo9B_7n08__uCnP-u5_ExfD0XVUlBJcwQTmcmq
YL3__GNRbeMgzWAA0KQ6i_CTjz6YqGylrMiTlhp58KgqPAuTVueUNXqwQA-YEKum8ZwTo3Yff5_s
yxNVdgCATBrGFP1D1ChFjR4s0PECYnZ1qxn63wyr9qjdD1ReMUB85leR1b0KADKsdOmzUofND2wj
w0IxWKDlSjTWfN6nM6raxlVbDBCv8eCB-2Z4AdRogDyqm5xW6bMsHpa_EI2duZiKL5cmUawmKNDC
w8CRpXdbpEO5LsuGFf_dur1TnQGMY9KcHTU_w7I2UVEaLNATlaFca-HnL94RvSX2I1feKawWfNMA
JUQUkE8__kAUB5E16kIxkFm5JlrKkiUPS7OfifacrGMK7H89-lthl1dkPZ2O1x9-POnvI9cuBQBl
xuEIAAD0xH735pucAgCAhjgcAQAABRoAACagIr-8_sc-UY-_1f-8jiMDANN5cK1vWdb6lZfthKPm
fC96w7Ksd6NP0wTDC-TY6izGUKNN_fEBLAAZ1lA5QcS0caBtrn1boAd55wfW_3-k95Hypqf7NQy9
3Sl_MS_3X-lz509cByw2_vzOk5kb5-jQ8e9Gn6YP0hXoPGv0y_1XRLAAZUVdo-NusPJhJvnrH-5b
BP-_n-8lx8mRv-lRQwS--P2RiH-5_6OhcyZHjho89cj4M9s5R51SAY7GjhT-mnSk_o6mmzPlyLF3
NN2cBdRoOWHXrzx1-o4lpfa96A1RgtMEstAZM-E7P8ipDYpHFBf5M1uunfxdPHFcTDvVoTony-HQ
0hwTp8fYPJFHqgdPMXIs8kj1tFPMOdE_Mxk58K_UIydaOv2c2R7m2GnTzznRb74Y1q_8WSp7Sirj
h7zzA_v9P_a0-KhmOOkdDNy0fHBX9e_JuhwHeVTkZB_Wx_RUqef_S-3Njxp5DJ50ZJo8Tz9yvo64
ozQjX26-Mqp0pMxckbDqzwxv4d3o0-SBjDN_7tyqs4Zdcer_mbzOgf-m0W_n_41myy9-f5Sy6qUf
lvnIzEtzTo64o7x-_XEayp9ywk5dnR9c68fVP8l70RvvRW_kDCYp0DlXZ1GX-9z5kw61ZpZiPdH3
Rdbov-7hv4fGSX7zo4YcxK_KkSJOM1I9TL1cJnNmvnpWcw6c9tjDTH6mmTPNyDRXmcbU1HOmPDEN
a4WiNM_I-e7NN0X06x--5Ln-vPODodX5V--zu6zq8sBZv9x_JfOjv3bydxFc1b8nx7Pfhyi_aZqt
YszQe52irA8cXX4-F4CCkdMhjxIxaUbHyTUwTHw-RfJOW6BHkEmBBkP7OcAcC3SuKZOmQMuZNdHG
3ovesCzr3ejTNIEsrMiVd2yNpjrzmwZYyJQRxVedOymHZYj97s03uR4AAA1xOAIAAD2xw6CW4XSr
a839vW55js-1vcvzPn7xuxiQv7rh0KMAAEpUoFfXmqtrzfTfL0Afdn1v1PdD-4XfxfAbfy4SIk_T
qbrY_Zu8Rx1_z5U8Jt3f6w69yFHfm87leX-oLV6e9xcygfG72OzvdUU5Lk-_Dv3d6vB7zqVAQ9yB
sYxf41jIKjzFJepwuRToIppzqfyWp0aLy11Iv-t7XfJUh-x18uvAcR8eCBavP4sUjRNVzljX9xYv
gUf5XUiz6vtdVFbXmuXJ34Gfrlb5a4dBLdt7LVXvdX1v7j0Wv-glfxf1fiuT_slkzILdMX7xi1-8
zr9AW5Z12D1R-PeHt-07B-833VY_bv2benIFYbOOFi3aGbU-vO1zVlpp7TCoTdRt1PNub7a--4uz
6Tb9pvuFce13lksyEfwuNtub7a2dDverD5X8pn798cci_PzFO6ZcWP-rL0Xg3bw1nXAK_SxaAJhv
7ueKI-64vieegXh1rSmeKarz5y-eEY_o1H-5bfCX3wbqbjZLJ5xd2--6S_-mLfGI29rebIsnzTyx
VlywUCm08p6TWvW68zqrWZj7-eIXv4rqPGnuF7PnZwXasqzL8-7QeH_vO6P5z1_8Y1nW939xZlA7
jbvo1k5na6dT-AbmtS5AyZFzf_6bqehzLofdEw21ooWmuSrReOULVrTfgXVHaUetO6_zWrz7xS9_
dd6zU4CT1x9-bFwXFRVza6eTvot6N2_JJ26-xWgBIPPc14RvC7Tre0Pj1bXmFPN_-uKd1x9-LJ7P
X7xjWdZffhvEn0MJm-WhZzQqzlzr3bzV--pL8Yhaub3Z3t5s53T08p4HGLvuvM5q1O_4sDvCL37z
8JvMfZGGc8-Bini5PO-H-5Dj-b3u1AVI1OWY7--iLL02PiNFnLfWsqytnc4UG550hqQ2-bqanBVa
tIuk1ScH7TCopd_H63uH3RPFgO3N9kTGTCds1tUHgl-8GgT5qxuV-G5aPeCz0-M4zvCMZlnXRC0A
FFA35EwsMgcdrbqZcVr84he-_M1P_1yBrj69nnzm3tBGxTD7WaFFi1bnHLTDoCYX6AfX_rJ4-crr
LV3Er67vHXZP1Itt7XTKUxzDZl19IPjFr1nNnvzVikryq0d33xLB8r375bkqAADdcHKa953zV8UT
x2m62SydcPZ1p9Bm4ndeZ1Uw89ozfvGrbb2aW4G2LOt9-6uBoBhmWddELQCYW6-UVJJfLd_7P5et
HHZPjNPiF7-4xW9_2sECvX7l0UsBAHTAkV96SxfJZ_qp3zl-VQ7i11GEzXocb2_2h8ZptLOsO6k2
K7-zOqtJtTJFrotf-ObtV88crORU_N-3vxoap2RrpzM0znVdE7WznBVatGg1z0E7DGrp53J977B7
ou66k_7PaMJmXX0g_MWvQZC-uuGU5zIAAMxCowIdNuvGafGLX-ziNz_tRgUaAABk7DCopR-t_t5h
90QxYHuzvbXTKc-xhc26_kDwi1_DIH91w8n1ssfGaNGiRYt2VGyHQS19zXV9T91wZunAs3QztGjR
zq4lf3XTOtMtAAAAeWOHQS39aNf3jnpnigHRRivaPSjP8TWqgfpA8ItfgyB-dcOhRwEAUKDHdzPj
tDEPT4-lp8g9T7RoVn5n2fOkB6Xb-Ra556HrinjUTuZ_vybmr7Z7flagXd8Tz0C8utZcXWvSx9Jw
4-ZK-FiWFW204s-8eHh6HC8qMraYdbM6K-Y86brJTyNOD6bjWYG2LOvyvJ_M9-e6hW3lqHdmnFYr
v6IxlMdv2e5XvmX5k-tdYL8VelRWPDw9HiiU0Uar4NXF0kWumxXseaKLjj-NvXFIg6PPVhrVwDit
zI3bK_J5lr27B9HuQWF7LmbdnO634LPKpjrPac-iouXPgZ1oeL9G5K_ee-62QLu_l4xX15rx53St
Xh0vknYWpl73xu2Vh6fH4jHrjsQT9xX2nH5duTqTg4uttcOglv535vreUe9MMSDaaMnNfOFpVAP1
geAXvwZB-uqGU57LAAAwi8pidLN5aWOijZZ6wGen53EslstkzwWvm8n9zuusuF-y1zi-Dj0KAEBP
nivQ1afXk8-UU8vNf1QsI7cUU7SzkNWei1w3q-ud11lxv8Xcr4n5q_ee7TCoyQX6wbW_PNH6lddb
uohfXd9T-3SijVa0e1Ce-taoBrPkEn7xqxXkr244ya8e3X1LPMUflnFa-OIXv-jNT1spT7fMlbtf
vCSCe699I_J7r32zwOuyZ_4XCsDRZytHvTPjtDJx5qRMoaz2XOS6Wd3vvM6K_yV-zfJbSX61fO8_
jQsAYO44A_-rV578FLmVRjUwTotf-OIXv-lpnyvQvaWL5DP1JqKN1tB4UbV3v3hJDuLXRV2XPXNW
aPPW2mFQSz_X63tHvTP1YtHuwVwa2ry6qPpA8ItfgyB-dcMpz2UAAJiFRgW6UQ2M0_IXv-jFb35a
jQo0AADI2GFQSz-a9b2j3pliQLTRinYPynN8jWqgPhD84tcgyF-dcOhRAAClK9DRRmtsPNDNjNPi
F7-4xW9_WjsMaulrrut7R70ztclo92C6gt6oBurJ0aJFm6uW-NVNq1GBNpFZLgm-_NUN8lc3KpMK
njx5MuOABQO-_MUvfnPC0WcrYbNunBa-_MUvfvPTVvIz0P-6SxF4N28VeXCsy7qsKwtlbf-rL72b
t8Snhn7lPc9raa382mFQsyzL9T3xfnnel_PVtaaI9-e6Ythh90Sx3vZme2unE-8O5N-E9mZbvIoB
_Rkuct2wWRcHgl-86uY3qU2Wg4HZtMrfuKSU5H6H_nXif1ye95Px-l5XlOZZEDvY2unkapV1WZd1
08wgf6aZrWC--a_-lBvJwt_v2u_3BXooq2vN1bVmJvvY3mzHzWFUN5ulE46yneu6_MWvQX7FDPLn
2NmK9_vdvCVKZAHr6u_3Mnau-b3u7C0ibkpFtsG4LxXcgfGLXz39ikniz5SzzcWvTBnud5RfOwxq
lmW5vifeL8-7cry61pTLtOt7h90TdduJZ49-T8Jt3BbS2JZ-QKNihVb_Rea6btisxweCX-xq5XdA
OCph5dnmnr-ynstwv2P9PivQKZmoQJcB_YLxi1-TIX91w9HqsIzT4he-_MVvftpKfq04zbDPTs8t
y8qwiY1dV6woKHJd-OK3YL_5auflt2zrOnNpPkOZxfa8tPjFL37xm5-2uQJdfXo9_czFvNxYRsWs
y7qsqyfcb1br2mFQkwv0g2t9_d-rV15v6SJ_dX1PXfu3N9tbO53pthI261M3JbRo0c6uJX9101aS
Xz26_5YIlu-dX8j2DgBgBHYY1OKX6tPrD6715QK9fuX1li7iAa7vqQt-3IHfOX9VfPO_-5Uc5_0n
uW6ui8adEL-41c3vFFoN8zfXdTW834F1nfzWjpd53-_qAKtD1y2y1_EXv7r5zUo7L7_sO6RAL9_7
L54Mu0TcHNTdbJZOOBctfvGL3-z2nPe6_vutDLyvX3m5domSgF-84jeTddPUygX268gvvaWL5DNL
I5qoKR12T_J4e7M9NE6jjRcSQa7r4he-OvudVKub3zQbXqT7TS5qh0EtvQfX9_Spk2xvtrd2Orr1
--wIm3X1geAXvwZB-uqGo9VhGafFL37xi9-8tBoVaAAAkLHDoJZ_tOt7h90TxYDtzfbWTqc8xxc2
6_oDwS9_DYL81Q2HHgUAQIEe382M0_IXv-jFb37aHAv09mZ7bIwWLVq0aEfFdhjU0tdc1-cOuyfq
xbZ2OnNpaPPqouoDwS9_DYL81Q2nPJcBAGAWlUkFL7zwwowDRtGoBke9M7O0_MUvfvGbn9ahRwEA
6IkdBrX0o13fUxf_aKMV7R6U5-hm7N74xa9WkL_64cSVVzwD8epaUzy0MgCA_RRoy7Iuz-vJeH_v
u7-XLaybGafFL37xi9-8tN8W6FGsrjXpYwAAxWOHQc2yLNf3Ls-7yc_4Ru-vdcWwo96ZYrpooxXt
HpTn_BrVQH0g_MWvQZC-uuHEket7yXh1rbm61pxu6oenx2NjtGjRokU7Kn5WoC-P__IZiPf3uuKZ
okDfuL0yNh7oZsZp8Ytf-OI3P_2zAg0AALphh0Et-WjX9456Z4oB0UYr2j0oz-E1qoH6QPCLX4Mg
f3XDoUcBABhQoKtPryefWbrx2HigmxmnxS9_8Yvf-LR2GNTkAv3gWl_eaP3K6y1dxK_u7x31ztQm
o92D6Qp6oxqoJ0eLFm2uWvJXN_2QAv3o7lvidfne-SILtInMckn4xa9ukL_64ZTnMgAAzEKjAt2o
BsZp8Ytf-OI3P20l_dXyvfs0LgCAuWOHQS1_qT69nhzRW7qIY9f3jnpniumijVa0e1Ce42tUA-WB
4Be-BkH_6oYzUIuTzyyXPTRGixYtWrRptHYY1NLP5fqeuuHM0oFn6WZoc9X_87u3v-OPU85q4bXk
r27aynQLQHn453dvPzr_cHnlbVGjAaAw7DCopR-t_p668M-SgU1kli5qVoG2LGt55e3-ePV-F95v
2e6X-NV5hxV6FKTk0fGHyytvf4eDACgKR6tuZpy2bH4fHX-4z_-e5n7xi99i9lyhR0FKllfetizr
O-845SgAisHJb_poozU2ljnqnRmnLYPf7-zjdHnl7eWVtx8df8j94he-Re7ZDoNa_prr_p489VCT
0e5BefpboxqoDwS-_DUI8lc3HK0OyzgtfvGLX-zmp61MOvWTJ09mHIAWLVq0aNMMs8Ogln5S1-cO
uyeKAdub7a2dzlwa2lwIm3X1geAXvwZB-uqGU57LAAAwi2cF2vU98QzEq2vN_LOAbmacFr-4xS9_
89M_K9CWZV2e94fGAAAwF_wwqFmW5fre5Xk-_bm61hTj9ve6Ythh90Qx3fZme2unU57jC5t19YHg
F78GQf7qRkX9b1GX4zINAACF4cSR63tD46npf-3l2HigmxmnxS9_8Yvf-LQV8XJ53o--IceC-b3u
FAXau3lrbIwWLVq0aEfFdhjU0tdc1-cOuyeKAdub7a2dzhTV3FDCZl19IPjFr0GQv7rhlOcyAADM
QqMCHTbrxmnxi1-84jc-7XMFuvr0evKZehPbm_2xMVq0aNGiHRXbYVCTC-SDa31ZvH7l9ZYu4lfX
9w67J_rFtnY6c2lo8_qi6gPBL34NgvzVjUryq0d33xLB8r375bkqAADdcLTqZsZp8Ytf-OI3P61G
BRoAAGTsMKjFL9Wn1x9c68v-Xr-yeksX8avre4fdE8V025vtrZ1OeY4vbNbVB4Jf-BoE_asblYH3
9SuPrgUAoAOO-NJbukg_s3TjobGimxmnxS9_8Yvf-LTPFehs2drpDI3RokWLFm0arR0GtfRzub53
2D1Rd6FJ92c0YbOuPhD84tcgyF-dcMpzGQAAZqFRgQ6bdeO0_MUvfvGbn1ajAg0AADJ2GNTSj3Z9
77B7ohiwvdne2umU5-jCZl19IPjFr0GQv7rh5HrZY2O0aNGiRTsqtsOglr7mur6nbjizdOBZuhla
tGhn15K-ummd6RYAAIC8scOgln6063tHvTPFgGijFe0elOf4GtVAfSD4xa9BkL_64dCjAAAo0OO7
mXHamIenx-JT5J4nWjQrv7PsedKD0u1_i9zz0HVFPGonc79fE-NX2z0-K9Cu74lnIF5da66uNelj
abhxeyV_LMuKNlrxZ348PD2OFxUZW8y6WZ0Ve5503eSnEacH0-GsQFuWdXneT8b7e93CtnLUOzNO
q5Vf0RjK47ds9yvfsvzJ-S6w3wo9Kisenh4PFMpoo1Xw6mLpItfNCvY80UXHn_beOKTB0WcrjWpg
nFbmxu0V8TzL3t2DaPegsD0Xs25O91vwWWVTnee0Z3HR8ufATjS8XyPyV889f1ugXd9Lxqtrzfhz
ulavjhdJOwtTr3vj9srD02PxmHVH4on7CntOv65cncnBxdbaYVBL-ztzfe_od6YYEG205Ga_8DSq
gfpA8ItfgyB-dcMpz2UAAJhFZTG62by0MdFGSz3gs9PzOBbLZbLngtfN5H7ndVbcL-lrnF_HHgUA
oCfPFejq0_vJZ_qp5eY-KpaRW4op2lnIas9FrpvV-c7rrLjfYu7XxPzVc892GNTkAv3gWl_eaP3K
6y1dxK_u76l-OtFGK9o9KE9-a1SDWXIJv-jVCvJXN5zkV4-uviWe4g-LOC1_8Ytf-OanrZSnW_bK
3S9eEsG9174R8b3Xvlngddkz9wsF4OizlaPemXFamThzUqZQVnsuct2s7ndeZ8X9kr9m_a0kv1q_
d5-GBQAwd5yB9-UrT36K3EqjGhinxS9_8Yvf-LTPFeje0kXymXoT0UZraLyo2rtfvCQH8euirsue
OSu0eWvtMKiln8v1vaPemXqxaPdgLg1tXl1UfSD4xa9BkL_64ZTnMgAAzEKjAt2oBsZp8Ytf-OI3
P61GBRoAAGTsMKilH_363lHvTDEg2mhFuwflOb5GNVAfCH7xaxDkr2449CgAgNIV6GijNTYe6GbG
afGLX-ziNz_tHQa19DXX9b2j3pnaZLR7MF1Bb1QD9eRo0aLNVUv_6qbVqECbyCyXhF-86gb5qxuV
SQVPnjyZccCCgV-84he-OeHos5WwWTdOi1-84he-_Wk1KtAAACBjh0HNsizX98T75XlfjlfXmvt7
3Xi063uH3RPFdNub7a2dTnmOL2zW1QeCX-waBPmrG04cXZ73h8YAADDnAj2K1bXm6lqzmG5mnBa-
_MUvfvPTji-Q_3td_hgAQPHYYVCzLMv1PfF_ed6X49W1plymXd877J4optvebG-tdMpzfGGzrj4Q
-OLXIMhf3ajEtTj_So5FXQYAgOJxtOpmxmnxi1-84jc-rUYFGgAAZOwwqKUf7freYfdEMWB7s721
0ynP8YXNuvpA8ItfgyB-daMiv1SfXk_O6C1d0McAAIrHGXh-cK0vPwV3M_O0_MUvfvGbn3awQAMA
gCbYYVCLX6pPrz_41pf-vX7l9ZYu4lfX9w67J4rptjfbWzud8hxf2KyrDwS-_DUI8lc3HHoUAAAF
enw3M06LX-ziF7-5aSsD7_tXHl0LAEAH7DCopR-t_t5h90QxYHuzvbXTKc-xhc26_kDwi1_DIH91
w6FHAQBQoMd3M_O0_MUvfvGbn1ajAg0AADJ2GNTSj3Z977B7ohiwvdne2umU5-jCZl19IPjFr0GQ
v7rh0KMAACjQ47uZcVr84he-_M1Pq1GBBgAAGTsMaulHu7532D1RDNjebG-tdMpzfGGzrj4Q-OLX
IMhf3XDoUQAAelKZVPDCCy-MOGAUjWpw1DszS4tf-OIXv-lpHXoUAICe2GFQSz-a9T114Y82WtHu
QXmOb8bujV-8agX5qxtOXHnFMxCvrjXFQysDAJhPgbYs6-K8n4z397r7e93CuplxWvziF7-4zU-7
bYEGAACtsMOgZlmW63uX5-3kpxi0utbc3_uKYUe9M8V00UYr2j0oz-E1qoH6QPCLX4Mgf3XDiSPX
94bGAAAwzwJ9ed4Xz0As2N-rFtPNjNPiF7-4xW9_2mcFGgAAdMMOg1r60a7vHfXOFAOijVa0e1Ce
42tUA-WB4Be-BkH_6oZDjwIAMKBAV59eTz5FdjPjtPjFL37xm5_2MvD_4Fpffl2-8mhiAABzwQ6D
WvxSfXo9WaB7Sxfxq_t7R70zxXTRRivaPSjP8TWqgfpA8ItfgyB-dcOhRwEAUKDHdzPjtPjFL37x
m59WowINAAAydhjU4pfq0_vJEb2lizh2fe_od6aYLtpoRbsH5Tm_RjVQHwh_8WsQ5K9uVEbVYgAA
mC_OVt3MOC1_8Ytf-Oan1ahAAwCAjB0GtfSjXd876p0pBkQbrWj3oDzH16gG6gPBL34Ngvwthoen
xyK4cXtlII4-xZcOPQoAoEhu3F6JS-BAPDBSowLdqAbGafGLX-zidwrtw9NjET88PY5j8SqXaY0K
NABASZCr8I3bK_J1oDpblmWHQS39pK7vHfXOFAOijVa0e1CeU25UA-WB4Be-BkH_FsPD0_O4NA-E
8af4skIrAwAokrj_Do3lbxytuplxWvziF7-4NWXPAAAAAACLzv8Dmts54A_LnqQAAAAQdEVYdExv
ZGVQTkcAMjAxMTAyMjHjWbbBAAAAAElFTkSuQmCC
:: main.lua
--[[pod_format="raw",created="2024-03-24 00:48:06",modified="2024-04-11 12:56:52",revision=2149]]
include "drak.lua"
local settings = require "src/settings"
local file = require "src/file"
local tracker = require "src/tracker"
local tracker_grid = require "src/tracker_grid"
local piano_roll = require "src/piano_roll"
local synth = require "src/synth"


local gui
local refresh_gui = true
local current_view = "tracker" -- or "piano_roll" or "synth"


function _init()
	window {
		tabbed = true,
		icon = --[[pod_type="gfx"]]unpod("b64:bHo0AB4AAAAcAAAA8A1weHUAQyAICAQwB2AXUAcAB0AHAAcgJzA3QBew")
	}

	wrangle_working_file(
		file.save,
		file.load,
		file.default_filename
	)
	
	poke4(0x5000, get(fetch("/ram/cart/pal/0.pal")))
end


function _update()
	if keyp(settings.keys.play) then
		play_or_pause()
	end
	if refresh_gui then
		generate_gui()
		refresh_gui = false
	end
	gui:update_all()
end


function _draw()
	cls()
	gui:draw_all()
	print(string.format("\014% 3.0f", (stat(1) * 100.0)) .. "%", 462, 250, 7)
end


function generate_gui()
	local cell_width = 14
	local cell_height = 29
	gui = create_gui()
	local top_panel = attach_top_panel(gui, { x = 0, y = 0 })
	if current_view == "tracker" then
		tracker.attach_note_attributes(top_panel, { x = 30, y = 0})
		tracker.attach_pattern_flow_toggles(top_panel, { x = 100, y = 0})
		tracker.attach_pattern_selector(top_panel, { x = 142, y = 0})
		tracker.attach_channel_panel(gui, { x = 0, y = 16})
		tracker_grid.attach(gui, { x = 16, y = 16 })
	elseif current_view == "piano_roll" then
		piano_roll.attach_piano_roll(gui, { x = 0, y = 16 })
	elseif current_view == "synth" then
		synth.attach_synth(gui, { x = 0, y = 16 })
	end
end


function attach_top_panel(parent, el)
	el.width = 480
	el.height = 16
	parent:attach(el)

	attach_view_selector(el, { x = el.width - 60, y = 0 })
	attach_play_button(el, { x = 2, y = 0 })
	
	function el:draw()
		rectfill(0, 0, el.width, el.height, 2)
	end	

	return el
end


function attach_play_button(parent, el)
	el.width = 16
	el.height = 16
	el.cursor = "pointer"
	parent:attach(el)

	function el:draw()
		spr(stat(464) == 0 and 4 or 5, 0, 0)
	end
	
	function el:click()
		play_or_pause()
	end
	
	return el
end


function attach_view_selector(parent, el)
	el.width = 3 * 16 + 2 * 4
	el.height = 16
	el.cursor = "pointer"
	parent:attach(el)
	
	function el:draw()
		if current_view == "synth" then pal(7, 17) else pal(7, 59) end
		spr(3, 0, 0)
		if current_view == "piano_roll" then pal(7, 17) else pal(7, 59) end
		spr(2, 16 + 4, 0)
		if current_view == "tracker" then pal(7, 17) else pal(7, 59) end
		spr(1, 2 * 16 + 2 * 4, 0)
		pal(7, 7)
	end
	
	function el:click(msg)
		if msg.mx < 16 + 2 then
			current_view = "synth"
		elseif msg.mx < 2 * 16 + 2 * 2 then
			current_view = "piano_roll"
		else
			current_view = "tracker"
		end
		refresh_gui = true
	end
	
	return el
end


function play_or_pause()
	-- is `stat(464)` enough?
	if stat(464) == 0 then
		music(0)
	else
		note()
	end
end

-- Copied from /system/apps/sfx.p64/track.lua in Picotron 0.0.1e
-- by sfx_index; could do by channel later esp
-- if playing same sfx on two diffrent channels
function playing_row(channel)
	if (stat(400 + channel, 12) == sfx_index) return stat(400 + channel, 9)
end
:: map/0.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTAzLTI0IDAwOjQ4OjA2Iixtb2RpZmllZD0iMjAyNC0w
NC0xMSAxMjo1Njo1MiIscmV2aXNpb249MTY0M11dbHo0AGcAAABWEAAA8Ah7e2JtcD11c2VyZGF0
YSgiaTE2IiwzMgMALyIwAQD--------------------78QgiKSxoaWRkZW49ZmFsc2UscGFuX3g9
MAgAwnk9MCx0aWxlX2g9OAkAwHc9OCx6b29tPTF9fQ==
:: map/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTAzLTI0IDAwOjQ4OjA2IixzdG9yZWQ9IjIwMjQtMDMt
MjQgMDA6NDg6MDYiXV1sejQABAAAAAMAAAAwbmls
:: pal/0.pal
b64$LS1bW3BvZCxiZ19jb2xvcj0wLGJsYWNrZXN0X2NvbG9yPTAsY3JlYXRlZD0iMjAyNC0wNC0x
MCAwNDo1Mjo1MSIsaGlkZGVuPXtbMF09ZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFs
c2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2Us
ZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFs
c2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2Us
ZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFs
c2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2Us
ZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFs
c2UsZmFsc2V9LGhpZGRlbl90b2dnbGVzPXtbMF09ZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2V9LGxv
Y2tlZD17WzBdPXRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRy
dWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVl
LHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSxm
YWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxz
ZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxm
YWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxz
ZSxmYWxzZSxmYWxzZSxmYWxzZX0sbW9kaWZpZWQ9IjIwMjQtMDQtMTAgMTY6NTY6NDUiLG9rcGFs
X3ZlcnNpb249IjAuMC40IixyZXZpc2lvbj0xODAsdGVzdF9jdWJlX2NvbG9ycz17WzBdPXsxNSwz
MSw0fSx7MzEsNCwyMH0sezQsMjAsMjF9LHsxMCw5LDI1fSx7OSwyNSwyNH0sezgsMjQsMn0sezI2
LDExLDI3fSx7MTEsMjcsM30sezI3LDMsMTl9LHsyOCwxNywxOX0sezI4LDEyLDE2fSx7MTIsMTYs
MX0sezYsMjksMTN9LHsyOSwxMywxOH0sezEzLDE4LDF9LHs3LDIzLDE0fSx7MjMsMTQsMTN9LHsx
NCwzMCwxOH0sezcsNiwyMn0sezYsMjIsNX0sezIyLDUsMjF9LHsxLDEsMX0sezEsMSwxfSx7MSwx
LDF9fSx3aGl0ZXN0X2NvbG9yPTddXWx6NAAnAQAAFQIAAPUFdXNlcmRhdGEoImkzMiIsNjQsIjAB
AMAxZDJiNTMwMDdlMjUIAPAXMDA4NzUxMDBhYjUyMzYwMDVmNTc0ZjAwYzJjM2M3MDBmZmYxZTgI
AEAwMDRkCAARYTYAYGZmZWMyNwoAIGU0OABAMjlhZCQAYDgzNzY5YyAAMTc3YTgAwGNjYWEwMDFj
NWVhYzAA8B1hNWExMDA3NTRlOTcwMDEyNTM1OTAwNzQyZjI5MDA0OTJkMzgwMGEyODg3OUAA8ANh
Y2M1MDBjMzAwNGMwMGViNmJGAGA5MGVjNDIKACBiMsAAoDY0ZGZmNjAwYmSJAACWAEAwZGFiQABf
ODU2ZDABAMawMWUzNzNjMDAzNzQnASEwMwEAMTAwMgEAoDAwMTYxNjE2Iik=
:: pal/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA0LTEwIDA0OjUyOjUxIixzdG9yZWQ9IjIwMjQtMDQt
MTAgMDQ6NTI6NTEiXV1sejQABAAAAAMAAAAwbmls
:: sfx/0.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTAzLTI0IDAwOjQ4OjA2Iixtb2RpZmllZD0iMjAyNC0w
NC0xMSAxMjo1Njo1MiIscmV2aXNpb249MjI4NF1dbHo0ANkBAAArCAAA8U5weHUAAygAAAMABA9A
EAIOAAGgASACoA4ADxAADfDKAQIDBAEGBwAPP5AICQoLDwwPDQ8ODw8CD-_QDQ8RDxIPEw8UDxUP
Fg8XAA--kA8YDxkPGg8bDxwPHQ8eDx8UAPEAIA8hDyIPIw8kDyUPJg8nFADxACgPKQ8qDysPLA8t
Dy4PLxQA8QAwDzEPMg8zDzQPNQ82DzcUAP8FOA85DzoPOw88Dz0PPg8-AA--8P8BAOv-JloBEAYP
IBABIAEgAfAAAhACDBABIA8hIAEwDvDDDygP--DGD-gKD-8PgA-3Dw0B8AkBEAYMLwD-Mh--AQDc
hPgOAA4ADxMgmAP-Gf--AAAlDwwlDxglDyQlDzAlDzwlD0glD1QlD2AlD2wlD3glMfUAASUCAAGu
D4AvMvUADzglAwIA-TH1BPAf9QHwHw4ADQANIDUPNQUPNxUPMhUEBQ8z9SUBBQEVARUBBQH1JQQF
BBUEFQQFBPUh8HAOAA1ADxgFDx8FBgAgDxsHACscBQYAKx8cEQAPFwAHEAcIADcCBQEEAJMRAgUP
AwUCBQgEABYYCwAPDwAAVwIFAwUEBAA4FAMFAgA-IwUDDgAGIgMF3QAv9bAIAP-PH-8BAJdQ----
-x8=
:: sfx/1.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA0LTEwIDE2OjE5OjAwIixtb2RpZmllZD0iMjAyNC0w
NC0xMCAxNjoyOToyMCIscmV2aXNpb249OF1dbHo0AMMBAADVCAAA8U5weHUAAygAAAMABA9AEAIO
AAGgASACoA4ADxAADfDKAQIDBAEGBwAPP5AICQoLDwwPDQ8ODw8CD-_QDQ8RDxIPEw8UDxUPFg8X
AA--kA8YDxkPGg8bDxwPHQ8eDx8UAPEAIA8hDyIPIw8kDyUPJg8nFADxACgPKQ8qDysPLA8tDy4P
LxQA8QAwDzEPMg8zDzQPNQ82DzcUAP8FOA85DzoPOw88Dz0PPg8-AA--8P8BAOv-JloBEAYPIBAB
IAEgAfAAAhACDBABIA8hIAEwDvDDDygP--DGD-gKD-8PgA-3Dw0B8AkBEAYMLwD-Mh--AQDchPgO
AA4ADxMguAMMtANBDzAP-wQAALAD-yA3D-8AJQ8MJQ8YJQ8kJQ8wJQ88JQ9IJQ9UJQ9gJQ9sJQ94
JQEFD__RBQAFIQUBJQIAAb8sBXwPYCUvOAUDJQIAAf8A8HAOAA0ADSAPNAUPOQ83BwBWPwEFIQIA
Ck8RAwUjAgAKERO6AHtADxgFDxwFBgArHxwRAA8XAB4QBAgAgwIFDwMFAgUHBAAWFwsADw8ADzkC
BQMCAD8jBQMOABQiAwXaAC-1sAgA-88f-wEAl1D-----Hw==
:: sfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTAzLTI0IDAwOjQ4OjA2IixzdG9yZWQ9IjIwMjQtMDMt
MjQgMDA6NDg6MDYiXV1sejQABAAAAAMAAAAwbmls
:: src/constants.lua
--[[pod_format="raw",created="2024-04-10 15:52:04",modified="2024-04-11 12:56:52",revision=455]]
local constants = {}


constants.piano_keys = {
	{
		offset = -12,
		[0] = "z", "s", "x", "d", "c", "v", "g", "b", "h", "n", "j", "m",
		",", "l", ".", ";", "/"
	},
	{
		offset = 0,
		[0] = "q", "2", "w", "3", "e", "r", "5", "t", "6", "y", "7", "u",
		"i", "9", "o", "0", "p", "[", "=", "]",
	}
}


constants.isomorphic_keys = {
	{
		offset = -5,
		[0] = "z", "x", "c", "v", "b", "n", "m", ",", ".", "/",
	},
	{
		offset = 0,
		[0] = "a", "s", "d", "f", "g", "h", "j", "k", "l", ";",
	},
	{
	offset = 5,
		[0] = "q", "w", "e", "r", "t", "y", "u", "i", "o", "p",
	}
}


return constants
:: src/file.lua
--[[pod_format="raw",created="2024-04-07 08:14:09",modified="2024-04-11 12:56:52",revision=1004]]
local M = {}


--M.default_filename = "/ram/cart/sfx/0.visitrak"
M.default_filename = "/ram/cart/sfx/0.sfx"


function M.save()
	local ud = userdata("u8", 0x30000)
	for i = 0, 0x2ffff do
		ud[i] = peek(0x30000 + i)
	end
	return ud
end


function M.load(ud)
	if type(ud) != "userdata" then
		init_data()
	else
		for i=0,0x2ffff do
			poke(0x30000+i, ud[i])
		end
	end
	tdat = {}
---			init_undo()
end


-- Initialisation ----------------------------------------------------------------


-- copied from "/system/apps/sfx.lua" in Picotron 0.0.1e
function init_data()
	
	-- index (0x30000)
	
	-- first 3 values are almost metadata only -- not currently
	-- acted on anywhere. perhaps useful in future for deciding
	-- scope of copy/paste, and gui cues, but can be calculated
	-- from content.
	
	poke2(0x30000,
		64,  -- num_instruments
		512, -- num_tracks (64 patterns * 8 channels for default indexing)
		64,  -- num_patterns
		-- flags: 0x1 use default track indexing (base+0x20000, increments of 328 bytes)
		0x1
	)
	poke4(0x30010,
		0x10000, -- insts_addr      (I32)    relative address of instruments
		0x20000, -- tracks_addr     (I32)    relative address of track index
		0,       -- patterns_addr   (I32)    relative address of pattern data
		0        -- unused          (I32)    should be 0
	)
	poke2(0x30020,
		0,  -- tick len (0 for default -- custom vals not supported yet)
		64, -- default track length
		16 -- default track spd
	)
	
	-- default track speed (+3 unused)
	poke(0x30026, 16, 0, 0, 0) 
	
	-- pattern data: first 8 patterns
	
	for pp = 0,7 do
		local addr = 0x30100 + pp * 20
		for i = 0, 7 do
			poke(addr+i, pp*8 + i)
		end
		poke(addr+8, 0x0)  -- flow flags
		poke(addr+9, 0xff) -- channel mask
		poke(addr+10, 0,0) -- length (I16)
		
	end
	
	
	----------------------------------------------------------------------------
	-- single instrument at 0x40000 (instrument 0)
	
	-- node 0: root
	poke(0x40000 + (0 * 32), -- instrument 10node 0
	
			0,    -- parent (0x7)  op (0xf0)
			1,    -- kind (0x0f): 1 root  kind_p (0xf0): 0  -- wavetable_index
			0,    -- flags
			0,    -- unused extra
				
			-- MVALs:  kind/flags,  val0, val1, envelope_index
			
			0x2|0x4,0x20,0,0,  -- volume: mult. 0x40 is max (-0x40 to invert, 0x7f to overamp)
			0x1,0,0,0,     -- pan:   add. center
			0x1,0,0,0,     -- tune: +0 -- 0,48,0,0 absolute for middle c (c4) 261.6 Hz
			0x1,0,0,0,     -- bend: none
			-- following shouldn't be in root
			0x0,0,0,0,     -- wave: use wave 0 
			0x0,0,0,0      -- phase 
	)
	
	
	-- node 1: sine
	poke(0x40000 + (1 * 32), -- instrument 0, node 1
	
			0,    -- parent (0x7)  op (0xf0)
			2,    -- kind (0x0f): 2 osc  kind_p (0xf0): 0  -- wavetable_index
			0,    -- flags
			0,    -- unused extra
				
			-- MVALs:  kind/flags,  val0, val1, envelope_index
			
			0x2,0x20,0,0,  -- volume: mult. 0x40 is max (-0x40 to invert, 0x7f to overamp)
			0x1,0,0,0,     -- pan:   add. center
			0x21,0,0,0,    -- tune: +0 -- 0,48,0,0 absolute for middle c (c4) 261.6 Hz
			               -- tune is quantized to semitones with 0x20
			0x1,0,0,0,     -- bend: none
			0x0,0x40,0,0,  -- wave: triangle
			0x0,0,0,0      -- phase 
	)
	
	

	-- wavetable
	for i=0,7 do
	poke(0x40000 + 0x1e0,
		0x00, -- address (low)  in 256 byte increments
		0xf8, -- address (high) in 64k increments
		0x0a, -- samples (1 << n) 1024
		0xff,  -- wt_height 256(0); wave mval points at one of the entries
		
		-- to do: update (is garbage now?)
		0x80,
		0xf7,
		0x0d, -- samples (1 << n) 8192
		0x01
	)
	end

	-- envelope 0 inst 1
	
	poke(0x40000 + 0x100,
		0,0,0,0, 0,0,0,0,
		0,40,255,0 -- adsr
	)
	
	-- copy default instrument to 1..15
	for i=1,15 do
		memcpy(0x40000 + 0x200*i, 0x40000, 0x200)
	end
	
	--------------------------------------------------
	-- Track Data  0x50000
	--------------------------------------------------
	
	-- Default track size is 5 * 64 rows + 8 = 328 bytes
	
	-- header (8)
	local addr = 0x50000
	poke2(addr, 64) -- len
	poke(addr+2,16) -- spd
	poke(addr+3,0)  -- loop0
	poke(addr+4,0)  -- loop1
	poke(addr+5,0)  -- delay
	poke(addr+6,0)  -- flags (0x1 mute)
	poke(addr+7,0)  -- unused
	
	-- pitch, inst, vol: not set (0xff)
	memset(addr+8, 0xff, 64*3)
	
	-- copy to other tracks
	for i=1,63 do
		memcpy(0x50000 + i*328, 0x50000, 328)
	end
end


return M
:: src/piano_roll.lua
--[[pod_format="raw",created="2024-04-10 15:48:56",modified="2024-04-10 16:19:15",revision=44]]
local M = {}


function M.attach_piano_roll(parent, el)
	el.width = 480
	el.height = 270 - 11 - 16 - 1
	parent:attach(el)

	function el:draw()
		rectfill(0, 0, self.width, self.height, 21)
	end	

	return el
end


return M
:: src/settings.lua
--[[pod_format="raw",created="2024-04-11 08:58:08",modified="2024-04-11 12:56:52",revision=173]]
local constants = require "src/constants"


local settings = {}

--[[
settings.keys = {
	pitched = constants.piano_keys,
	rest = constants.piano_rest,
	unspec = constants.piano_unspec,
}
--]]
---[[
settings.keys = {
	pitched = constants.isomorphic_keys,
	play = "tab",
	rest = "space",
}
--]]


return settings
:: src/sfx.lua
--[[pod_format="raw",created="2024-04-07 08:22:05",modified="2024-04-11 06:39:59",revision=678]]
local sfx = {}


local sfx_index = 0x030000
local sfx_instr = 0x040000
local sfx_track = 0x050000
local sfx_wave = 0xf00000 -- maybe not? (search discord)


local num_instrument = 0
local num_tracks = 0
local num_patterns = 0
local header_flags = 0
local insts_addr = 0
local tracks_addr = 0
local patterns_addr = 0


function sfx.read_header()
	num_instruments = peek2(sfx_index)
	num_tracks = peek2(sfx_index + 2)
	num_patterns = peek2(sfx_index + 4)
	header_flags = peek2(sfx_index + 6)
	-- unused: peek2(sfx_index + 8)
	insts_addr = peek4(sfx_index + 10)
	tracks_addr = peek4(sfx_index + 14)
	patterns_addr = peek4(sfx_index + 18)
	?header_flags
	?string.format("%x", insts_addr)
	?string.format("%x", tracks_addr)
	?string.format("%x", patterns_addr)
end


function sfx.channel_is_muted(pattern, channel)
	local channel_mutes = peek(0x30100 + (pattern * 20) + 9)
	local muted = (channel_mutes & (1 << channel)) == 0
	return muted
end


return sfx
:: src/synth.lua
--[[pod_format="raw",created="2024-04-10 15:43:44",modified="2024-04-11 12:56:52",revision=351]]
local settings = require "src/settings"

local M = {}


function M.attach_synth(parent, el)
	el.width = 480
	el.height = 270 - 11 - 16 - 1
	parent:attach(el)

	function el:draw()
		rectfill(0, 0, self.width, self.height, 21)
	end	
	
	function el:update()
		local pitch_key = nil
		for i = 1, #settings.keys.pitched do
			local offset = settings.keys.pitched[i].offset
			for j = 0, #settings.keys.pitched[i] do
				local k = settings.keys.pitched[i][j]
				if key(k, true) then
					pitch_key = j + offset
				end
			end
		end
		if pitch_key then
			local pitch = pitch_key + 48
			if key("shift") then
				pitch += 12
			end
			pitch = mid(0, pitch, 0xfe)
			note(
				pitch, -- todo
				0, -- current_instrument
				50, -- current_volume
				ord(" "), 0x00, -- fx, fx param
				8, -- channel 8 so it can play with pattern
				false -- don't force retrigger
			)
		else
			note(0xff, 0xff, 0xff, 0xff, 0xff, 8)
		end
	end

	return el
end


return M
:: src/tracker.lua
--[[pod_format="raw",created="2024-04-10 10:06:40",modified="2024-04-11 12:56:52",revision=1403]]
local constants = require "src/constants"
local sfx = require "src/sfx"


local tracker = {}


-- (Also in tracker_grid.lua)
local ruler_height <const> = 9
local channel_panel_width <const> = 16
local cell_width <const> = 20
local cell_height <const> = 29


tracker.pattern = 0

tracker.base_note = 48
tracker.base_volume = 0x32
tracker.base_instrument = 01

tracker.input_buffer = ""


-- Channel panel -------------------------------------------------------------------


function tracker.attach_channel_panel(parent, el)
	el.width = channel_panel_width
	el.height = 270 - 11 - 16 - 2
	parent:attach(el)
	
	function el:draw()
		rectfill(0, 0, self.width, self.height, 21)
		line(self.width - 1, ruler_height - 1, self.width - 1, self.height, 5)
		for channel = 0, 7 do
			local oy = ruler_height + channel * cell_height
			local track_id = peek(0x30100 + tracker.pattern * 20 + channel)
			print(string.format("\014%03d", track_id), 2, oy + 3, 5)
			print(string.format("\014% 3d", track_id), 2, oy + 3, 22)
			spr(sfx.channel_is_muted(tracker.pattern, channel) and 32 or 33, 4, oy + 12)
		end
	end
	
	function el:click()
		self:set_keyboard_focus(true)
	end
	
	return el
end


function tracker.attach_pattern_flow_toggles(parent, el)
	el.width = 36 + 1
	el.height = 16
	el.cursor = "pointer"
	parent:attach(el)

	function el:draw()
		if (peek(0x30100 + (tracker.pattern * 20) + 8) & 0x01) == 0 then
			pal(7, 59)
		else
			pal(7, 17)
		end
		spr(40, 2, 4)
		if (peek(0x30100 + (tracker.pattern * 20) + 8) & 0x02) == 0 then
			pal(7, 59)
		else
			pal(7, 17)
		end
		spr(41, 2 + 12, 4)
		if (peek(0x30100 + (tracker.pattern * 20) + 8) & 0x04) == 0 then
			pal(7, 59)
		else
			pal(7, 17)
		end
		spr(42, 2 + 24, 4)
		pal(7, 7)
	end	

	return el
end


-- Default note attributes -------------------------------------------------------


function tracker.attach_note_attributes(parent, el)
	el.width = 60
	el.height = 16
	el.cursor = "pointer"
	parent:attach(el)
	
	el.drag_start = nil

	function el:draw()
--		rectfill(0, 0, self.width, self.height, 0)
		local note = tracker.base_note % 12
		local octave = tracker.base_note \ 12
		local is_sharp = (note == 1) or (note == 3) or (note == 6)
			or (note == 8) or (note == 10)
		pal(7, self.dragged_note and 7 or 22)
		if is_sharp then
			spr(8 + note, 2, 6)
		else
			spr(8 + note, 8, 6)
		end
		pal(7, 7)
		print(
			"\014" .. string.format("%1x", octave),
			2 + 12, 7,
			self.dragged_note and 7 or 22
		)
		local x = 20
		rectfill(x, 8, x + 20, 10, 59)
		rectfill(
			x, 8,
			x + min(20 * (tracker.base_volume / 64), 20), 10,
			self.dragged_volume and 7 or 22
		)
		if self.dragged_volume then
			print("\014" .. string.format("%2d", tracker.base_volume), 27, 2, 7)
		end
		print(
			"\014" .. string.format("%02d", tracker.base_instrument),
			44, 7,
			self.dragged_instrument and 7 or 26
		)
	end	
	
	function el:click(msg)
		-- TODO: replace with pull-down menus
		if msg.mx < 18 then
			self.dragged_note = {
				y0 = msg.my,
				start = tracker.base_note
			}
		elseif msg.mx < 42 then
			self.dragged_volume = {
				y0 = msg.my,
				start = tracker.base_volume
			}
		else
			self.dragged_instrument = {
				y0 = msg.my,
				start = tracker.base_instrument
			}
		end
	end
	
	function el:drag(msg)
		if self.dragged_note then
			local delta = msg.my - self.dragged_note.y0
			if (delta == 0) return -- or else double click doesn't work
			local new_val = self.dragged_note.start - (((delta + 3) \ 6) * 12)
			tracker.base_note = mid(0, new_val, 120)
		elseif self.dragged_volume then
			local delta = msg.my - self.dragged_volume.y0
			if (delta == 0) return -- or else double click doesn't work
			local new_val = self.dragged_volume.start - (((delta + 1) \ 2) * 1)
			tracker.base_volume = mid(0, new_val, 0x40) -- TODO: handle vol > 64
		elseif self.dragged_instrument then
			local delta = msg.my - self.dragged_instrument.y0
			if (delta == 0) return -- or else double click doesn't work
			local new_val = self.dragged_instrument.start - (((delta + 3) \ 6) * 1)
			tracker.base_instrument = mid(0, new_val, 0xfe) -- TODO: handle vol > 64
		end
	end
	
	function el:release(msg)
		self.dragged_note = nil
		self.dragged_volume = nil
	end

	function el:doubleclick(msg)
		if msg.mx < 18 then
			notify("***")
			tracker.base_note = 48
		elseif msg.mx < 42 then
			tracker.base_volume = 0x32
		else
			tracker.base_instrument = 01
		end
	end
	
	return el
end


-- Pattern selector ----------------------------------------------------------------


function tracker.attach_pattern_selector(parent, el)
	el.width = 19 * 14
	el.height = 16
	el.cursor = "pointer"
	parent:attach(el)

	function el:draw()
		local playing_pattern = stat(466)
		for p = 0, 18 do
			if p == 0 then
				spr(43, 5, 5)
			elseif p < 18 then
				rectfill(
					p * 14, 4,
					14 + p * 14, 12, 
					(p - 1) == playing_pattern and 17 or 59
				)
				print(
					string.format("\014%02d", p - 1),
					3 + p * 14, 6,
					(p - 1) == tracker.pattern and 7 or 22
				)
			else
				spr(44, 3 + p * 14, 5)
			end
		end
	end	
	
	function el:click(msg)
		local p = msg.mx \ 14
		if p == 0 then
			-- TODO
		elseif p < 18 then
			tracker.pattern = p - 1
		else
			-- TODO
		end
	end

	return el
end


return tracker
:: src/tracker_grid.lua
--[[pod_format="raw",created="2024-04-11 06:36:17",modified="2024-04-11 12:56:52",revision=410]]
local settings = require "src/settings"
local sfx = require "src/sfx"
local tracker = require "src/tracker"


local tracker_grid = {}


-- (Also in tracker.lua)
local ruler_height <const> = 9
local channel_panel_width <const> = 16
local cell_width <const> = 20
local cell_height <const> = 29


function tracker_grid.attach(parent, el)
	el.width = 480 - channel_panel_width
	el.height = 270 - 11 - 16 - 1
	parent:attach(el)
	
	el.x_start = -(cell_width \ 2)
	el.drag_start = nil
	el.selection = { channel = 0, step = 0, part = 0 }
	
	el:set_keyboard_focus(true)
	tracker.input_buffer = ""
	
	-- Draw ------------------------------------------------------------------------

	function el:draw()
		local pattern_is_playing = (stat(464) != 0)  and (stat(466) == tracker.pattern)
		-- Ruler background
		rectfill(0, 0, self.width, ruler_height - 2, 21)
		line(0, ruler_height - 1, self.width, ruler_height - 1, 5)
		local step_start = self.x_start \ cell_width
		local delta_x = - (self.x_start % cell_width)
		if step_start < 0 then
			step_start = 0
			self.x_start = max(- (cell_width \ 2) , self.x_start)
			delta_x = - self.x_start
		end
		for channel = 0, 7 do
			local oy = ruler_height + channel * cell_height
			rectfill(
				0, oy, self.width,
				oy + cell_height - 1,
				((channel % 2) == 0) and 63 or 62
			)
			if sfx.channel_is_muted(tracker.pattern, channel) then
				goto continue
			end
			local track = peek(0x30100 + tracker.pattern * 20 + channel)
			for step = 0, 24 do
				if step_start + step > 63 then break end
				local ox = delta_x + step * cell_width + 1
				if pattern_is_playing and stat(400 + channel, 9) == step_start + step then
					rectfill(ox, oy, ox + cell_width - 2, oy + cell_height - 1, 19)
				end
				if self:has_keyboard_focus() and
					self.selection and self.selection.channel == channel
						and self.selection.step == step_start + step
				then
					spr(24 + self.selection.part, ox, oy)
				end
				-- TODO: support track length > 64
				local base_addr = 0x50000 + 8 + (track * 328) + step_start + step
				local freq = peek(base_addr)
				local inst = peek(base_addr + 64)
				local vol  = peek(base_addr + (2 * 64))
				local fx   = peek(base_addr + (3 * 64))
				local fxp  = peek(base_addr + (4 * 64))
				-- Note and octave
				if freq != 0xff then
					local note = freq % 12
					spr(8 + note, ox + 2, oy + 2)
					local is_sharp = (note == 1) or (note == 3) or (note == 6)
						or (note == 8) or (note == 10)
					local x_oct = is_sharp and (ox + 14) or (ox + 8)
					if (freq \ 12) <= 9 then
						print("\014" .. tostr(freq \ 12), x_oct, oy + 3, 22) 
					else
						print("\014?", ox + 14, oy + 3, 22) 
					end
				else
					print("\014...", ox + 2, oy + 3, 7)
				end
				-- Volume
				if vol != 0xff then
					local w_vol = (vol / 64) * (cell_width - 6)
					w_vol = min(w_vol, cell_width - 6)
					if w_vol == 0 and vol != 0 then
						w_vol = 1
					end
					rectfill(ox + 2, oy + 10, ox + 2 + cell_width - 6, oy + 12, 5)
					if w_vol > 0 then
						rectfill(ox + 2, oy + 10, ox + 2 + w_vol, oy + 12, 22)
					end
					-- TODO: support vol > 64
				else
					print("\014...", ox + 2, oy + 8, 22)
				end
				-- Instrument
				if inst != 0xff then
					print("\014" .. string.format("%02d", inst), ox + 2, oy + 15, 26)
				else
					print("\014..", ox + 2, oy + 15, 22)
				end
				-- Effect
				if false then
					print("\014" .. fx, ox + 2, oy + 22, 22)
				else
					print("\014...", ox + 2, oy + 22, 22)
				end
			end
			::continue::
		end
		-- Bar lines
		for step = 0, 24 do
			if step_start + step > 63 + 1 then break end
			local ox = delta_x + (step * cell_width)
			local bar = (step_start + step) \ (4 * 4) + 1
			local beat = ((step_start + step) \ 4) % 4 + 1
			if (step_start + step) % 4 == 0 then
				if ((step_start + step) \ 4) % 4 == 0 then
					line(ox, 0, ox, self.height - 2, 22)
					print("\014" .. bar .. "." .. beat, ox + 2, 2, 22)
				else
					line(ox, 0, ox, self.height - 2, 5)
					print("\014" .. bar .. "." .. beat, ox + 2, 2, 5)
				end
			else
				poke(0x550b, 0x3f)
				fillp(0b0000000011111111)
				line(ox, ruler_height, ox, self.height - 2, 5)
				fillp()
				poke(0x550b, 0x00)
			end
		end
	end
	
	-- Mouse --------------------------------------------------------------------
	

	function el:hover(msg)
		if msg.my <= ruler_height then
			self.cursor = "grab"
		else
			self.cursor = 1
		end
	end
	

	function el:click(msg)
		if msg.my < ruler_height or msg.mb == 4 then
			self.drag_start = self.x_start + msg.mx
			self.cursor = "grab"
		elseif msg.mb == 1 then
			self:kbd_focus()
			local step = (msg.mx + self.x_start) \ cell_width
			local channel = (msg.my - ruler_height) \ cell_height
			if
				(0 <= channel) and (channel <= 7)
					and (0 <= step) and (step <= 63) -- TODO: handle track length
			then
				self.selection = { part = 0 }
				local y = (msg.my - ruler_height) % cell_height
				if y > 20 then
					self.selection.part = 3
				elseif y > 14 then
					self.selection.part = 2
				elseif y > 8 then
					self.selection.part = 1
				end
				self:goto_channel(channel)
				self:goto_step(step)
			else
				self.selection = nil
			end
		end
	end
	

	function el:drag(msg)
		if self.drag_start then
			self.x_start = self.drag_start - msg.mx
		end
	end
	

	function el:release(msg)
		self.drag_start = nil
		self.cursor = 1
	end
	
	
	function el:mousewheel(msg)
		self.x_start -= msg.wheel_y * cell_width
	end
	
	-- Update -----------------------------------------------------------------
	

	function el:update()
		if not self:has_keyboard_focus() then
			self.selection = nil
		end	
		
		if (keyp("pageup")) self:kbd_focus(); self:goto_previous_channel()
		if (keyp("pagedown")) self:kbd_focus(); self:goto_next_channel()
		if (keyp("up")) self:kbd_focus(); self:goto_previous_part()
		if (keyp("down")) self:kbd_focus(); self:goto_next_part()
		if (keyp("left")) self:kbd_focus(); self:goto_previous_step()
		if (keyp("right")) self:kbd_focus(); self:goto_next_step()

		if self.selection then
			self:handle_positioned_key()
		end
	end


	function el:handle_positioned_key()
		local keys = settings.keys
		
		local track = peek(0x30100 + tracker.pattern * 20 + self.selection.channel)
		local base_addr = 0x50000 + 8 + (track * 328) + self.selection.step
		
		-- Pitched input
		local pitch_key = nil
		for i = 1, #settings.keys.pitched do
			local offset = settings.keys.pitched[i].offset
			for j = 0, #settings.keys.pitched[i] do
				local k = settings.keys.pitched[i][j]
				if keyp(k, true) then
					pitch_key = j + offset
				end
			end
		end
		
		local num_key = keyp_num()
				
		-- Buffered hexadecimal input
		--[[
		local hexa_val = nil
		while peektext() do
			local k = readtext()
			if is_hexa_char(k) then
				tracker.input_buffer ..= k
			else
				tracker.input_buffer = ""
			end
		end
		if #tracker.input_buffer == 1 and keyp("enter") then
			tracker.input_buffer = "0" .. tracker.input_buffer
		end
		if #tracker.input_buffer >= 2 then
			local v = tonum("0x" .. sub(tracker.input_buffer, 1, 2))
			hexa_val = min(v, 0xff)
			tracker.input_buffer = sub(tracker.input_buffer, 3, -1)
		end
		]]
		
		-- Part-specific input
				
		if self.selection.part == 0 then
			local note = peek(base_addr) % 12
			if key("shift") and num_key then
				local pitch = note + num_key * 12
				pitch = mid(0, pitch, 0xfe)
				poke(base_addr, pitch)
				self:goto_next_step()
			elseif pitch_key then
				local pitch = pitch_key + tracker.base_note
				if key("shift") then
					pitch += 12
				end
				pitch = mid(0, pitch, 0xfe)
				poke(base_addr, pitch)
				poke(base_addr + (2 * 64), tracker.base_volume)
				poke(base_addr + (1 * 64), tracker.base_instrument)
				-- TODO fx and fxp
				self:goto_next_step()
			elseif keyp(keys.rest) and key("shift") then
				poke(base_addr, 0xff)
				self:goto_next_step()
			elseif keyp(keys.rest) then
				poke(base_addr, 0xff)
				poke(base_addr + (2 * 64), 0xff)
				poke(base_addr + (1 * 64), 0xff)
				-- TODO fx and fxp
				self:goto_next_step()
			end
			
		elseif self.selection.part == 1 then
			if num_key then
				local vol = math.floor(((num_key / 9) * 64) + 0.5)
				if key("shift") then
					vol += 64
				end
				notify("" .. vol)
				poke(base_addr + (2 * 64), vol)
				self:goto_next_step()
			elseif keyp(keys.rest) then
				poke(base_addr + (2 * 64), 0xff)
				self:goto_next_step()
			end
			
		elseif self.selection.part == 2 then
			if num_key then
				if key("shift") then
					local inst = peek(base_addr + (1 * 64))
					inst = (inst % 10) + (10 * num_key)
					poke(base_addr + (1 * 64), inst)
				else
					poke(base_addr + (1 * 64), num_key)
				end
				self:goto_next_step()
			elseif keyp(keys.rest) then
				poke(base_addr + (1 * 64), 0xff)
				self:goto_next_step()
			end
		--[[
		elseif self.selection.part == 3 then
			if hexa_val then
				poke(base_addr + (4 * 64), hexa_val)
				self:goto_next_step()
			elseif keyp(keys.rest) then
				poke(base_addr + (4 * 64), 0xff)
				self:goto_next_step()
			end
		]]
		end
		
		-- Non part-specific input
		
		if keyp("backspace") then
			self:goto_previous_step()
			local base_addr = 0x50000 + 8 + (track * 328) + self.selection.step
			poke(base_addr, 0xff)
			poke(base_addr + (2 * 64), 0xff)
			poke(base_addr + (1 * 64), 0xff)
			-- TODO: fx and fxp
			-- poke(base_addr + (3 * 64), 0xff)
			-- poke(base_addr + (4 * 64), 0xff)
		end
	end


	function el:kbd_focus()
		self:set_keyboard_focus(true)
		tracker.input_buffer = ""
	end
	

	function el:goto_previous_part()
		if not self.selection then
			self:goto_start()
		elseif self.selection.part > 0 then
			self.selection.part -= 1
		elseif self.selection.channel > 0 then
			self.selection.part = 3
			self:goto_previous_channel()
		end
	end


	function el:goto_next_part()
		if not self.selection then
			self:goto_start()
		elseif self.selection.part < 3 then
			self.selection.part += 1
		elseif self.selection.channel < 7 then
			self.selection.part = 0
			self:goto_next_channel()
		end
	end
	
	
	function el:goto_previous_channel()
		-- TODO: skip muted
		if not self.selection then
			self:goto_start()
		elseif self.selection.channel > 0 then
			self:goto_channel(self.selection.channel - 1)
		end
	end
	
	
	function el:goto_next_channel()
		-- TODO: skip muted
		if not self.selection then
			self:goto_start()
		elseif self.selection.channel < 7 then
			self:goto_channel(self.selection.channel + 1)
		end
	end	

	

	function el:goto_previous_step()
		if not self.selection then
			self:goto_start()
		elseif self.selection.step > 0 then
			self:goto_step(self.selection.step - 1)
		end
	end
		

	function el:goto_next_step()
		if not self.selection then
			self:goto_start()
		elseif self.selection.step < 63 then -- TODO: handle track length
			self:goto_step(self.selection.step + 1)
		end
	end
	

	function el:goto_start()
		self.selection = { part = 0 }
		self:goto_channel(0)
		self:goto_step(0)
	end


	function el:goto_channel(c)
		-- TODO check if channel is muted
		self.selection.channel = c
	end
	

	function el:goto_step(s)
		local offset = 2 -- cell_width \ 2
		self.selection.step = s
		-- TODO: pagination by bars?
		if
			self.x_start > ((self.selection.step * cell_width) - offset)
		then
			self.x_start = self.selection.step * cell_width - offset
		elseif
			self.x_start + self.width < ((self.selection.step + 1) * cell_width) + offset
		then
			self.x_start = ((self.selection.step + 1) * cell_width) + offset - self.width
		end
	end
	

	return el
end


return tracker_grid
:: src/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA0LTA3IDA4OjE0OjAwIixzdG9yZWQ9IjIwMjQtMDQt
MDcgMDg6MTQ6MDAiXV1sejQABAAAAAMAAAAwbmls
:: todo.txt
--[[pod_format="raw",created="2024-04-10 20:46:30",modified="2024-04-10 20:46:41",revision=1]]
- add 4/4 config

:: .info.pod
b64$LS1bW3BvZCxydW50aW1lPTUsc3RvcmVkPSIyMDI0LTA0LTExIDEyOjU2OjUyIix3b3Jrc3Bh
Y2VzPXt7bG9jYXRpb249Im1haW4ubHVhIzIiLHdvcmtzcGFjZV9pbmRleD0xfSx7bG9jYXRpb249
InNyYy90cmFja2VyLmx1YSMxNjUiLHdvcmtzcGFjZV9pbmRleD0xfSx7bG9jYXRpb249InNyYy90
cmFja2VyX2dyaWQubHVhIzI2NiIsd29ya3NwYWNlX2luZGV4PTF9LHtsb2NhdGlvbj0ic3JjL2Zp
bGUubHVhIzE2OCIsd29ya3NwYWNlX2luZGV4PTF9LHtsb2NhdGlvbj0ic3JjL2NvbnN0YW50cy5s
dWEjMzMiLHdvcmtzcGFjZV9pbmRleD0xfSx7bG9jYXRpb249InNyYy9zZXR0aW5ncy5sdWEjMTgi
LHdvcmtzcGFjZV9pbmRleD0xfSx7bG9jYXRpb249InNyYy9zeW50aC5sdWEjMjEiLHdvcmtzcGFj
ZV9pbmRleD0xfSx7bG9jYXRpb249ImdmeC8wLmdmeCIsd29ya3NwYWNlX2luZGV4PTJ9LHtsb2Nh
dGlvbj0ibWFwLzAubWFwIix3b3Jrc3BhY2VfaW5kZXg9M30se2xvY2F0aW9uPSJzZngvMC5zZngi
LHdvcmtzcGFjZV9pbmRleD00fSx7bG9jYXRpb249InNmeC8wLnNmeCIsd29ya3NwYWNlX2luZGV4
PTR9LHtsb2NhdGlvbj0ic2Z4LzAuc2Z4Iix3b3Jrc3BhY2VfaW5kZXg9N319XV1sejQABAAAAAMA
AAAwbmls
:: [eoc]
