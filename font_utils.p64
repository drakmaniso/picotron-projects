picotron cartridge // www.picotron.net
version 2

:: exports/
:: exports/appdata/
:: exports/appdata/system/
:: exports/appdata/system/util/
:: exports/appdata/system/util/font2gfx.lua
--[[pod_format="raw",created="2024-03-27 16:31:10",modified="2024-03-29 17:48:02",revision=153]]
local function print_usage(exit_code)
	print("usage: font2gfx input.font output.gfx output.lua")
	print("options:")
	print("  -o: overwrite output files")
	exit(exit_code)
end

local function fail(err_msg)
	print("Error: " .. err_msg)
	exit(1)
end

cd(env().path)

local src, dest, config
local flag_overwrite = false
local argv = env().argv
for i = 1, #argv do
	if argv[i] == "-h" then
		print_usage(0)
	elseif argv[i] == "-o" then
		flag_overwrite = true
	elseif sub(argv[i],1,1) == "-" then
		fail("unknown option")
	elseif not src and sub(argv[i], -5, -1) == ".font" then
		src = argv[i]
	elseif not dest and sub(argv[i], -4, -1) == ".gfx" then
		dest = argv[i]
	elseif not config and sub(argv[i], -4, -1) == ".lua" then
		config = argv[i]
	else
		print_usage(1)
	end
end

if (not src) print_usage(1)
if (not fstat(src)) fail("input file not found")
if (fstat(src) ~= "file") fail("input is not a file")

local font = fetch(src)
if (type(font) ~= "userdata") fail("not userdata")
if (font:width() ~= 2048 or font:height()) fail("userdata has wrong size")

if (not dest) dest = sub(src, 1, -6) .. ".gfx"
if (fstat(dest) and not flag_overwrite) fail("font output file already exists")

if (not config) config = sub(dest, 1, -5) .. ".lua"
if (fstat(config) and not flag_overwrite) fail("config output file already exists")

local function write_byte(sprite, y, byte)
	for x = 0,7 do
		local col = 0
		if byte & (0x01 << x) ~= 0 then
			col = 7
		end
		set(sprite, x, y, col) 
	end
end

local output = {} 
for code = 0, 255 do
	local bmp = userdata("u8", 8, 8)
	for y = 0, 7 do
		local index = (code * 8) + y
		write_byte(bmp, y, font[index])
	end
	spr(bmp, 10 * (code % 8), 10 * (code \ 8))
	output[code] = {
		bmp = bmp,
	}
end

store(dest, output)
print("Saved gfx file to " .. env().path .. "/" .. dest)

local config_str = ""
local function write(str)
	config_str ..= str .. "\n"
end
write("font_config = {")
write("	width = " .. tostr(font[0]) .. ",")
write("	width_128 = " .. tostr(font[1]) .. ",")
write("	height = " .. tostr(font[2]) .. ",")
write("	x_offset = " .. tostr(font[3]) .. ",")
write("	y_offset = " .. tostr(font[4]) .. ",")
write("	flags = " .. tostr(font[5]) .. ",")
write("	char_offsets = {")
for code = 16, 127 do
	local byte = font[code // 2]
	local width
	if code % 2 == 0 then
		width = byte & 0b00000111
	else
		width = (byte & 0b01110000) >> 4
	end
	if width & 0b0100 ~= 0 then
		width |= 0xfffffffffffffffc
	end
	if width ~= 0 then
		if code ~= ord("\"") then
			write("		[\"" .. chr(code) .. "\"] = " .. tostr(width) .. ",")
		else
			write("		['" .. chr(code) .. "'] = " .. tostr(width) .. ",")
		end
	end
end
write("	}")
write("}")
store(config, config_str)
print("Saved config file to " .. env().path .. "/" .. config)

:: exports/appdata/system/util/gfx2font.lua
--[[pod_format="raw",created="2024-03-27 16:45:52",modified="2024-03-29 17:37:59",revision=87]]
local function print_usage(exit_code)
	print("usage: gfx2font input.gfx input.lua output.font")
	print("options:")
	print("  -o: overwrite output files")
	exit(exit_code)
end

local function fail(err_msg)
	print("Error: " .. err_msg)
	exit(1)
end

cd(env().path)

local src, config, dest
local flag_overwrite = false
local argv = env().argv
for i = 1, #argv do
	if argv[i] == "-h" then
		print_usage(0)
	elseif argv[i] == "-o" then
		flag_overwrite = true
	elseif sub(argv[i],1,1) == "-" then
		fail("unknown option")
	elseif not src and sub(argv[i], -4, -1) == ".gfx" then
		src = argv[i]
	elseif not config and sub(argv[i], -4, -1) == ".lua" then
		config = argv[i]
	elseif not dest and sub(argv[i], -5, -1) == ".font" then
		dest = argv[i]
	else
		print_usage(1)
	end
end

if (not src) print_usage(1)
if (not dest) dest = sub(src, 1, -5) .. ".font"
if (sub(src, -4, -1) ~= ".gfx") fail("wrong extension for input file")
if (sub(dest, -5, -1) ~= ".font") fail("wrong extension for output file")
if (not fstat(src)) fail("font input file not found")
if (fstat(dest) and not flag_overwrite) fail("output file already exists")
if (fstat(src) ~= "file") fail("input is not a file")

local gfx = fetch(src)
if (type(gfx) ~= "table") fail("input is not a table")

local output = userdata("u8", 2048)

local char_widths = {}
for code = 0, #gfx do
	if (not gfx[code] or type(gfx[code]) ~= "table") fail("missing entry for character "..tostr(code))
	local bmp = gfx[code].bmp
	if (not bmp or type(bmp) ~= "userdata") fail("missing bitmap for character "..tostr(code))
	if (bmp:width() ~= 8 or bmp:height() ~= 8) fail("bitmap for character "..tostr(code).." is not 8 by 8")
	local max_width = 0
	for y = 0, 7 do
		local byte = 0
		for x = 0, 7 do
			if bmp:get(x, y) ~= 0 then
				byte |= 0x01 << x
				if  x > max_width then
					max_width = x
				end				
			end
		end
		output:set((code * 8) + y, byte)
	end
	char_widths[code] = max_width + 2
end

if false then
	local base_width = char_widths[ord("x")]
	print(base_width)
	
	for code = 34, 127, 2 do
		local high = char_widths[code + 1] - base_width
		if (high ~= 0) print(chr(code + 1) .. " = " .. high)
		local low = char_widths[code] - base_width
		if (low ~= 0) print(chr(code) .. " = " .. low)
		local byte = ((high & 0b0111) << 4) | (low & 0b0111)
		-- if (byte ~= 0) print(tostr(code // 2) .. " => " .. tostr(byte, true))
		output:set(code // 2, byte)
	end
end

if (not config) config = sub(src, 1, "-5") .. ".lua"
if (not fstat(config)) fail("config input file not found")
include(config)
if (not font_config) font_config = {}
if (not font_config.width) font_config.width = 5
if (not font_config.width_128) font_config.width = 10
if (not font_config.height) font_config.width = 11
if (not font_config.x_offset) font_config.width = 0
if (not font_config.y_offset) font_config.width = 0
if (not font_config.flags) font_config.flags = 0
if (not font_config.char_offsets) font_config.char_offsets = {}
output:set(0, font_config.width)
output:set(1, font_config.width_128)
output:set(2, font_config.height)
output:set(3, font_config.x_offset)
output:set(4, font_config.y_offset)
for k, v in pairs(font_config.char_offsets) do
	if (type(k) ~= "string") fail("expected single char string as keys in char_offsets config")
	local code = ord(k)
	local byte = output:get(code // 2)
	if code % 2 == 0 then
		byte &= 0b11110000
		byte |= v & 0b0111
	else
		byte &= 0b00001111
		byte |= (v & 0b0111) << 4
	end
	output:set(code // 2, byte)
end

store(dest, output)
print("Saved output file to " .. env().path .. "/" .. dest)

:: exports/appdata/system/util/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTAzLTI5IDE3OjU0OjE0IixzdG9yZWQ9IjIwMjQtMDMt
MjkgMTc6NTQ6MTQiXV1sejQABAAAAAMAAAAwbmls
:: exports/appdata/system/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTAzLTI5IDE3OjU0OjA4IixzdG9yZWQ9IjIwMjQtMDMt
MjkgMTc6NTQ6MDgiXV1sejQABAAAAAMAAAAwbmls
:: exports/appdata/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTAzLTI5IDE3OjUzOjU5IixzdG9yZWQ9IjIwMjQtMDMt
MjkgMTc6NTM6NTkiXV1sejQABAAAAAMAAAAwbmls
:: exports/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTAzLTI5IDE3OjUzOjQ5IixzdG9yZWQ9IjIwMjQtMDMt
MjkgMTc6NTM6NDkiXV1sejQABAAAAAMAAAAwbmls
:: gfx/
:: gfx/0.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTAzLTI5IDE3OjUzOjM1Iixtb2RpZmllZD0iMjAyNC0w
My0yOSAxOTo0Njo1NyIscmV2aXNpb249MTUxXV1sejQAbQAAAAUxAADzFHtbMF09e2JtcD1weHUA
QyAQEATw8CxmbGFncz0wLHBhbl94CADPeT0wLHpvb209OH0sMQD-------------------------
---------------------------------------nUG09OH19
:: gfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTAzLTI5IDE3OjUzOjM1IixzdG9yZWQ9IjIwMjQtMDMt
MjkgMTc6NTM6MzUiXV1sejQABAAAAAMAAAAwbmls
:: label.png
b64$iVBORw0KGgoAAAANSUhEUgAAAeAAAAEOCAIAAADe_FMwAAAIgklEQVR4Ae3dwW3jOABAUUdw
HSlk4DLcRW5z82kxJ9-2Nl2oDGcKSSPZAwGCICmKkaVYnn0Pi4VtSSRFRX_uL5-j_wGA-RlsAYBA
AyDQAAINgEADCDQAAg2AQAMINAACDSDQAAg0AAININAACDSAQAMg0AACDYBAAyDQAAINgEADCDQA
Ag2AQAMINAACDSDQAAg0gEADINAACDSAQAMg0AACDYBAAyDQAAINgEADCDQAAg0g0AAINAACDSDQ
AAg0gEADINAACDTAcznagn638zX9ehovt-P1NF6yc7Jf1pq6MexDJu08M2xaOJp_XnF2_FsNtqDf
abyEZMQP1XMesrDdDpsOIrjwJUdbcKfb_RrTk36OX6fClB3NxjmNl-hL_JANXl1A56TpjMvOTH8p
lze11PYU6S37u4LD4TDYgjudxku1LKE44b9qm7Kj6TjpCXHYqaH6Jy1nyb5ODZudmc1SLq8xbLnU
6i0Dh8PhaAu2C3dZ7XawGn1ca9J2NL95llVuGf5igy3YtNGxZbOpCidvOuneZgmnTZ2p13C0BSsK
wQqFivGqhiY7Ybbj8YRytGWTfuleqofSWdLlVWdJx4kFb6_2OjVs5-Wffz9_-dzVkl4_x3cPBlDn
jz_-X3_87arRgwcDEHz8_f36z78CDaDRAg3wnI0_ehgA0euPt8Ph8PHr5x4WM3geAB_-fr7_eHv9
8fbx5-d_VvXyOb57NgA7NNgCAIEGQKABBBoAgQYQaAAEGgCBBngyR1vQ73a_hg_n8RK_hg-9l8cL
00Hi58Yl-YNPLXvd6R77FMpFZve11o1k41SfYHba1CWwwGAL_oU3bfH7Fi9MR2iPtsq73T-dsz_a
rW_z_gTb06kz9zjagmVu52v8f-kS3s7X_GP4PHXm7BThkvA5HSH9pVzM4uniheUtzA6bLbK6nnKo
bKKeW75-36q3kK6t3NXGs86mm7qk_lXEaRhswTLhpTqNl863a8FLmF0S5ooJCF-jMrLFpCevdUdx
0uqw2ZLKk2OL279MfY0DrrJvPTuTbcjU1OnvjUuyqbPtgqqjLdhOeAk3_uchvOeNmO78FjZd9mOn
6Jl69gnC4XAYbMGTOo2X_JJXq7rDN79cUvrL9yw7TPGQzcmmbjxBCI62oF94l0JHwgsWfql2J5wW
T86ubXyemq48lE6dLqb62s9OVx0kvYXG-aZHszX0p7Bdq56WxQVP3WO2yNkp0ruYeoKNv4r0UDZ1
YxkQvXyO73YBYIcGWwAg0AAINMDzO9qCr7qdr6fxkn49HA7pL2td2D-ygmW3z5yatzx0z_23733q
aP_NbLpv2y1j3ZGntn3dvy42MtiC_--cF-yVxwvDe9I44SE32EhSuuZ7Ftm493XD0Zhl653c4Vxx
Y6X5KRxtwervSfjTj_9M_jWeUL4e2fnVfxWyfx565p19e-vnnX2l_29-xXE6x_wcubFv5bX9y0gH
L59mdrQxcvzc_EtIB89G_9JesQeDLbgzx7fzNX4IFUvft_ytyDI3VcBs5FmNedttXTBvlpV7br9x
O1N3l41TTjq12tmNmt239u1kQ6XzxqEaSY1HZ28w1rk6V3Uns8F5IkdbsFh8VRb3vfFepUezLkz9
U7H6HZXzlkef652-Z6Pa1zaOth-ftz1cBJqFdY5vafvkahDTo8uK3DnvM_Y4XXC5UeU-P1OhbG9y
drTcqHQbyz1vPNzqeqo3hUDTFbupFyY7Ib6l4etGkW0f-eq82Zrvuf3ZWRrBiuP0j1ndimpGqydX
ry2X0blpWc3Lo9WRF99jHK3cWH3fuZfP8d0ufMlGf9P9oflr5n1sGrIFfOd6HrXnCDQA6xhsAYBA
AyDQAAINgEADCDQAAg2AQAMINAACDSDQAAg0AAINsGdHW7CR2-kaPpzGy_ojhzHjh6kT7hn8-pP7
h2qcGbYx3m9jP7NB7tkE2InBFmznNF5O4yWW_n94__sO8qUB1Zm-wNEWfMntfE3f-Ozr7IUh1uGS
9HP8mh1dEJpwYWOi6vnhhPa12S2UJ5fDTt1L-6Szd5pekq0tm65-Yxc-ZVjXYAu_JL781a-le56_
2_FzGrs0T_FrdrTahXDVVDXCj1MTVUsUT86ujZ-jtektlCeXy0i-Tt3s7KSNZ5G1OBszW3Oa5sb4
6sx_HG3BskanNWm3cuprNfSxL_nXqYLc3472RNkiG6dtOmnj37-VH646syuDLXjUO3waL_G-9GuM
TvZ1039vpiYKt7ZFoe6fdKO1Zav6nkcAU4624FF1Tlucfg7Dpl8XD552sDpUOVH12p6JqiNX92fB
pOk4Mc3Zaekg6eztHZi6qWxtW-wrBbNePsd3uwCwQ4MtABBoAAQaQKABEGgAgQZAoAEQaACBBkCg
AQQaAIEGQKABBBoAgQYQaAAEGkCgARBoAAQaQKABEGgAgQZAoAEQaACBBkCgAQQaAIEGEGgABBoA
gQYQaAAEGkCgARBoAAQaQKABEGgAgQZAoAEEGgCBBkCgAQQaAIEGEGgABBoAgQYQaAAEGkCgARBo
AAQaQKABEGgAgQZAoAEEGgCBBkCgAQQaAIEGEGgABBoAgQYQaAAEGkCgARBoAIEGQKABEGgAgQZA
oAEEGgCBBkCgAQQaAIEGEGgABBpAoAEQaAAEGkCgARBoAIEGQKABEGgAgQZAoAEEGgCBBkCgAQQa
AIEGEGgABBpAoAEQaAAEGkCgARBoAIEGQKABEGgAgQZAoAEEGgCBBhBoAAQaAIEGEGgABBpAoAEQ
aAAEGkCgARBoAIEGQKABBBoAgQZAoAEEGgCBBhBoAAQaAIEGEGgABBpAoAEQaAAEGkCgARBoAIEG
QKABBBoAgQZAoAEEGgCBBhBoAAQaAIEGEGgABBpAoAEQaACBBkCgARBoAIEGQKAB-g-_A_oVV3qS
xmsaAAAAEHRFWHRMb2RlUE5HADIwMTEwMjIx41m2wQAAAABJRU5ErkJggg==
:: main.lua
--[[pod_format="raw",created="2024-03-29 17:53:35",modified="2024-03-29 19:46:57",revision=219]]
local state = "start"
local error = nil

function _draw()
	if state == "start" then
		cls(23)
		color(24)
		print("This cart is an installer!", 100, 50)
		print("")
		print("It will install two command line utilities")
		print("(font2gfx and gfx2font) into /appdata/system/util")
		print("")
		print(">> Press X to start installation <<")
	elseif state == "installed" then
		cls(17)
		color(19)
		print("Installation done!", 160, 100)
	elseif state == "overwrite" then
		cls(8)
		color(7)
		print("Warning:", 100, 50)
		print("The files already exist.")
		print("")
		print(">> Press O to overwrite! <<")
	elseif state == "failed" then
		cls(8)
		color(7)
		print("Error:", 160, 100)
		print(tostr(error))
	else
		cls(8)
		color(7)
		print("Internal error: unknown state", 160, 100)
	end
end

function _update()
	if state == "start" then
		if btnp(5) or keyp("x") then
			local err, need_overwrite = perform_install(false)
			if err then
				state = "failed"
				error = err
			elseif need_overwrite then
				state = "overwrite"
			else
				state = "installed"
			end
		end
	elseif state == "overwrite" then
		if btnp(4) or keyp("o") then
			local err = perform_install(true)
			if err then
				state = "failed"
				error = err
			else
				state = "installed"
			end
		end
	end
end

function check_folder(path)
	if not fstat(path) then
		mkdir(path)
	end
	if fstat(path) ~= "folder" then
		return "cannot create folder " .. path
	end
end

function copy_file(src, dest, overwrite)
	if not fstat(src) then
		return "file not found: " .. src
	end
	if fstat(dest) and not overwrite then
		return "file already exists: " .. dest
	end
	cp(src, dest)
end

function perform_install(overwrite)
	local err
	err = check_folder("/appdata")
	if (err) return err
	err = check_folder("/appdata/system")
	if (err) return err
	err = check_folder("/appdata/system/util")
	if (err) return err
	err = copy_file(
		"/ram/cart/exports/appdata/system/util/font2gfx.lua",
		"/appdata/system/util/font2gfx.lua",
		overwrite
	)
	if (err) return nil, true
	err = copy_file(
		"/ram/cart/exports/appdata/system/util/gfx2font.lua",
		"/appdata/system/util/gfx2font.lua",
		overwrite
	)
	if (err) return nil, true
	return nil, false
end
:: map/
:: map/0.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTAzLTI5IDE3OjUzOjM1Iixtb2RpZmllZD0iMjAyNC0w
My0yOSAxOTo0Njo1NyIscmV2aXNpb249MTQ3XV1sejQAaAAAAFgQAADwCHt7Ym1wPXVzZXJkYXRh
KCJpMTYiLDMyAwAvIjABAP--------------------vxCCIpLGhpZGRlbj1mYWxzZSxwYW5feD0w
CADSeT0wLHRpbGVfaD0xNgoAEHcKAIB6b29tPTF9fQ==
:: map/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTAzLTI5IDE3OjUzOjM1IixzdG9yZWQ9IjIwMjQtMDMt
MjkgMTc6NTM6MzUiXV1sejQABAAAAAMAAAAwbmls
:: sfx/
:: sfx/0.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTAzLTI5IDE3OjUzOjM1Iixtb2RpZmllZD0iMjAyNC0w
My0yOSAxOTo0Njo1NyIscmV2aXNpb249MTQxXV1sejQAEAEAAFEHAADwJ3B4dQADKAAAAwAED0AQ
Ag4AAaABIAKgDgAPEAAN8MoBAgMEBQYHAA--kAgJCgsPDA8NDw4PDxAA8AANDxEPEg8TDxQPFQ8W
DxcTAPEBDxgPGQ8aDxsPHA8dDx4PHxQA8QAgDyEPIg8jDyQPJQ8mDycUAPEAKA8pDyoPKw8sDy0P
Lg8vFADxADAPMQ8yDzMPNA81DzYPNxQA-wU4DzkPOg87DzwPPQ8_Dz8AD--w-wEA6-8nWgEQBg8g
EAEgASAB8AACEAIMEAEgDyEgATAPQPDDDygP--DGD-gKD-8PgA-3Dw0B8AkBEAYMMAD-OR--AQDc
v-gPQAANQP--sPBwCgD--2Qf-wEAl1D-----Hw==
:: sfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTAzLTI5IDE3OjUzOjM1IixzdG9yZWQ9IjIwMjQtMDMt
MjkgMTc6NTM6MzUiXV1sejQABAAAAAMAAAAwbmls
:: .info.pod
b64$LS1bW3BvZCxhdXRob3I9ImRyYWttYW5pc28iLGljb249dXNlcmRhdGEoInU4IiwxNiwxNiwi
MDAwMDAwMDEwMTAxMDEwMTAxMDEwMTAxMDEwMDAwMDAwMDAwMDEwNzA3MDcwNzA3MDcwNzA3MDcw
NzAxMDAwMDAwMDEwNzBkMGQwZDBkMGQwZDBkMGQwZDBkMDcwMTAwMDEwNzBkMGQwZDBkMGQwZDBk
MGQwZDBkMGQwZDA3MDEwMTA3MGQwZDBkMGQwNzA3MGQwZDBkMGQwZDBkMDcwMTAxMDcwZDBkMGQw
NzBkMGQwZDA3MGQwZDBkMGQwNzAxMDEwNzBkMGQwNzA3MDcwNzBkMDcwNzA3MGQwZDA3MDEwMTA3
MGQwZDBkMDcwZDBkMGQwNzBkMGQwZDBkMDcwMTAxMDcwZDBkMGQwNzBkMGQwZDA3MGQwZDBkMGQw
NzAxMDEwNzBkMGQwZDA3MGQwZDBkMGQwNzA3MGQwZDA3MDEwMTA3MGQwZDBkMGQwZDBkMGQwZDBk
MGQwZDBkMDcwMTAxMDYwNzBkMGQwZDBkMGQwZDBkMGQwZDBkMDcwNjAxMDEwNjA2MDcwNzA3MDcw
NzA3MDcwNzA3MDcwNjA2MDEwMDAxMDYwNjA2MDYwNjA2MDYwNjA2MDYwNjA2MDEwMDAwMDAwMTA2
MDYwNjA2MDYwNjA2MDYwNjA2MDEwMDAwMDAwMDAwMDEwMTAxMDEwMTAxMDEwMTAxMDEwMDAwMDAi
KSxub3Rlcz0iZm9udDJnZnggYW5kIGdmeDJmb250IixydW50aW1lPTQsc3RvcmVkPSIyMDI0LTAz
LTI5IDE5OjQ2OjU3Iix0aXRsZT0iRm9udCBVdGlscyIsdmVyc2lvbj0iIix3b3Jrc3BhY2VzPXt7
bG9jYXRpb249Im1haW4ubHVhIzEwIix3b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJnZngv
MC5nZngiLHdvcmtzcGFjZV9pbmRleD0yfSx7bG9jYXRpb249Im1hcC8wLm1hcCIsd29ya3NwYWNl
X2luZGV4PTN9LHtsb2NhdGlvbj0ic2Z4LzAuc2Z4Iix3b3Jrc3BhY2VfaW5kZXg9NH19XV1sejQA
BAAAAAMAAAAwbmls
:: [eoc]
