picotron cartridge // www.picotron.net
version 2

:: docs/
:: docs/design.md
b64$LS1bW3BvZF9mb3JtYXQ9InJhdyIsY3JlYXRlZD0iMjAyNS0wNS0wOCAxMzo1MjoyNSIsbW9k
aWZpZWQ9IjIwMjUtMDUtMTMgMTY6MzI6MTIiLHJldmlzaW9uPTc2NV1dCiMjIFNwZWNpYWwgTW92
ZXMKCi0gRXh0cmEgQXR0YWNrOiBhIGJpZyBhdHRhY2sgKFRPRE86IGhvdyBkb2VzIGl0IHNjYWxl
PyB1c2UgdGhlIG51bWJlciBvZgogIHN1cGVyLWNoYXJnZWQgYXR0YWNrIGdlbXM-KS4gVHJpZ2dl
cnMgYWZ0ZXIgdGhlIG5vcm1hbCBhdHRhY2ssIHNvIGNhbgogIGNpcmN1bXZlbnQgZG9kZ2UsIGRl
ZmVuc2UgYW5kIGFybW9yLgoKLSBEb3VibGUgU3RyaWtlOiBuZXh0IGF0dGFjayBpcyBkZWFsdCB0
d2ljZS4gTmV4dCBhdHRhY2sgY2FuIGJlIG9uIHRoZSBzYW1lCiAgdHVybi4gRG9kZ2Ugb25seSB0
cmlnZ2VycyBmb3IgdGhlIGZpcnN0IGhpdC4KCi0gUmFnZTogdHJhbnNmb3JtcyBhbGwgZGVmZW5z
ZSBnZW1zIGludG8gYXR0YWNrIGdlbXMuIFRPRE86IGNhcCB0aGUgZGFtYWdlPwoKLSBTcGVlZDog
dHJhbnNmb3JtcyBhbGwgZGVmZW5zZSBnZW1zIGludG8gZG9kZ2UgZ2Vtcy4gQ2FuIGltbWVkaWF0
ZWx5CiAgZmlsbCB0aGUgZG9kZ2UgYmFyLgoKLSBIYXJkZW46IHRyYW5zZm9ybXMgYWxsIGRlZmVu
c2UgZ2VtcyBpbnRvIGFybW9yIGdlbXMuCgotIFBhcnJ5L0NvdW50ZXI6IHBhcnJ5IHRoZSBuZXh0
IGF0dGFjayAobnVsbGlmeSBpdCkgYW5kIG1pcnJvciB0aGUgZGFtYWdlCiAgdG8gdGhlIG9wcG9u
ZW50LgoKIyMgU2tpbGxzCgpVc2luZyBhIHNraWxsIHdpdGhvdXQgY3JlYXRpbmcgYSBtYXRjaCBk
b2VzIG5vdCBlbmQgdGhlIHR1cm4sIGV2ZW4gaWYgc29tZQpnZW1zIGFyZSBjbGVhcmVkLiBUaG9z
ZSBjbGVhcmVkIGdlbXMgYXJlIGFkZGVkIHRvIHRoZSBuZXh0IG1hdGNoLgoKLSBDbGVhciBvbmUg
Z2VtLgoKLSBDbGVhciBvbmUgY29sdW1uLgoKLSBTdXBlci1jaGFyZ2Ugb25lIGdlbS4KCi0gTW92
ZSBhbGwgc3VwZXJjaGFyZ2VzIHRvIGEgc3BlY2lmaWMgY29sb3IuCgotIEZyZWUgc3dhcDogbWFr
ZSBhIHN3YXAtYW5kLW1hdGNoIHdpdGhvdXQgZW5kaW5nIHRoZSB0dXJuLgoKLSBTd2FwIHR3byBj
b2xvcnMuCgotIFN3YXAgdHdvIGRpc3RhbnQgKG5vbi1tYXRjaGluZz8pIGdlbXMuCgotIFN3YXAg
dHdvIGFkamFjZW50IG5vbi1tYXRjaGluZyBnZW1zLgoKLSBSb3RhdGUgY29sdW1uLgoKLSBTd2Fw
IHR3byAoZGlzdGFudCkgY29sdW1ucy4KCiMjIFBlcm1hbmVudCBTa2lsbHMKCi0gSW52ZXJ0IGdy
YXZpdHkuCgotIFNodWZmbGUgdGhlIGJvYXJkLgoKIyMgVXBncmFkZXMKCkNvbW1vbjoKLSBpbmNy
ZWFzZSBwZXJjZW50YWdlIG9mIHN1cGVyY2hhcmdlIDxjb2xvcj4gZ2VtcyAoMCUgLT4gMTAlIC0_
IDIwJSAtPiAuLi4pCi0gZGVjcmVhc2UgZG9kZ2UgbWV0ZXIgKDYgLT4gNSAtPiA0IC0_IC4uLikK
LSBkZWNyZWFzZSBzcGVjaWFsIG1ldGVyICgxMiAtPiAxMSAtPiAxMCAtPiAuLi4pCgpSYXJlOgot
IGluY3JlYXNlIG1heCBhcm1vcgotIGluY3JlYXNlIGhlYWx0aAotIGluY3JlYXNlIG1heCBhdHRh
Y2s-Ci0gaW5jcmVhc2UgcGVyY2VudGFnZSBvZiA8Y29sb3I_IGdlbXMgKDIwJSAtPiAzMyUpCgpJ
ZiBoZWFsdGggaXMgbG93LCBvbmUgb2YgdGhlIDMgb3B0aW9ucyBpcyBhbHdheXM6Ci0gaGVhbCBh
IHNtYWxsIGFtb3VudAoKIyMgTmV3IEdhbWUgUGx1cwoKLSBFbm5lbWllcyBhcmUgdG91Z2hlcgot
IEJhc2ljIHN3YXAgbWVjaGFuaWMgaXMgcmVwbGFjZWQgd2l0aCBtdWx0aS1zd2FwIChpLmUuIHN3
YXAgYSBjaGFpbiBvZiA2IGdlbXMp
:: docs/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA4LTI2IDE0OjAzOjI1Iixtb2RpZmllZD0iMjAyNS0w
NS0xMyAxNjozMjoxMiJdXQ==
:: gfx/
:: gfx/0.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTAzLTMwIDA1OjM5OjM0Iixtb2RpZmllZD0iMjAyNS0w
NS0xMyAxNjozMjoxMiIscmV2aXNpb249NjE1NV1dbHo0AE06AACtvgAA8xR7WzBdPXtibXA9cHh1
AEMgEBAE8PAsZmxhZ3M9MCxwYW5feAgAz3k9MCx6b29tPTZ9LDEA-1DwER0dBPBPPxJAPuAODxYf
Kg8VDiAOHyofFg7QDg8qPxUuBQBADg81wB4ApBQfFS8WHxUfFA8TANUPFQ8UDxNPFQ8TDxQfKAAB
FQARLxUAEC8VADGQPyw_AFATLxUfEz4A-AYeHytgDyw-LS8VXy0-LB8VHywPK1ARAD8PNUATACXz
AFBPLC8TTywvKx8TLysfNVsANU8tLyIAH2ATAITvcD8rLn0eHR81gPwD8C7JAR3yPDkvKxAPD-AG
DysgHvAFTyzwBw0-LQ0O8AYNDD0ODzXwAx1sHfABDawN4A28HcANLB8qjA0OoA0sK4wdDpANLBuc
HQ4PNXAN-AAtDgYAKwpgBwAm7D0GAP8g3E0OCnANvE0OGnANrF0OCpAdbG0OGqAOzQ4awA6tDhrg
Hm0eGvABCm4q8ARq8BfNAB3wBU0PLOAOoA4PLQ7ADg0OkA4dDqAOoABAgA4tDgQA0QyADg0PKx0O
YA4dCw0OAFIbHW4dGwsAMyuNKxQAEq0SACr9AQYAkHAOLS5tLi0OcFQA8QkaDyoLDk0OCgsPGg4d
DgxgDh0OCRsJDi0GAAERADMtDikEAIAMYA49Lk0uPQkAIP0DSQD-Jm0vCW0OHEBbXQhdW3AOPQ4d
Dh0OPQ4cgDstHg0eLTtwGyAOrQ4cABuwHm0eHPABDG4s8ARsEAEf8AKLDytgDvAEHkAe8AQODyxO
DQ0A8DFNHtAuIA5tDiAuDzVAHi0eAA4NHw8NHA0OAB4tHiAObR4MDyoODAsODB5tDhAOfQ4MHgwe
DA59Dg81AA59Dg0cKwDwCX0OCgAOjQ5NDo0OCgA_bQ4tDm0_CgAOGt8A8AYaDgoQCgA_zT4KEAow
DhoOLQ5NDi0WAPAGcAoATk1OChAKkA4qDk0OKg4K0AogGwD-AiAK8AMODQ4a8AkOGvALCvBx6AAd
IBoPCgNwLPAKDysPFhQDIvAJEgAgDzUUABEfBgBBDzXwCwYA8AQE7yvADu8tDqAODf8sAA6QDg38
BgDwDhw_TD4cDg81YC4MDg8NHw8PDQ4sDgsfDwsODC5A0wHwBQ4KHxAKDiwOChkKDgwOHQ4wDg0M
FgAWGRUAAEAAsSAOHA4MDgsaCw4sBgAAFgAQCBUAAmEA8AIcDggwLvwBLhhACA78AQ4oYAYAYAiA
DjyOPAcAUiwOjQ4sCQBVDQ5MDgwNABB8CgAwkA4cCgCvHA4YoO4YwOjwMCoBKR8SKgEWULAODd8s
lgUFMgEXDC0BVTwOLA48JQEDDgAFIAEwXixeAgESCxcBYA8cHx0PHDABIh8dMQEYCxsBEQsbATAb
QAsVARErGwESCxsBFAsbARgLGwEVCxsBFQsbAW8boO4bwOsbAR-wGS8fK6AusA4fLR5wDi0ekA4f
LB0eQA48HR5gDkwdHhAOHA8NDw8PDRwWAPIEbB0eLA8PDxAPDzwdDiAOnB0eDB4AoVwOIA4sHmwd
HnwwA-ECHB4LDiwePB0eXA4LAC4rDgwQAKMMHR48DgsQKxAeEgByHS4MDgtwGxAA8QUMDi0eC8Ab
EB4bDjwNDgvwAhsADhwB4PABHhAOTA4LsB4gDg0e-wAhG2ALAHIADkwuGxAuCwCSDB0eLB47IA4d
DABAXB4rYAgA-xiMHiuADrweK7AOjB4r0A5sHivwAQ48HivwAw4cHivwBh4r8Akb8CI1AR3xCBYf
K2Ae8AAeDy0ODzVQDg8tHrAeHQ8sDQDwEA0fLB5wHh0cDh81YA48HkAOHTwOC3AOXA4wDkwOG4DL
ANAwDjw_QD48DhswDkwdDwBQHUwOC1AfABBABQAjUA4PACELcO4AAAUAYXAOLD4gPvEB8AMsHQ4L
EA4dLA4bkA48DhsgDjwWAAG3AxAwKwAQgIECEBxMABAcKgKADSwODD4APgxEABMNsAFxDhwdDgsO
HSAAEhzSAQEzAABzASQbgPQBABMAIAsQBQBgoA5cDhwuZQJADlwODNwFoA4LwA5cDg08DhsIAAGp
ATDgDky0ADDgDlyGAI-wAJ4b8AKbsFsBHdAyLyugHqAeLy0OcB4dBABAPywOQE8BALcFFB2OAqIO
EB4dTA4wDh08vgBBLB4dbIUEE1y7ALAeHZwOIA58Hh1sHpcB8QQQDlweHTweLA4LHhwOEA48Hh0M
DQDFDA4LAAsuCwAODC4dEACVHgsgKwAeLQ4MDwAhG2DrAAAKABGw7QDxCiAb8AEOTA4QHvADDiwO
DB4NDiAe4C5MDgAKAHKgGx4sHh0MDgBSLnALHlwOAHAdDguACx6MDQCwG6ALHrwOC9ALHowsAeAL
HmwOC-ADCx48DhvwBaUAvwvwCAseG-AKG-ARQwEd8gYanyvwAg4vLQ5dDvAADg0-LA5MDvBOAyBc
DqYBMVwO0DACMAwOXDMIIAwuGQAQsDcCIC81sAQEZQEQoBMAAD0BABQAAWgBEBwGBTAsDgAFAAQm
AHCQDg0_DzU_BAUAIwVBDjsAG2wAYKAODRwOQAUAEAwMAAGfAiANLGgAUjwOIA4NtgJgHD4LED4s
OQBQHA47IBvFAhBwHAABcQEBCgAkC1AGABBcTgCxXA5QDg0sPgswPjxRAGA8DjtAGw4MAkANTA6A
BQBBCzAePEYAcCweG0ALHixMAEEcHitw3gH-A1AODR4rsAseC1AeK-AAG2AbcG4JfTH9Aw4FAAFd
CRDNXQZ0YA4tTi1OLUgJBU4JEilNCR8JTQlGDyQNEB8yMQD--0ifHR0E-zf---88NQALHTE1AB84
NQAhXzsN-zwNBgA_D4YAHQc7AA8GADgPhgAMD6cBHQ0TBU8POw88BAAhFx8MAA84AP-------wcv
DzuJBh0HOwAPBAAZFx8MAA84AP-------wcvDzyJBhxxjzwPPQ87rwYAEU8GADL-PAAHABABBwAR
zxQAF38gABEfBgAXjwwAF_8GAAIwACRfPDQAES8GABUPNAATL2QAFgRXABcfKQAEgwAQBwcAF98T
ABGfBgARPwYAGL8lABdvJQAmXzxWADb-PBINACw-PCsAHR8YADb-PAgNABOfEwAWAiwAF38_AAN8
AAVdACc7TyMAEx8jABYWEwAXf7gACBIAF886AQIkARnfQwAWE5IACKsAD_QBGfEmIyAEcP82A_D_
BdD_BcD_B7D_B6D_CZD_CYD_C3D_C2D_DVD_DUD_DzD_DyD_ERD_EQD_NgAJABEgFQARQCEAEWAt
ABGAOQARoEUAEcBRAD-g-gOXFAweNY4AHzeOAHofOI4AevMzOwPg-zwF0P87BcD-PAew-zsHoP88
CZD-OwmA-zwLcP87C2D-PA1Q-zsNQP88DzD-Ow8g-zwREP87EQD-PBP-OxMADwATIB8AE0AvABNg
PwATgE8AE6BfABPAbwA-4P88rwAODoARDzEAewBCAQQ9AxOfSQMg4G4IADC_0C4HABCOBQDwAE7A
-gYPPbANDzv_AA0MLvIBoE4NDD4NDI4NDA76AfEFLg0M-gZgng0MXg0MLg0MPlAM-gsHAsE_DQzu
DQx_IA4NDM4vAPIAPhCeDQz_Ag0MDgAM-gQNBAAQAzYAEABFAEIMEP4AWgBRIAxuDQxvAAM3AkG_
DQx_XgARYG4AEHAcABCORAIBQACRHg2gXg0M7rAOJgAhnsA6AM-QXg0MzuCuDQxODXCvExzwE-AV
vzQPMdDfNC8xoN80TzGAXzRfMg8xDzAPNF8xYE80fzILAPAJLzJPMUBPNI8yDzFPMk8xMD80-zIB
PzEgCABBAz8xEAgAvx8xHzAQLzT-MgUvCAAZcS8yDzH-MgEMAHIfMQ8w-zICDAAyMA80DAAQHxgA
AAwAUD8wED8xcgAgMCAIAPEOAT8wME8xfzIPMV8yTzBATzFvMh8xPzJPMGBfMT-FAP8GLzJfMIBP
Md8woC8x3zDQDzG-MPAVCAccAyIBUJ80DzIvJgEADgAfDyoBEEIwDzQ-LAERnw0AIU8yMQFhvzIP
MF8yNAERrz8AED8eABMyPQFgDzIPMY8y_wAAvQABXgAkMi8ZABJ-EQBgNB8yDzAvCgASMSkBAfgA
An0AEC92AAEVABAyWgAAVgAAFwAgDzASAAIuACMyH28ARR80nzKCAVQvMB80vyIAAGcAQR80LzAR
ACEPNA8AEjHEAEUPMK8ynwEUXw8AAqIBoW8yDzBPMg8xPzKpATF-Mh-EACFPMrABACABEy8eABEw
rAESMP8AAbsBAEsBUh8wHzEfvwE-DzI-vwE2ACIBEHCiAGCgTzQvMUDFAeCAXzQvMTAvNE8xYG80
L5cBAHEAIVBP6wAQD_oBcDEQHzQ-Mj_-AQBLAQFFAVQxDzAAH8gBAssAEh8SAABPATAgLzS6AUEA
DzQf5ABBIC80fysBIDEf8gAAgQAANAAAhwGSMB8xTzBADzQ-xQHwUjIvMEBOYD8xLzI_8AMvMV5A
PzSAHQAfMU4wXRxQHQ8yDBAuQF1MMAwbDpA9G1wgDB4QLRwgPUs8YC0bHBAtaxweQC0rLAAdWwwb
LkAtOxwAHUsMKy4wLRsMGywADQwrDA4OAP8eCwwNKwwOACw7DAs_MB0cDTseADwrTlA8Ky4ALI5g
HF4gDI6AbjB_sC6ALvATZAEd8QU2TzTwAy4ADk8zDzIALsAOLzMPMg0AcA4vMw6wDj0FAvAHDzFN
oAw9DzIMQwwLPQxwHg0MDRuDG9IE8AZAHi0cMwUUBQQTHA4dGzAOPQsjFAUCAKIDCz0LMA4tCyMF
EAC1BAMtCwwwDCsMEwQSAFQrHEAsIw8AYxQDLFAuEwwAdwUUAy5ADi0PAGMOLTAOHQsRABAfEgBD
LQswLREAwgoPKhoUAx0bMAsdDBIAgjoDBAMrDEAsDgBHBRoTBF8ALwQTXwACCBAAGj0PACctC34A
C30AAAIAAHwAEyt7AAACAAF8AI--MAEscP81BEIfH-ARhC809QEuQA4PKg4PMvUBLg0wLg30AS4N
IC4N9QMuDRAZAIAN9AMODA4NEAUAMWROZAwAcC4NVF4NVC4JAPAAfisODY4NEK4LDA8MDwoJDADw
D50OCw8MHwoJrSAtUw4LKgkNUy0wHg1UHikODVQeDQsAE14JADFkTWQIACb0AwcAIv4IBABxDv0I
QP8wB9kAH0vZAGElLxDaAFQRDw8PDtsAUhEfDw8O3AAQLxcAA94AHyreAJwVFd4AEBaeKwTeAFMW
HxQPE94AABcAD94ApCMaHd0AVBsPGQ8Y3QBTGx8ZDxjdAAAXAATdABMd3AAvHk3cAJEUH9wAVCAP
Hg8d3ABTIB8eDx3cAAAXAA-cAKMUJNwAVCUPIw8i3ABTJR8jDyLcAAAXAA-cAF4L4AlWbzQPMT-k
CQAOCQL8BwHoCUAfNA8yGggAyQcCFQAB8gkAZAgkXzInCRM-zQgQMFgIAMcIMi8xLxcAETA8CBEf
KgBEPzAvNP8JARAKABsIAR0AHTEWChAfrQgPGAoCAXEAH28aCgEgHzSGAA0cCgHQCQEqAAQgChEf
XwAeHyAKADkKAs4ACSgKET-DCgMVAAYuCgGYAANXAA84CgAC0gA0LzFPPgoRTzoAAF4ANj8wH0YK
Mz8yLxcAAFcAADQAAU4KYh8yHzFfMG4AAXUBAFQKVy8wTzQPFQABWgoBkQkWMCgAA14KLz8wXAo7
DoQODzEA0PAIIxMEIA8W-xUMQA8W-xQOIA8WLxT-MAlOBhAQDABGDzBvJwQAABcAVgAPFj8VEwAA
BABwPxUPEw8WPy0AFigEACE-FBYAGxUWAB8VFgAIAEIAFikEAAFCAB8VFgACHxYWAAgIWAAGQgAM
FgAPLAAJCNwAAfMAHxUKAQE1EA8VLQGvIP8UDg8TQP4NIH4BGZMFBwQAJwAHIBcCAE8HACcAQAAL
HDhAAJEQByAXEAcABzACAC8QRz8AHAF-AEIHMAcgAgAPPwAlPxAXQL4AJBEwQACvAAcABxAHAEcg
B0IAHW9XMDdABzB9ACMgFxB9ABE3gQEPQAAgEkc3AQLCAB8gOgEhAncADn8AD0IAGxA3ggA-EBcQ
QAAZ-wIHCwQAPyoQXgAeHzoeDR4NAAUAA39eDQA_HRA9mwAMLDE0XADBEB8qMC4POhA_DSAN3gcF
AwB-EF4AXg0AXVEAHQetAEAAHQAeqAhBEC4dAAMAD1MANZ8eHSAuQB4NHhD4ACpgQB4POiAuTgBw
EC4NHgAeHU4AQV4NAC3-AC9AHVMAHcJfKgBeDzoeTU4QXhBEAAWhAC8ATaEAH_AvKiA_DzoALi0A
Hh0gTgEBHx3sASwCoQAA4AAF9wAFBgAQIPIAHyCaASgBmgA-AD4dqAAwDFYAcV4NAE4NEB23AABN
AV8uHSAtEFUAGvEBChAEEE8qMG4QjgAuLzouDRcLDwUAEK_ODQBuHRBOHTBNcAAMHDlvAP8DIC8q
UD4POjBODSBeDTAdLg1QAwABQCCOAI5lAB_NXgAcDs0AxwAtEC4NQD4NMD4dIAMAHzBhADEBXAAg
UC5cAHEwPg1ATlANDwAvLiAhASmBEC8qYC4POlC2AEFALh1ACQAhAC4qBAR_AQG8ABFNbgBfUC4N
YC1kABz1BI8qAI4POo4NLm0uDVBuIH4QjhBNAA__ACvxBSBPKjBeDzoQbg0ATj0APh0wLh1AYQAz
AC4tvgADwwAPYgAlBLwAJwA9HwEPCQAFP2AtMEICLgEFAH8Abh0Abg0AxwA3D2gABKGODQB_DRBu
DSAtxgBQME4NEF5hAG8gPh1APSBkABn_Bl4IBBD-OkogDv87Sg89AA7-O0wPPgYAMAAPPSEATD4g
-UrDALEtMjMuMzE5MDQ3NgYAA24Aki0wLjcxNDI4NQYAIjY4fgAKWQTQZhwE8Fj1UiAF9FIDEAUA
MA86AAcAHw4GAGt8EPNSHiD_UnoFUzI2Ljc13wAfM5caAQDPAO_-9FIgBPNSDzsQBPNSDgUAWw_0
ACHAEQ4EEA8WrxUwDxa-4AsCBwBSEA8W3xUEDTEUXw4yDBI6EwCDDzpPFV8OPxUSAAIaABcVJgAS
FRQAMAAPFUkAFB8JAK8POiC-Ex86ML4QOQwZXxEOBPADnwAREwASAASdABIAnAAWAJsAEgCaABIQ
jwASIAcAPzC_II8AHA8tAQNATxU-DmBAAZIAUR8OHxQfdAAAIwEzfxUfLwEACgAiTxUWAFlfFB8O
XzEBJg8VFAAPPQFND68ABBYArgAUAK0AFgCsAANCARYAqgAPTQEqwQQEBAAfOwAOHzoPPQUAPwAd
AEAACx8xBRAsoRcLBPABHzuATlBwAP8pUB5POi4gDh0PPUAOnQ4gHEAOvR4wPh1cbT4dPFAMrQxQ
HiAcfQxQDh0MMBw9HGAOHQxQPJAc8ABzABxSMB878ARxACFOcAgA8A4gLk86HmAfPSAOnzoOEC4w
Hr0OAA89HT5tXB0OAHkA8AIsEAx9HCAecBw9HDAOHQyAPIUAT-AEHEAkER4PMQD-DqEo4AEAAKoA
AAAE8DQPAQAE8QdN-zX-y183-zX-yg85XzcfNf8t-8cfCgClDy0PL-85-8QPLRAAETkSADbCDzUU
AG8fOfD-wR8RAP-----------5NI-zX-w8UJJv811QkG7wlg-zn-xw8vBQoQDwwAe8kPL-83-9Rx
ClUyMzAuNgEABBIRTzc2LjUULCQfNjEA-yHwXygoBP8-FgL_BQL_Lgb_HQJOAu4C-hQG-gYG-gcC
-g0C-gMC-gICBgKOBv4MAk4C-jAC-iICXgLeBv47Av4FBv4BAj4C-hECBgLeAo4CPgJOEgYPMgYS
-hMCBgL_FgL_FwL_NAL_EAL_KgL_Ywa_QgAQEBsAMAcC3jcAEf4mAAIrABADSgD-AD0GTgL_IwLu
Al4Cngb_JAQuGcIoKASvPwL_CgIOBu5WAGBuAj4G-gkTACE_AggAAOEAARoAEK4VAID_DAL_EgL_
N4YAoO4CBgJ_Br4C-gALAXoGAj4C7gLezADQngL_AQKeAn4GXgb_UK8AES6-AGAIAv4dBt5qABBH
QAAyDQJ_LwCBLgJOBi4C-h5FARAxggDgAAb_IAL_LgIuAn4G-g0mADEOBm6GAB8B6AAc4W8-Bv4x
Ao4GjgL_GQZ_vQEgVwaKADIIAl7hABDODAAQ3hoAMF4CjmsAFxPNABF_lACgFwKuAr4C-hMCvt0B
dFUG-gsC-hQ5AWD_BQJ_Am45ACAWArYAQQEC-gurADEMAk4dAoFbBv4hBj4CPhgA4QUC-hIG-g8C
-gsGbgKeDQAfINMAHCCPP1wAES6aABACxgBwRAJ_Bo4CzncCAZQAYf4IAs4CHk8CEARpACH_BNQB
QQYC-hwSAALNARAtVQFB-gIGrs8CQAIC-htPABC_6QAVBt0BEN5PAFIFAo4CLhUBEh6VAjGuAk5K
ABAXIQEwHQauBwFBHQL_A9oAUAUG-iUGRAAQIiQAIE4GTQI-DQKu5gAcYP8-CwL_b2AAMSIGnpMA
ExZkAUECBv4e0QARMCYCEBJzAZDuAv4zBv6DAo6uACL_ACoAQa4C-k4QAGAMAq4G-idXAjN_Ar5G
ABA0mAIASQDPLAL_DgL_UQL_HwaOpAAeE2yxAjABAp6PAxgWQAIQAfMDMQYCvqwAEAuOAEFCBv4O
TwMQAS8BQK4G-pGxACQMAnABIf4zNgRQDAL_OgYSABUWPwAQNq4AQb4C-lJjAk8tAv4uqwAeEBmJ
AQK3AUEiAv4GpQFQBQL_DwYIAVEdAm4CrvQDEDtnAFIRAj4CBoIEAMcAEDoUAAEiAhBubAQQLisA
EQLMABEtgAERDFYAERymAUEJAv4EIQMQBGQBEh5fAwJzAVAMBs4CjoUDMUQCXlAATw0C-hrIAB5C
Nwb_CTwDMRACvkEDEAbcAwFhA0EDBv5cdAMB9QEh-gU5BRABJwATFoQAAK0DBA0AEd6oABJG1gNA
BAL_MoEBBJEBEARYBQC8AAU7AEEfAv4mRwIQIMQAEAJTBE8rAv4ewQAZAGUn0DVu8AQeLxEPEA8R
HxB3TvAfHxFvDx8QHw3ADh8Rrw8PEA4PDaAODxHvDw4PDYAODxH-DwEODw1wDg8Rjw8eXalL8QI1
UA4PEX0eHD4tDg8NUA4MbYVQsSwOHQ4LDzUwDgw9iFAwLA4tVEsgDC3TTWM_PQ4LCiANAAIbAJQK
IA4PEC0ObC4OAEMMLQ6MKAAwCS0OkVAEDQAjTjwNAPAMMA4JbX49DgsaMA4J-QMOCwpQCwn9AQ4L
GlAL8Ur-EwsKcAsO7Q4LGoALHq0eCxqgGx5tHhsawAobbhsq8AAKayoTVSJwNI8T8AMOT3dXoBYf
FQ7wAQ4PFo_OVwC9VxCvCQBQwA4PFs8JAFCgDg8W7wkAIIAOmCVRAQ8VDmAuAPAOHn0PFQ5ADg8W
fR4cDi0eLQ8VDxIwDgxdHhwOHC4FTxALcU5mDD0eHA58EAE0HA6cDQAzHQ7cCwAmDxUMAAcXADMJ
Ld4wASD9BSsBEAvaSzILGkAaASQaYBoB-xIOzQ4LGqALDq0OCxrACw6NDgsa4AuOCxrwAYsa8AOK
8BYfAR1QGi8Y8AnOVbAbDxoO8AcODxsvGQoAUQUODxtPCgBRAw4PG28KAFABDg8bjwoAIOAOKCxg
Hg0ePQ8aPwEgGx3nTWIuHQ8aDqD6AAACAHMdCw6ADgw9DgCRLQsOYA4MPS4MDgBCPQsOQBwAAhAA
9ARNCw4gDgtNDhwObA5dDg8XEA4MDQAQCkhSQAtNDpwMAHAJEAoOPQ6ceVYgGSALAHCMDj0OChlA
CwARbAsA8AFgCg4tDmwOLQ4KGYAKDi1uCQCQoAoOrQ4KGcAKr1WxGeAKDm0OChnwAQpHADHwAwou
AN-wBQouChnwByoZ8AkprVAe4E3-HQGgDs8gDx8PIB8fQgKRIP8eAQ8fDxxgCwBVAw4PHFAKAMUP
NUAODyBPHi4tLk0PAEA9DiwuKgMCEABkDC0OrA4tDQBUHQ7MDh0NAFQNDuwODQ0ARQ78AR4YAFYs
DmwOLBwAdh0ODB5sHgw6AHYtDg0ObA4NWABfTQ5sDk0NAAEqDx8bABaOGQAs-QMLABBQCwAQAdxU
-wM1YA8c-gELHzWA_wEaoPoB8C_RAh-xBSLwCB4PJA8lDyQe8AQeHyUvIx8k7AQgJW8KAFCwHh8l
rwkAEXASAPEODm0fJB5ADh8ljQ6NDyQNDyEwDg8ljQ4MDo0ODyGXAwkNAF99DiwOfQ0AAlRdHkwe
XQ0AVD0ejB49DQBfHR7MHh0aAAIINAAvDyRcAAYoDySEAAoOAGANDo0OjR4MAPEGMB8hHm0ObR4b
HzVAChserR4bKnAKBQVxKrAKGx4tHgcF3xsuGyrwBAorKvAIKrDlDHsPMQAeD9MGIgPJBgDUBlNt
Hhw_HdUGggxtDhwePA4d1gYwLT4MtVNDLgwODdgGQi0OPB4SAAFoVQAcA0ZeDB48iwUlDF4fAAHe
BlUdDgxuLBAAACEAFI4uAFAJHQ4MfiwABQ8AJEw_DwBRMA4JHU4GBhQa8QYP6QaLQ38UHm3qBhFt
3wYRHe0GAN4GEB4QVCEdC_0GED0PABAeKlQQHZMFAuIGMR4MfhAAEgkhATUeDJ4PAEQNDgzeDQAY
Cw0AChoAAgMHAQsAAAMHQAoJMAr7BgHTBSL9AdAFEu3MBR-NygUAEI7IBV_KGfADifsGTxAP8gYT
Lf8GEA23BiEuDQAHANIAARwBQw0LDqAJAQACACEODQIHFS0QABEdBAdCLQ4sDhAAES0GBwEgAAMS
ABE9CAcQPQ4AQm4MDk0KBwYPAAIMByA9DmgBEk0OBxEtDQASPRAHQC0ODI6HAgE-AUItDgxuDQBB
YAoOHQ0AEh1KAVIdDmwOHU4BPx1uHRoHdA8OBw0gDC6OAwcSBzgMrgwUBzcMzgwWBzMM7gwXB0Yc
-gEMFwB2LgxuDC4MHjYAVw4cbhwOOgAAw1sAKwEHXAAQLX4BFR56ABE9IAAVPQUHChAAEgyUCAVG
By_OTS4HbkNPIw5NMAdRXQ4MDl0xB3EcfQ4MDn0LMQcQDAwAAONeAtkDBQ4AIQkgIAxCLgwObQ0A
EF0iBSIeXQ0Acj0eHE4cHj0NAGUdHhyOHB7iA18czhwODRoAAAg0ABkLTgABaAACdAAYC4EACQ0A
AHlfkQwOfR4KCTAaHswA8AEeGhlACRoeTQ5NHhopcAkaQGH-CimwCRoeLR4aKfAACRouGinwBAkq
KfAIKbD_BnsPMQAeAPEBFBgrByLwBCkHkPAAHxG-Dw8OwCMHMA8OoH05IRe_LQdQDxEeJ84KAHBg
DxEuF94fGwdwDxGeHw5_DTQHwDAPEY4dHD0_HQ8NMAdB8gANHA0sDS4dCw81EAxOPRwPAPIALQsQ
DD4NXA0cPT4tCwoADAACGQDCCgAPED4NbC0sDR49GwAwjD0uCgBACT4NfCMAAQwA8BpOPTwNLA0e
TQsKEAl_fS49CxoQCf4CTQsKMP4BTQsaMA3uXQsKUB2ubeYMMB1ejRcHEO0VBxGtEwcWbRMHH5As
AR8DDQex8AQfFm8UHxXwAB91JBHA-wYgE6DLOZAXvg8TDxKADxYsAWATDxJgDxYsAYATDxJQDxb_
BBMAACsB8AQWrh8Tfh0PEjAPFo4dHA0uHR4dGQCQEAx_HRwNHC0MGgbxCBIQDF4dHA18DR4tCw81
AAxODRwNnA0eKgFjFT4N3A0OKAEDCgAWCQoAMU7dDiIBL-4DIQFbEBv-BvALHxrwBB8bbxkfGvAA
Hxu-GQ8YwA8b7xkPF6DnDZAXvg8YDxeADxshAbAYDxdgDxsuFx4fGDsGYA8XUA8bXhNjoS1ODQ8X
DzUwDG4hY2gcDT4dDxcOAAFXAjJuLQwPAABXAgA4AAUPACEKABAAEmwMACIPGg0AIi49GQATnE0C
BgoAM24NjFUCEm4oABIaCgAAFABGMH5tHjoBLwsNOwFDA9EG8AnwBB8gbx4fH-AAHyC-Hg8cwA8g
7x4PHKBuOpAXvg8dDxyADyA7AWAdDxxgDyBcAqAdDxxQDyBeLx0uNgEQHF8CYCBeDSwtLDUBZRww
DE4NrIgDQg3MDR6EAzHsDQ4nAUAuDfwBAwGgDx8_DSwNbA0sTRYAc04NDB1sHQxPAnJeDQ4NbA0O
mQMgCX4iAQwsASaNHmMCHwspAUoQJZ8GQh8k8ASTBvAB8AAfJb8jDyHADyXvIw8hoLs68RcXvg8i
DyGADyUeJz4PIn4NDyFgDyUuF04Nfh0PIVAPJY4NDA1_DSUNQQyeDQwXAHIwDI4NLA1uKAEQngsA
ACgBUX4dTB1OKAFCXh2MHaYEVCQ_HcxdEwADEwFBHUwdPgoAADoAEU4dAQBPABFOHQEAYwAAFAAQ
MAkAET4iATKeDT4kAT9_DR4mARAPOQZ7DjEAD2oGSlFeHw5eHWwGAGAGEi5tBoEMjg0cHTwNHm4G
tE49DA0MHQwtDA0O6AIjPB0RAALuAlIMXQwdPDwFAw4AAx0AAnYGYwxtLC0MTR0AJY08UAUhDH0n
AAMOAGBMPQwtDF3cAVE_TXwNDtwBP459Dn0GlFOeHxN_DX4GBnQGlDAMbh0cHQwtHDsBEF4PADMd
LA07AWNODRwdDH0rAQA7ATMdDJ0OAGIPFS4NDN03AQUKABYJCgAyPg3cLQEv3Q6GBokRDnwGEw2K
BgGRaRAtbgYRUAUFAAsBID4N9A8hDF4PADAMHQxOBQsPABAKgAYjLA0QAAI5AQALAAURAANUBSMM
bQ4AJA8aDwAjHj0dABOdDAAYCQwAYl4NDI0MDc4HI14NMAAUGgwAAXwCAIYFEQ5VAT9ubQ6jBoEQ
DpsGEj6nBhJOmQYCqAYA9gAwLSwtQgEAqQZyPg0MrQwNHogCQz4NDM2EAmEuDQztDD1nAkEM-QEM
PwGzHy4NDC0MbQwtDD2ZAnMNHG0cDQxNQQEBHwEFwAYAaQEfHUUBCkBeDYxdmQUvXu27BmxTPg8i
bg29BkAuDQwNDQBAYAwuF_IAQW4dC1BbCwAXABILBgUSDBgAAXMLQS0MDV6MAhB_3wQAuQYB0AMi
TRy6BnIMPh0cjRwdvQN1JC4NHM0cPRcAEl0pAQAtAATUBgBEAALpBwFcAALNBgJyABA_NAECCwAQ
LnsCEAsMABIufQIQbngBD0ABEA_kBnsPMQAeAdMBD24UCZYvDw8QHw8PED92FBM-EwACFwADghQI
FQAABAARL-oGDxkAAAIEAAGSFBUPXgAABAAQHnJuAThnYDUwDg8RLMQEwB4bPgwNHA4PDTAOCxUL
cBwOCw4bDisrbAB5ZwAUACE_GxIAACcAQAoQDgsIACBbDjcAsSwOCgkADgssDQ5bIgAxHA0MEgAA
YgszDmsuMwAiCQA0ABWLMgCYDSwNDnsOKw4NMQAhTjtCAAAxABAQIgBBHA0Mfg8AIBkQIAAGAgAR
LK8TIw0sDwABEQBEGTAKDg8AphwNPA4KCVAKDiwPAACMEhU8DQAwgAoeDQDxACweChmgGh5sHhoZ
wAkabrkPX2op8ARpswMfIG8T4QEDewcB4QEBfQeQHxLADh8WLxRPVEBCFQ4PEgMVMA4PEgMVUB8U
zxUfDQARYPkbUAMODxJQqnNxFP8VAQ8UDoQHgA4PFp8UHo0ODRXhDxYNbxUeHxYOLxUeHA0gABEQ
PxVQGw4bLgv_EdUSEA4LDTweGw57DiwNtxNRGw6bDj1oAQCHARHbGwAAlQE-LQ7bGAABMQw93uUT
YQ4MDfwDDYABMQz9BXUBUgwN-AENbgEi-QNlATgdzB0vFUIeLUwtVwEfbVcBMRAYVwEDqAcBVwEB
qgfhHxfADh8bPxkPGh8ZDxo-FVUPF6AODxMAAAQAYz8ZDg8XgF8VHB8ZABFgTBwCEQAAJDzwAB8Z
DTwODxdQDg8bLA0MDlIBAK4CAV0OAhkDIQ4bAgACFgAQMPYCExwTAAGmAgQtAzENLgsVACMNHC8D
Ak8AEws9AATyAgASAwBTACJrDtECEgAxAAARAAI6ACIJADsAF5s1AAG4DikOmzMAVQ0Oiw4NNwMB
EQADVAASGUcDBlIAAjUDFW4xAwIRAxMcHgAWUBEAHywxAwAATQMfPDEDOBAd2gEDKggB2gEBLAiz
HxzADh8gLx4PHw8EAAAMAGkODxygDg8XAAYfADAODxzdFRcfFQAMBAAQHyUAH2BCAAQJSgAAEhYG
FQBhLg0PHw0uvgYBQxVAMA4PIK0JIQ4r3AQQDKsVMDAOCwAPIKsODwACBgJALQwOyzsWAP4BADsA
EOu5AQGxAXMLDQwO_wEODgABWABYKw5rDishAIINDA4LHmseCx8ABCgAMAwNDtkBNg0ODRcAES0L
ABFrEwASLbIDFx0TAACYAw4TAAHGAwACABOOSgAACgIBSgAFAgATLdoDJwwNAgAD5gMYLSYAAfAD
Ag0AD-QDOBAiGgIDAwkGUxZAHyHADmcWMw8kDwQAAAwAUA4PIaAOFwlQDg8hgA4ZCQYgAGIPIw4N
DyS8ADEPIWCgHQD-HGJQDg8lDQwCADMOCw4KABENGR1hMA4LjQ4LJwAC2QEDpAEFBAEB4QFUjQ4r
Do3fAQACACAeSxJRBZoBZQtNHoseTbwBPx7LHhoABA88AAATDF0ABc4BCoAAANIBAqIABsoBC8gA
AdIBAOsACMYBB0IAB6wFD7wBDA9JCXsPMQAeD3oJWXMeDQ8QHQwddQkQLbsBQx4bPi1sCRELEQBA
DhseO_oZIg8NXAKUPgsOCx4LLgsOWAIAJAAiOx4UACUMHUAEUQteCx47UQQCtgciC14jAAUzAmMd
DA4Lbis1ACMJADYAFY40AFAMLQ4LfjIAFx0yACJLPkQAEh1sAkctTnsONAQwHQwdzQsCZgIAvgAC
AgASLV4CJB0MAgASPWYCFi0PAABgAhU9DQAwgAoeDQAPZAIlHzhrCU1HfxUebWwJIX8UYAkzFB4s
cgmBDE0eGx4LLhuJcgFxCSALTBIAMB4rDml4AXIJIAwtmnMQfl8BA3QJAMpzQwueCw6nBwCOARLe
HwAAngERHA4ADxwAAmENLA7bDjySAWENDB3eLQyQASIN-H8JEA3XDgKCARP8fwkyHM0ccwES7G0B
LyxN1golHzh-CUgBxB5DHQ8aPXoJoh0PGh0OHxsOHC4UAAA7ISMPGs8eIwstdwk2DB0L1R4BFgAA
USEnCw3pHgM6AwEqAATfHiEdCzsDIAwtTHsE4h4zCx0L_wIANQAC2R4iDQsfAwEcAAITAAE8ACIJ
AD0AF543ABELNwAZnjUAER33HgIzABMQEQAEVwAQGQgIAFcABVUAITAKEQATbCAAgjAKDj0LDW4L
HQAQUA4AER0CABMtQwMBDwADQwMQLQsAD0MDJQ99CXsEVAkTLW4JFw1QCQRmCQEJBSALLtIEB2UJ
Mg4LruIEAYYDZC0OC84LDmUJMA4L7gIHA6sBZA4L-gELDvABhwwOCy4LbgsuIQAAXwBQDhtuGw5h
AAUoAAAqAEMOC24LTQcFZQlSHgtuCx4NBQOVBwEmAAaRBwsTAASZByMOi0gAIRkwOQkSjkQAD1sJ
VB84WwkzAOsmA10JEh1OCVgODyUODFcJMX0OC3QmEVBaARIMXgEkCw4MABEK0wERfRQAMn0OCt8B
A5cBBEkAAUEDEG3WBiMebdMBABsJVRtOGx4NjAGCCy0eG44bHi2ZAQBXDT-OGw4cAAQOPgAVDF8A
BMYBAoMAASIABMoBBaYABMQBDc0AAMwBE30kAAXKAQR-CQPKAT9tDm3CATIPMAlcDzEAHg9JJw4C
HAkGBAADZQkIlBIFrRIfgBkAAgD0eQN3JwQRAA06AAHcIg8fAAQDQAAAChMXDxUAD0QAAB8wIwAK
A0gAHzClAAQHSAAfIIwACBUvIwAfEGsADgJKAA9tAA8HEwAPbQApLzAOIwAMER8jAB8PkAALNFAP
DRAADyAAAADghT8NDg_sAAdEcA8NDhMACRsAaB81gA8NHhcAAFwG-w4NHzWgHw0ebw8eHw0fNcAN
Hw1uHC3wAA1sLfAEbcsoPDAPFI8thwvPKF4PFM8VD7wvA8MTA78vMv8UBbsvAhkAEwNwChIgGwAF
DAAPHAAIHxUcABgUFRwARjAPEg5MFJEfNUAPEg7-FAEMABFgHAAAvAABDwBSgA8SDs8LABGgGgAU
jxoAUsAPEg6PCwDv4A8Sjg0fNfABjRzwA4z5KDsENgoC-SgTDw4AAhIAEwEqAAUSABfgMQAFFQAb
wDgABAQAKw6gPwAEBAAuDoBHAAYdAB9gTwAEBAQALw5AVwAEBAQAAGJ_SB8ZDRwCABAOWCkAYRQX
HAIAEQzuCgPdEwYCAAJ8FDEQDxcAFAgvAFoLHzUgCxYAArQxFww9AABXGSgODDYAJxqAEQACzzEV
DC0AFMANABEM2zEjDgwlADHwAQvyFGELGvADCw4IAN8FCy4LGvAHKxrwCSqwlik7BDMKDwQACw2n
Ew8tAAwBBikPLwD-8wcTAA9eAG8HEwAPLwAOALwrJ-8evSsAEQdf-QEcoPzrMk4IFwwGHwwD-TIx
-yMDEgAtITB8FQ8EAAMhHyNnFXUgDg8l-yMFDAAPOwDMHyQ7ADMfJDsAG0UjDv0D4jMSLbwNAo8M
8QAfIR81QAsfIR6tHhorcAubDEArsAsaviz-ASvwAAsaLhor8AQLKivwCCu_LA0PpAz-azIPDy54
FiMMDZ0MAXoWIg4rohUBNAAA7jIBFQAQS-YOEy0UACEMDSEAJEsOPQABKQARLRkWJw4NPQAhDB0N
AACDGAw_ABAMyBEGQAAAsRMHAgATDTQMAywAAwIABCYMJgwdAgBiDgofNVAKdgABAgAAxg8ycAoO
DQAUHQ8RAg0AHx1NDwUP8AuERn8VLn2dC4YWfxQOLxYOfxEAhw8UXQ5PFg5dJAAgbxQSABRvEQAe
DSMADEcAdA0PFH0ufQwOABb8AQwBMhYyCx81240CFgoTzQ4KE8wGCiKNDAIKH4zXO0oP4wuOLy4f
4AsFZA8ZDi8bDhsACt4LIQ5PASAJ3QsBRAMP3AsAIQ5LWQsM2wskDisuAFMKHzUgChYAEi5WAAFU
NQISAAebHwYRABEMHQMGEQACYDUVDC0AFMANABIMajUTDCUAAG41ANoLAnA1HyxwNUwG0AgP2gvc
Mi4ND4QUFQwjABMMEAAC8xYGGgASCw8AAYAFDxcALQ9eAAYBtAUPGQADBwIAAxsALg0MAgAPNgAq
Lw0MGwAER1AODfzfCp8KHzWA_gEZoPnfCuJFjyMujQ0AA3UXZQ0OLyUODXcXAhwAU20OSw5tDgAE
VRcpSw4lAB8LJAAAAXEECUsASwyNLo0kAAcCAAUmABT90wAA3wcPJQAEGQ12CgMdAAB1CjAaHzUz
Nx_tMTfTDzNF-yEfNdofCh_v1h8AAs4UFXAKAAEzAQE5RQPgHwNaPgIOCQg6RQRcPiUOfEdFCDpF
Dy9FBQ06RQMhAQ8pAV0PmB8JFq_QHxTvhB8QT4AfgW0ODxdwDg8bG0UhLj2FCBJQ8UQAAgADiB8G
DwACZgITTTtFEU1mAgc7RQEHAQERABNsDQAoDxoOABIMMUUBLQEHCwBSTQ6MDk06AQLrQyYLGgsA
AEABIE1uFAAPQQFMDwEfCSWvHvUeFO-hHgJ9EVBwDg8gPzA_Amk9GVAwPhRQPEUCOAEzLQ7MmgNR
HQ7sDh39ACAMDYULEQ0MADMPHx04RQMcABMtNkUULTMBASwgIg49DwARXZVGDzcBCCA9jrEDDzcB
TA9AHgkfrzQeAhF9Gh4RcK0GEwyJBhJQ7D0CMx5jDG0OLA5tNQECvkQkCzDjRCULCvtEAAsAIg8k
FEULFwAWCS0AEwlCAAAoAQNZAAAoAQJvAAEoAQKHABALKgEAnAABKwEAsB0PLQEND2MGew8xAB4A
wAEgGi6dDVEQDxEPEJ0NAcsQ8wUO8AFODxFPDw8QTqAOTxFvD08QDpAGRQ8QDnAKADMPNWCcBgUN
AAEIRQMOACEMXRgEMSwODREAAA0DA58GACIAFUCgBgNpQgKfBjA9Cw9ydBE9ngYQPSkgAbAuJYw_
ZUICnwYBZUIRHZ8GAmVCMAtdfgkAMFAOC61DLwlgCAAE8QBwCk5tTgoZgEoOTQ5KGeBXQj9Z8AHn
DCkwGi8TRQEQFVGjAUUBERZvJgBFAVAWTxQPFUUBSBZvFE8iEBVwCgABOAEJDAADB0UCDQARXa8G
Mg0PFUIBE02vBhEdWBAErwYDQgEArQYgPQuAJkUMLQ7cPgEDDAAAPgECrQYCPAET3jgBL-0BNwFl
DxkQAyIBTvVEADcBQhtvGU_zD3X-GQEPGg5wuQYiDxohAQS7BgMQAAF9BgACAB8tEQADF1D5SwHS
Dw-6SwUfC-pLIBQL_kskUA4LAABBAQC_BgZKAQ9SAUoQHVIBUR8PIA8fUgEBYCUBUgFQIE8eDx9S
AUcgbx5Piw8lDnAKAAAuAQTMBgUPABEtzAYTLRAAggwdDqwOHQ8fSQEBCkwgDx9FAQHQBgE-ARAd
zwZBHQsPHIUCAs4GEy1AARM9zwYDjQIGzwYBSAECuQYPSAEIAM8GD0gBVBAiSAEBLw4BSAEBEw4B
SAFQJU8jDyRIAVAlbyNPJEgBkiV-Iw59DyQOcNoGIg8kOgEC3AYDDgAZDA0AUV0OLA5dDQAE6wZD
DyQOQOAGAoQCcB6MHk0LDyFEATQezB5AAQEXAAI8AQLfBgE4AQLUBgE4AQFaAAI4AQFyAAInAQcL
AADfBgcJAA88ARAPswZ7DzEAHg94DSJDvw8_DXkNEq3FTgF6DTUMrQ7WS1OdDkwOHaIIAAwAET2i
CFFNHh0OTH4JESBZBEMeTA5dbw1SPQ58Dm0ZADFNDlxmCAHDCTI8Do0LAFI9HkwOjaYINh0OPKgI
ER2CADIcDm2sCABaTyAdHhwAb1ALDh0uvdkJRQ_tUi9DfxRuPf4WUn0OXA5NABdADG0OXBUBAWAN
MV0OXNgACRUBEAwLCBONdA0HFwAGLQATCUQAAt0JMlwOTahSP31uPalSixSvshYWz6IWI44tlBYx
LQ6MpAYTYLhJAZFLARoNAZcGNF0OjI9SAgsAApMGAwwAABMEAkYNC0sFIQ5NkQIBIRZSTQ4sDk0b
FlJNDgwOTRcWP00OTXdLdAIKAAIRFYU-Hh4dLh0ePREAAONNNiweHHZLDhEACKZSApUHAw0AAg8B
Dw0AGwlBAAhbACoPH2kALK49VksHCwAPYUteBcUUAHAND49S-9Qyrw9OtwZirw8OPxEeuAaCnw8O
DxEuDR66BmANnw8ODT5jTgC9BlANjA4NTg0AAb8GQQ1MHhwQABMsu6QgHR4OABE8XwVwDSwODR4d
TuSpAscGciwODX4NDlwdAEA8Dg1ewwkADQAwCTweYgASfA0AQiwOHU4NAEAwDgkMfAARLjYAEhoP
ABAuEUgCRwAwUAsJEAAhHh0fABBQpKsA2gMSbNgGMgwurNoGEqzaBh9s2gZoQ28Ubi3bBhBt11cC
gg0Qba5TAXYNETDxDhFeWQUhDzXTBgAOABFdL04Aq08SXocJAtgRIV4MggkBuA0HGgAINAAVC08A
IQkgxgkhXgwLCzEwCg6BAALhBT9tbi2cUnoO7gZDHxmOHfAGUR0OjA4d8QYUDCozAohSJAyOhFIR
PQwAEz2MDQAMAAN8UgQNAASMDQMOAAJKDAE0AAL9BgQFUQEeAUI9DgxODQARYA0AEi4NABGADQAS
Dg0AEqANABI9MgE-PQ49CQdtD-0GDwCvNDAcLhzaNA8TAAsImVIEk1MEugYDKAEPDwAhC0sACmkA
LQ8feQAIPwcPMgcAD4hS-5kPMQD-------_RUG09Nn19
:: gfx/1.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA5LTEzIDEzOjUxOjM5Iixtb2RpZmllZD0iMjAyNC0w
OS0xMyAxMzo1MzoxOCIscmV2aXNpb249OV1dbHo0AG0AAAAFMQAA8xR7WzBdPXtibXA9cHh1AEMg
EBAE8PAsZmxhZ3M9MCxwYW5feAgAz3k9MCx6b29tPTh9LDEA----------------------------
------------------------------------51BtPTh9fQ==
:: gfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTAzLTMwIDA1OjM5OjM0Iixtb2RpZmllZD0iMjAyNS0w
NS0xMyAxNjozMjoxMiIsc3RvcmVkPSIyMDI0LTAzLTMwIDA1OjM5OjM0Il1d
:: map/
:: map/0.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTAzLTMwIDA1OjM5OjM0Iixtb2RpZmllZD0iMjAyNC0w
OS0wMSAwNzozNDozNSIscmV2aXNpb249MzA3NV1dbHo0AMEAAABZEAAA8Ah7e2JtcD11c2VyZGF0
YSgiaTE2IiwzMgMALyIwAQD-------_x0zIwMDAzMDAwNDAwMDYMAC81MIAAWxMxCAATNYAALzYw
AQBbFzb8ABMxDAAPAQBVBHwBAAABEzAMAA_AAVkTMXQAEzB4ABcxjAAPAAFVEzaEAAQMAC81MAEA
--------nvEJIiksaGlkZGVuPWZhbHNlLHBhbl94PTQ3CQDSeT0wLHRpbGVfaD0yOQoAEHcKAIB6
b29tPTF9fQ==
:: map/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTAzLTMwIDA1OjM5OjM0Iixtb2RpZmllZD0iMjAyNS0w
NS0xMyAxNjozMjoxMiIsc3RvcmVkPSIyMDI0LTAzLTMwIDA1OjM5OjM0Il1d
:: pal/
:: pal/0.pal
b64$LS1bW3BvZCxiZ19jb2xvcj0wLGJsYWNrZXN0X2NvbG9yPTAsY3JlYXRlZD0iMjAyNC0wOC0y
MyAxODo1OTowOSIsaGlkZGVuPXtbMF09ZmFsc2UsZmFsc2UsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0
cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLGZhbHNlLGZhbHNlLGZhbHNlLHRydWUs
dHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRy
dWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVl
LHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0
cnVlLHRydWUsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsdHJ1ZSx0cnVlLHRydWUsdHJ1
ZSx0cnVlLGZhbHNlfSxoaWRkZW5fdG9nZ2xlcz17WzBdPWZhbHNlLHRydWUsdHJ1ZSxmYWxzZX0s
aHVlX29mZnNldD0tMC40NzY0MjM1MTQ5Mjc2NyxpY29uPXVzZXJkYXRhKCJ1OCIsMTYsMTYsIjAw
MDEwMTAxMDEwMTAxMDEwMTAxMDEwMDAwMDAwMDAwMDAwMTA3MDcwNzA3MDcwNzA3MDcwNjAxMDAw
MDAwMDAwMDAxMDcwNzA3MDcwNzA3MDcwNzA2MDYwMTAwMDAwMDAwMDEwNzA3MDcwNzA3MDcwNzA3
MDYwNjA2MDEwMDAwMDAwMTA3MDcwNzA3MDcwNzA3MDcwNjA2MDYwNjAxMDAwMDAxMDcwNzA3MDcw
NzA3MDcwNzA3MDcwNzA3MDEwMDAwMDEwNzA3MDcwNzA3MDcwNzA3MDcwNzA3MDcwMTAwMDAwMTA3
MDcwNjA2MDEwMTBkMGQwMTAxMDcwNzAxMDAwMDAxMDcwNzA2MDYwMTAxMGQwZDAxMDEwNzA3MDEw
MDAwMDEwNzA3MDEwMTA3MDcwNjA2MGQwZDA3MDcwMTAwMDAwMTA3MDcwMTAxMDcwNzA2MDYwZDBk
MDcwNzAxMDAwMDAxMDcwNzBkMGQwMTAxMGQwZDA2MDYwNzA3MDEwMDAwMDEwNzA3MGQwZDAxMDEw
ZDBkMDYwNjA3MDcwMTAwMDAwMTA3MDcwNzA3MDcwNzA3MDcwNzA3MDcwNzAxMDAwMDAxMDcwNzA3
MDcwNzA3MDcwNzA3MDcwNzA3MDEwMDAwMDEwMTAxMDEwMTAxMDEwMTAxMDEwMTAxMDEwMTAwIiks
bG9ja2VkPXtbMF09ZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFs
c2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2Us
ZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFs
c2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2Us
ZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFs
c2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2Us
ZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2V9LGxv
d2NvbF9pY29uPXRydWUsbW9kaWZpZWQ9IjIwMjUtMDUtMTMgMTY6MzI6MTIiLG9rcGFsX3ZlcnNp
b249IjEuMi4yIixwaWNrZXJzX21vZGU9ImxpbmVhcl9odWUiLHJldmlzaW9uPTU2MjksdGVzdF9j
dWJlX2NvbG9ycz17WzBdPXsxNSwzMSw0fSx7MzEsNCwyMH0sezQsMjAsMjF9LHsxMCw5LDI1fSx7
OSwyNSwyNH0sezgsMjQsMn0sezI2LDExLDI3fSx7MTEsMjcsM30sezI3LDMsMTl9LHsyOCwxNywx
OX0sezI4LDEyLDE2fSx7MTIsMTYsMX0sezYsMjksMTN9LHsyOSwxMywxOH0sezEzLDE4LDF9LHs3
LDIzLDE0fSx7MjMsMTQsMTN9LHsxNCwzMCwxOH0sezcsNiwyMn0sezYsMjIsNX0sezIyLDUsMjF9
LHsxLDEsMX0sezEsMSwxfSx7MSwxLDF9fSx0ZXN0X21vZGU9ImN1YmVzIix0ZXN0X3JhbXBfY29s
b3JzPXVzZXJkYXRhKCJ1OCIsMTAsMjcsIjAwMTgwODE5MDkwYTFhMGIxYjAwMDYwMDAwMDAwMDAw
MDAwMDAzMDAxNjAwMDAwMDAwMDAwMDAwMTMwMDA1MDAwMDAwMDAwMDAwMDAwMTAwMGQwMDAwMDAw
MDAwMDAwMDEwMDAxZDAwMDAwMDAwMDAwMDAwMTEwMDE3MDAwMDAwMDAwMDAwMDAwYzAwMGUwMDAw
MDAwMDAwMDAwMDFjMDAxZTEyMDIxNTE0MDQxZjBmMDcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAx
NDA0MWYwZjA4MTgwMjAwMDAxNTA1MTYwNjA3MTcwZTFlMDAwMDAxMTAxMTBjMWMxZDBkMTIwMDAw
MTMwMzFiMGIxYTBhMDkxOTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAw
MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAw
MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAw
MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAw
MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCIpLHdo
aXRlc3RfY29sb3I9N11dbHo0APUBAAAVAgAA-QV1c2VyZGF0YSgiaTMyIiw2NCwiMAEA8A00YzM2
NWEwMDgyM2YzODAwOTg0NzNmMDA5ZjUxCACRNjQ0ODc3MDBmAQDwODAwNzQxZjY1MDBhODI1OTIw
MGUyNDliYTAwZWY4M2M1MDBmOGJiZDkwMDc3MmMxNjAwYTIzMjE5MDBkNTRmMjEwMGYzODI1UADw
JGNiYzljMDA2NzQ5MTMwMDljNzExYTAwZDZhMjI1MDBlZGM0NTQwMGZiZTE5OTAwMmQ1MxgA8BYz
MTZlMzIwMDUwYTMyYzAwODdkNDU2MDBiZmYyOTUwMDE2NTg1CADwDTc3OTdkMDAyMGI0YjMwMDVj
ZDhkMjAwYWNmNmb4ALA3MjI4NjAwNWUyNiAA0DhkM2JlZDAwYWU4MWawAJA4YzRmYzAwNTMCAEAw
MGIyAgBAMDBlMwIAQDAwZjQCAADIAAACAEAwMDFkAgBAMDAyZQIAQDAwNDYCAEAwMDliAgBAMDBj
MQIA4DAwNGY0YjNlMDA3MzZh4ADwFzllOGY3NDAwYWE5ZDg1MDBiZWI1YTQwMDVhNWU2ODAwNjg2
YjcweAEgNzfQAKA4MTg0OGEwMGE2AgDxBzAwM2YyNzJhMDA1YjM3MzQwMDY2NDBgALAwNDk0NDAw
ODY1YxABgDYzOGRkMiIp
:: pal/default_00.pal
b64$LS1bW3BvZCxiZ19jb2xvcj0wLGJsYWNrZXN0X2NvbG9yPTAsY3JlYXRlZD0iMjAyNC0wOC0y
MyAxODo1OTowOSIsaGlkZGVuPXtbMF09ZmFsc2UsZmFsc2UsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0
cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNl
LGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZh
bHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNl
LGZhbHNlLGZhbHNlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVl
LHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0
cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsZmFsc2V9LGhpZGRlbl90b2dnbGVzPXtbMF09ZmFsc2Us
ZmFsc2UsZmFsc2UsZmFsc2V9LGh1ZV9vZmZzZXQ9LTAuNDg3NTM0NjI2MDM4NzgsaWNvbj11c2Vy
ZGF0YSgidTgiLDE2LDE2LCIwMDAxMDEwMTAxMDEwMTAxMDEwMTAxMDAwMDAwMDAwMDAwMDEwNzA3
MDcwNzA3MDcwNzA3MDYwMTAwMDAwMDAwMDAwMTA3MDcwNzA3MDcwNzA3MDcwNjA2MDEwMDAwMDAw
MDAxMDcwNzA3MDcwNzA3MDcwNzA2MDYwNjAxMDAwMDAwMDEwNzA3MDcwNzA3MDcwNzA3MDYwNjA2
MDYwMTAwMDAwMTA3MDcwNzA3MDcwNzA3MDcwNzA3MDcwNzAxMDAwMDAxMDcwNzA3MDcwNzA3MDcw
NzA3MDcwNzA3MDEwMDAwMDEwNzA3MDYwNjAxMDEwZDBkMDEwMTA3MDcwMTAwMDAwMTA3MDcwNjA2
MDEwMTBkMGQwMTAxMDcwNzAxMDAwMDAxMDcwNzAxMDEwNzA3MDYwNjBkMGQwNzA3MDEwMDAwMDEw
NzA3MDEwMTA3MDcwNjA2MGQwZDA3MDcwMTAwMDAwMTA3MDcwZDBkMDEwMTBkMGQwNjA2MDcwNzAx
MDAwMDAxMDcwNzBkMGQwMTAxMGQwZDA2MDYwNzA3MDEwMDAwMDEwNzA3MDcwNzA3MDcwNzA3MDcw
NzA3MDcwMTAwMDAwMTA3MDcwNzA3MDcwNzA3MDcwNzA3MDcwNzAxMDAwMDAxMDEwMTAxMDEwMTAx
MDEwMTAxMDEwMTAxMDEwMCIpLGxvY2tlZD17WzBdPWZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZh
bHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNl
LGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZh
bHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNl
LGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZh
bHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNl
LGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZh
bHNlLGZhbHNlLGZhbHNlfSxsb3djb2xfaWNvbj10cnVlLG1vZGlmaWVkPSIyMDI1LTA1LTA1IDIw
OjAxOjQ5Iixva3BhbF92ZXJzaW9uPSIxLjIuMiIscGlja2Vyc19tb2RlPSJsaW5lYXJfaHVlIixy
ZXZpc2lvbj00Njc4LHRlc3RfY3ViZV9jb2xvcnM9e1swXT17MTUsMzEsNH0sezMxLDQsMjB9LHs0
LDIwLDIxfSx7MTAsOSwyNX0sezksMjUsMjR9LHs4LDI0LDJ9LHsyNiwxMSwyN30sezExLDI3LDN9
LHsyNywzLDE5fSx7MjgsMTcsMTl9LHsyOCwxMiwxNn0sezEyLDE2LDF9LHs2LDI5LDEzfSx7Mjks
MTMsMTh9LHsxMywxOCwxfSx7NywyMywxNH0sezIzLDE0LDEzfSx7MTQsMzAsMTh9LHs3LDYsMjJ9
LHs2LDIyLDV9LHsyMiw1LDIxfSx7MSwxLDF9LHsxLDEsMX0sezEsMSwxfX0sdGVzdF9tb2RlPSJj
dWJlcyIsdGVzdF9yYW1wX2NvbG9ycz11c2VyZGF0YSgidTgiLDEwLDI3LCIwMDE4MDgxOTA5MGEx
YTBiMWIwMDA2MDAwMDAwMDAwMDAwMDAwMzAwMTYwMDAwMDAwMDAwMDAwMDEzMDAwNTAwMDAwMDAw
MDAwMDAwMDEwMDBkMDAwMDAwMDAwMDAwMDAxMDAwMWQwMDAwMDAwMDAwMDAwMDExMDAxNzAwMDAw
MDAwMDAwMDAwMGMwMDBlMDAwMDAwMDAwMDAwMDAxYzAwMWUxMjAyMTUxNDA0MWYwZjA3MDAwMDAw
MDAwMDAwMDAwMDAwMDAwMDAwMTQwNDFmMGYwODE4MDIwMDAwMTUwNTE2MDYwNzE3MGUxZTAwMDAw
MTEwMTEwYzFjMWQwZDEyMDAwMDEzMDMxYjBiMWEwYTA5MTkwMDAwMDAwMDAwMDAwMDAwMDAwMDAw
MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAw
MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAw
MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAw
MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAw
MDAwMDAwMDAwMDAwMDAiKSx3aGl0ZXN0X2NvbG9yPTddXWx6NADxAQAAFQIAAP0FdXNlcmRhdGEo
ImkzMiIsNjQsIjABAPANNGMzNjVhMDA4MjNmMzgwMDk4NDczZjAwOWY1MQgAkTY0NDg3NzAwZgEA
8DgwMDc0MWY2NTAwYTgyNTkyMDBlMjQ5YmEwMGVmODNjNTAwZjhiYmQ5MDA3NzJjMTYwMGEyMzIx
OTAwZDU0ZjIxMDBmMzgyNVAA8CRjYmM5YzAwNjc0OTEzMDA5YzcxMWEwMGQ2YTIyNTAwZWRjNDU0
MDBmYmUxOTkwMDJkNTMYAPAWMzE2ZTMyMDA1MGEzMmMwMDg3ZDQ1NjAwYmZmMjk1MDAxNjU4NQgA
8A03Nzk3ZDAwMjBiNGIzMDA1Y2Q4ZDIwMGFjZjZm_ACwNzIyODYwMDVlMjYgANA4ZDNiZWQwMGFl
ODFmsACQOGM0ZmMwMDUzAgBAMDBiMgIAQDAwZTMCAEAwMGY0AgAAyAAAAgBAMDAxZAIAQDAwMmUC
AEAwMDQ2AgBAMDA5YgIAQDAwYzECAOAwMDRmNGIzZTAwNzM2YeAA8BM5ZThmNzQwMGFhOWQ4NTAw
YmViNWE0MDA1ODU5NWQwMDY4AgBRMDA2Zja5ABE3AQBQMDA4NjivAfEGMDNmMjcyYTAwNWIzNzM0
MDA2NjQwYABQMDQ5NDQoACA1YxABgDdmYTZjZSIp
:: pal/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA4LTIzIDE4OjU0OjE5Iixtb2RpZmllZD0iMjAyNS0w
NS0xMyAxNjozMjoxMiJdXQ==
:: sfx/
:: sfx/0.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTAzLTMwIDA1OjM5OjM1Iixtb2RpZmllZD0iMjAyNS0w
NS0xMyAxNjozMjoxMiIscmV2aXNpb249NTQ4Nl1dbHo0ABoBAABSCAAA8CdweHUAAygAAAQABA9A
EAIOAAGgASACoA4ADxAADfDKAQIDBAUGBwAP-5AICQoLDwwPDQ8ODw8QAPAADQ8RDxIPEw8UDxUP
Fg8XEwDxAQ8YDxkPGg8bDxwPHQ8eDx8UAPEAIA8hDyIPIw8kDyUPJg8nFADxACgPKQ8qDysPLA8t
Dy4PLxQA8QAwDzEPMg8zDzQPNQ82DzcUAP8FOA85DzoPOw88Dz0PPg8-AA--8P8BAOv-J1oBEAYP
IBABIAEgAfAAAhACDBABIA8hIAEwD0Dwww8oD--wxg-4Cg--D4AP9w8NAfAJARAGDDAAAh9EMAAc
H0AwAPIf-wEA3L-4D0AADUD--7DwcAoA--9kH-8BAP_ZUP----8g
:: sfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTAzLTMwIDA1OjM5OjM0Iixtb2RpZmllZD0iMjAyNS0w
NS0xMyAxNjozMjoxMiIsc3RvcmVkPSIyMDI0LTAzLTMwIDA1OjM5OjM0Il1d
:: src/
:: src/logic/
:: src/logic/combat.lua
--[[pod_format="raw",created="2024-08-30 06:37:36",modified="2025-05-13 16:32:12",revision=1970]]
--- Combat Logic


function logic_new_fighter(kind)
	local self = {
		health = 30,
		max_health = 30,
		armor = 0,
		max_armor = 3,
		defense = 0,
		max_defense = 20,
		dodge = 0,
		max_dodge = 6,
		special = 0,
		max_special = 12,
		attack = 0,
	}
	
	function self:start_new_turn()
		self.defense = 0
		self.attack = 0
		self.points = {}
		for g in all(gem_colours) do self.points[g] = 0 end
	end
	
	function self:count_points(game, gems, matches)
		for match in all(matches) do
			local count = #(match.positions)
			if match.colour == gem_rainbow then
				-- TODO: keep? delete? what about supercharge?
				foreach(
					gem_colours,
					function(g) self.points[g] += count end
				)
			else
				for p in all(match.positions) do
					local supercharge = (gems:get(p) & gem_supercharge ~= 0) and 1 or 0
					self.points[match.colour] += 1 + supercharge
				end
			end
			game.in_cascade = true -- TODO: keep? delete?
		end
	end
	
	function self:apply_points()
		--self.health = max(0, self.health - [gem_attack])
		local armor_points = 2 * self.points[gem_armor] // 3
		self.armor = min(self.max_armor, self.armor + armor_points)
		self.defense = min(self.max_defense, self.points[gem_defense])
		self.dodge = min(self.max_dodge, self.dodge + self.points[gem_dodge])
		self.special = min(self.max_special, self.special + self.points[gem_special])
		self.attack = self.points[gem_attack]		
	end
	
	return self
end



:: src/logic/creation.lua
--[[pod_format="raw",created="2024-08-30 06:25:09",modified="2025-05-13 16:32:12",revision=3142]]
--- Board Creation Logic


local sc_target <const> = 3


function logic_new_test_cells(tiling, for_editor)
	local grid
	local size
	if tiling == "square" then
		grid = sgrid_new()
		for x = 0, 15 do
			for y = 0, 4 do
				grid:set(pos(x, y), cell_good)
			end
		end
	elseif tiling == "hex" then
		grid = hgrid_new()
--		for i = 0, 3 do
--			for y = i, 12 - i, 2 do
--				grid:set(pos(6 + i, y), cell_good)
--				grid:set(pos(6 - i, y), cell_good)
--			end
--		end
		for x = 0, 16 do
			for y = 0, 8 do
				if y % 2 == x % 2 then
					grid:set(pos(x, y), cell_good)
				end
			end
		end
	end
	return grid
end


------------------------------------------------------------------------


local bag_of_gems = {}
local rejected_gems = {}
local supercharge_counters = {}
for g in all(gem_colours) do supercharge_counters[g] = math.random(2, 10) end


local function random_gem(sc_counts)
	while #bag_of_gems == 0 do
		bag_of_gems = rejected_gems
		rejected_gems = {}
		for g in all(gem_colours) do
			supercharge_counters[g] += 1
			if math.floor((supercharge_counters[g]) % (10.0 / 1.0)) == 0 then
				g |= gem_supercharge
			end
			add(rejected_gems, g)
		end
	end
	local idx = math.random(1, #bag_of_gems)
	local gem = deli(bag_of_gems, idx)
	local colour = gem
--	local colour = gem & gem_colour_mask
--	if sc_counts and (sc_counts[colour] < sc_target) then
--		gem |= gem_supercharge
--		sc_counts[colour] += 1
--	end
	return gem
end


function logic_fill_gem_at(cells, gems, marks, p, sc_counts)
	local cell = cells:get(p) or 0
	if (cell & cell_mask == 0) or (cell & rock_mask != 0) then
		return
	end
	local test = (gems:tiling() == "square") and logic_test_sqr_match_at or logic_test_hex_match_at
	local gem = gems:get(p)
	if not gem then
		local attempts = 0
		local found = false
		while attempts < 16 and not found do
			if gem then
				add(rejected_gems, gem)
			end
			gem = random_gem(sc_counts)
			gems:set(p, gem)
			found = not test(gems, p)
			attempts += 1
		end
		if attempts == 16 then
			gem = gem_gift
			gems:set(p, gem)
		end
		marks:set(p, { name = "new" })
	end
end


local function count_supercharged_gems(gems)
	local counts = {}
	for c in all(gem_colours) do counts[c] = 0 end
	gems:foreachpos(
		function(_, gem)
			local colour = gem & gem_colour_mask
			local supercharge = (gem & gem_supercharge ~= 0)
			if supercharge then
				counts[colour] += 1
			end
		end
	)
	return counts
end


function logic_fill_gems(cells, gems, marks)
	-- TODO: fill in reverse gravity order
	local counts = count_supercharged_gems(gems)
	cells:foreachpos(
		function(p, _)
			logic_fill_gem_at(cells, gems, marks, p, counts)
		end
	)
end


------------------------------------------------------------------------


local function supercharge_gems(gems)
	local counts = count_supercharged_gems(gems)
	for colour in all(gem_colours) do
		while counts[colour] < sc_target do
			local possibilities = {}
			gems:foreachpos(
				function(p, gem)
					local gem_col = gem & gem_colour_mask
					local gem_sc = (gem & gem_supercharge ~= 0)
					if gem_col == colour and not gem_sc then
						add(possibilities, p)
					end
				end
			)
			if #possibilities > 0 then
				local choice = math.random(1, #possibilities)
				local p = possibilities[choice]
				gems:set(p, colour | gem_supercharge)
			end
			counts[colour] += 1
		end
	end
end


function logic_fill_all_gems(cells, gems, marks)
	local counts = {}
	for c in all(gem_colours) do counts[c] = sc_target end
	cells:foreachpos(
		function(p, _)
			logic_fill_gem_at(cells, gems, marks, p, counts)
		end
	)
--	supercharge_gems(gems)
end

:: src/logic/matching.lua
--[[pod_format="raw",created="2024-08-24 08:12:55",modified="2025-05-13 16:32:12",revision=4438]]
--- Matching Logic

-- The matching algorithm has two phases:
--
-- 1. First, a linear sweep through all the gems, and for each gem involved in a match
--    creates a mark registering which direction(s) matched.
-- 2. Then a flood-fill algorithm is used to group matches together.


local function logic_is_matching(gem1, gem2)
	if (not gem1) or (not gem2) then
		return false
	end
	
	gem1 &= gem_colour_mask
	gem2 &= gem_colour_mask
	
	-- Only colored gems can match.
	if (gem1 < gem_attack) or (gem1 > gem_rainbow) then
		return false
	end
	if (gem2 < gem_attack) or (gem2 > gem_rainbow) then
		return false
	end

	return (gem1 == gem2) or (gem1 == gem_rainbow)
		or (gem2 == gem_rainbow)
end


--------------------------------------------------------------------------


local function test_3(gems, p0, p1, p2)
	local gem0 = gems:get(p0)
	local gem1 = gems:get(p1)
	local gem2 = gems:get(p2)
	return logic_is_matching(gem0, gem1)
		and logic_is_matching(gem0, gem2)
		and logic_is_matching(gem1, gem2)
end


local function test_4(gems, p0, p1, p2, p3)
	local gem0 = gems:get(p0)
	local gem1 = gems:get(p1)
	local gem2 = gems:get(p2)
	local gem3 = gems:get(p3)
	return logic_is_matching(gem0, gem1)
		and logic_is_matching(gem0, gem2)
		and logic_is_matching(gem0, gem3)
		and logic_is_matching(gem1, gem2)
		and logic_is_matching(gem1, gem3)
		and logic_is_matching(gem2, gem3)
end


function logic_test_sqr_match_at(gems, p)
	local S = p + pos(0, 1)
	local SS = p + pos(0, 2)
	local N = p + pos(0, -1)
	local NN = p + pos(0, -2)
	local E = p + pos(1, 0)
	local EE = p + pos(2, 0)
	local W = p + pos(-1, 0)
	local WW = p + pos(-2, 0)
	local SE = p + pos(1, 1)
	local SW = p + pos(-1, 1)
	local NE = p + pos(1, -1)
	local NW = p + pos(-1, -1)
	return test_3(gems, SS, S, p) or test_3(gems, S, p, N) or test_3(gems, p, N, NN)
		or test_3(gems, EE, E, p) or test_3(gems, E, p, W) or test_3(gems, p, W, WW)
		or test_4(gems, p, S, SE, E) or test_4(gems, p, S, SW, W) 
		or test_4(gems, p, N, NE, E) or test_4(gems, p, N, NW, W)
end


function logic_test_hex_match_at(gems, p)
	local S = p + pos(0, 2)
	local S_S = p + pos(0, 4)
	local N = p + pos(0, -2)
	local N_N = p + pos(0, -4)
	local SE = p + pos(1, 1)
	local SE_SE = p + pos(2, 2)
	local SW = p + pos(-1, 1)
	local SW_SW = p + pos(-2, 2)
	local NE = p + pos(1, -1)
	local NE_NE = p + pos(2, -2)
	local NW = p + pos(-1, -1)
	local NW_NW = p + pos(-2, -2)
	local E = p + pos(2, 0)
	local W = p + pos(-2, 0)
	return test_3(gems, S_S, S, p) or test_3(gems, S, p, N) or test_3(gems, p, N, N_N)
		or test_3(gems, SE_SE, SE, p) or test_3(gems, SE, p, NW) or test_3(gems, p, NW, NW_NW)
		or test_3(gems, NE_NE, NE, p) or test_3(gems, NE, p, SW) or test_3(gems, p, SW, SW_SW)
		or test_4(gems, p, SE, S, SW) or test_4(gems, p, NE, N, NW)
		or test_4(gems, p, NE, E, SE) or test_4(gems, p, NW, W, SW)
end


local function check_3_and_mark(gems, p0, p1, p2, mark, marks)
	if test_3(gems, p0, p1, p2) then
		marks:merge(p0, mark)
		marks:merge(p1, mark)
		marks:merge(p2, mark)
	end
end


local function check_4_and_mark(gems, p0, p1, p2, p3, mark, marks)
	if test_4(gems, p0, p1, p2, p3) then
		marks:merge(p0, mark)
		marks:merge(p1, mark)
		marks:merge(p2, mark)
		marks:merge(p3, mark)
	end
end


local function mark_sgrid_matches_at(gems, p0, marks)
	check_3_and_mark( gems,
		p0,
		p0 + pos(0, 1),
		p0 + pos(0, 2),
		{ name = "matching", vertical = true }, marks )
	check_3_and_mark( gems,
		p0,
		p0 + pos(1, 0),
		p0 + pos(2, 0),
		{ name = "matching", horizontal= true }, marks )
	check_4_and_mark( gems,
		p0,
		p0 + pos(1, 0),
		p0 + pos(0, 1),
		p0 + pos(1, 1),
		{ name = "matching", vertical = true, horizontal = true }, marks )
end


local function mark_hgrid_matches_at(gems, p0, marks)
	check_3_and_mark( gems,
		p0,
		p0 + pos(0, 2),
		p0 + pos(0, 4),
		{ name = "matching", vertical = true }, marks )
	check_3_and_mark( gems,
		p0,
		p0 + pos(1, 1),
		p0 + pos(2, 2),
		{ name = "matching", horizontal_SE = true }, marks )
	check_3_and_mark( gems,
		p0,
		p0 + pos(1, -1),
		p0 + pos(2, -2),
		{ name = "matching", horizontal_NE = true }, marks )
	local p1 = p0 + pos(1, 1)
	local p2 = p0 + pos(1, -1)
	local p3 = p0 + pos(2, 0)
	if test_4(gems, p0, p1, p2, p3) then
		marks:merge(p0, { name = "matching", vertical = true, horizontal_NE = true, horizontal_SE = true})
		marks:merge(p1, { name = "matching", vertical = true, horizontal_SE = true })
		marks:merge(p2, { name = "matching", vertical = true, horizontal_NE = true })
		marks:merge(p3, { name = "matching", vertical = true, horizontal_NE = true, horizontal_SE = true})
	end
end


local function mark_all_matches(gems)
	local marks = gems:new_grid()
	if gems:tiling() == "square" then
		gems:foreachpos(
			function(p, _gem)
				mark_sgrid_matches_at(gems, p, marks)
			end
		)
	elseif gems:tiling() == "hex" then
		gems:foreachpos(
			function(p, _gem)
				mark_hgrid_matches_at(gems, p, marks)
			end
		)
	end
	return marks
end


---------------------------------------------------------------------------


local function group_this_match(cells, gems, marks, p)
	-- A simple flood-fill algorithm to group all
	-- intersecting linear matches together.
	local colour = gem_rainbow
	local positions = {}
	local one_good_cell = false
	local remaining = { p }
	local rainbows = {}
	while #remaining > 0 do
		local current = deli(remaining)
		local gem = gems:get(current) & gem_colour_mask
		local mark = marks:get(current)
		if mark and mark.name == "matching"
			and (not mark.counted)
			and logic_is_matching(colour, gem)
		then
			if gem == gem_rainbow then
				-- Rainbow gems can be part of multiple matches,
				-- so they need to be unflagged at the end.
				add(rainbows, current)
			else
				colour = gem
			end
			add(positions, current)
			marks:merge(current, { counted = true })
			local cell = cells:get(current)
			if cell and cell & cell_mask == cell_good then
				one_good_cell = true
			end
			local neighbours = gems:neighbours(current)
			foreach(
				neighbours,
				function(n)
					local s = marks:get(n.position)
					if not s then
						return
					end
					if s and s.name == "matching"
						and (not s.counted)
						and s[n.direction]
					then
						add(remaining, n.position)
					end
				end
			)
		end
	end
	foreach(
		rainbows,
		function(p)
			marks:merge(p, { counted = false })
		end
	)
	return { colour = colour, positions = positions, one_good_cell = one_good_cell }
end


function logic_find_matches(cells, gems)
	local marks = mark_all_matches(gems)
	local matches = {}
	marks:foreachpos(
		function(p, mark)
			if mark and mark.name == "matching"
				and (not mark.counted)
			then
				local match = group_this_match(cells, gems, marks, p)
				if match.colour == gem_rainbow then
					-- Ignore, as this is probably a stray rainbow that was unflagged
					-- at the end of `count_this_match`.
					-- TODO: an edge case is when there is a legitime match of
					-- only rainbow gems (e.g. 3 rainbows surrounded by black things).
				else
					add(matches, match)
				end
			end
		end
	)
	return matches, marks
end
:: src/logic/mechanics.lua
--[[pod_format="raw",created="2024-08-30 06:41:59",modified="2025-05-13 16:32:12",revision=3091]]
--- Core Mechanics Logic


------------------------------------------------------------------------


function logic_mark_gravity(cells, gems, marks, gravity)
	local some_gems_are_falling = false
	gems:foreachpos(
		function(p, gem)
			local below = p + gravity
			local distance = 0
			local cell_below = cells:get(below) or cell_none
			while (cell_below & cell_mask != cell_none)
				and (cell_below & rock_mask == 0)
			do
				if (not gems:get(below)) then
					some_gems_are_falling = true
					distance += 1
				end
				below += gravity
				cell_below = cells:get(below) or cell_none
			end
			if distance > 0 then
				marks:set(p, { name = "falling", target = p + distance * gravity })
			end
		end
	)
	return some_gems_are_falling
end


function logic_enact_gravity(gems, marks)
	local fell_gems = {}
	marks:foreachpos(
		function(p, mark)
			if mark.name == "falling" then
				local new_p = mark.target
				add(fell_gems, { gem = gems:get(p), pos = new_p })
				gems:del(p)
				marks:del(p)
			end
		end
	)
	foreach(fell_gems,
		function(fell_gem)
			gems:set(fell_gem.pos, fell_gem.gem)
			marks:del(fell_gem.pos)
		end
	)
end


------------------------------------------------------------------------


function logic_mark_swap(gems, marks, source, target)
	local gem0 = gems:get(source)
	local gem1 = gems:get(target)
	local test = (gems:tiling() == "square") and logic_test_sqr_match_at or logic_test_hex_match_at
	gems:set(source, gem1)
	gems:set(target, gem0)
	local matched = test(gems, target) or test(gems, source)
	gems:set(source, gem0)
	gems:set(target, gem1)
	if not matched then
		return false
	end
	marks:set(source, {
		name = "swapping",
		selected = true,
		target = target,
	})
	marks:set(target, {
		name = "swapping",
		target = source,
	})
	return true
end


function logic_enact_swap(gems, marks)
	local reinsert = {}
	marks:foreachpos(
		function(p, mark)
			if mark.name == "swapping" then
				add(reinsert, { gem = gems:get(p), position = mark.target })
				gems:del(p)
				marks:del(p)
			end
		end
	)
	foreach(
		reinsert,
		function(r) gems:set(r.position, r.gem) end
	)
end


-------------------------------------------------------------------------


function logic_enact_clear(gems, marks)
	marks:foreachpos(
		function(p, mark)
			if mark.name == "matching" then
				gems:del(p)
				marks:del(p)
			end
		end
	)
end

-------------------------------------------------------------------------


function logic_mark_repair(cells, marks, matches)
	local is_something_repaired = false
	foreach(
		matches,
		function(match)
			if match.one_good_cell then
				foreach(
					match.positions,
					function(position)
						local cell = cells:get(position) or 0
						if cell & cell_mask == cell_bad then
							marks:set(position, { name = "repaired" })
							is_something_repaired = true
						end
					end
				)
			end
		end
	)
	return is_something_repaired
end


function logic_enact_repair(cells, marks)
	local to_be_unmarked = {}
	marks:foreachpos(
		function(position, mark)
			if mark.name == "repaired" then
				local cell = cells:get(position)
				cell = (cell & ~cell_mask) | cell_good
				cells:set(position, cell)
				add(to_be_unmarked, position)
			end
		end
	)
	foreach(to_be_unmarked, function(p) marks:del(p) end)
end


----------------------------------------------------------------------


function logic_mark_breakage(cells, gems, marks, matches)
	local something_broke = false
	foreach(
		matches,
		function(match)
			foreach(
				match.positions,
				function(position)
					local neighbours = cells:neighbours(position)
					foreach(
						neighbours,
						function(n)
							local cell = (cells:get(n.position) or 0) & rock_mask
							if cell >= rock_full and cell <= rock_broken then
								marks:set(n.position, { name = "broken" })
								something_broke = true
							end
							local gem = gems:get(n.position) or 0
							if #match.positions > 3 then
								if gem == gem_cat or gem == gem_bat
									or gem == gem_robot_asleep
									or gem == gem_bomb
								then
									marks:set(n.position, { name = "broken" })
									something_broke = true
								elseif gem == gem_robot then
									gems:set(n.position, gem_robot_asleep2)
								end
							elseif gem == gem_bomb then
								marks:set(n.position, { name = "broken", exploded = true })
								something_broke = true
							end
						end
					)
				end
			)
		end
	)
	return something_broke
end


function logic_enact_breakage(cells, gems, marks)
	local to_be_unmarked = {}
	marks:foreachpos(
		function(position, mark)
			if mark.name == "broken" then
				local cell = cells:get(position) or 0
				if cell & rock_mask == rock_full then
					cells:set(position, (cell & cell_mask) | rock_cracked)
				elseif cell & rock_mask == rock_cracked then
					cells:set(position, (cell & cell_mask) | rock_broken)
				elseif cell & rock_mask == rock_broken then
					cells:set(position, (cell & cell_mask))
				end
				local gem = gems:get(position) or 0
				if gem == gem_cat or gem == gem_bat
					or gem == gem_robot_asleep
					or gem == gem_bomb
				then
					gems:del(position)
				end
				if gem == gem_bomb and mark.exploded then
					local neighbours = cells:blast_radius(position)
					foreach(
						neighbours,
						function(p)
							local cell = cells:get(p)
							if cell then
								cells:set(p, cell_bad | (cell & rock_mask))
							end
						end
					)
				end
				add(to_be_unmarked, position)
			end
		end
	)
	foreach(to_be_unmarked, function(p) marks:del(p) end)
end


-----------------------------------------------------------------------


function logic_mark_move(cells, gems, marks)
	local something_moved = false
	local movers = {}
	gems:foreachpos(
		function(position, gem)
			if gem == gem_cat or gem == gem_bat or gem == gem_robot then
				add(movers, position)
			elseif gem == gem_robot_asleep2 then
				gems:set(position, gem_robot_asleep)
			elseif gem == gem_robot_asleep then
				gems:set(position, gem_robot)
			end
		end
	)
	foreach(
		movers,
		function(position)
			local neighbours = cells:neighbours(position)
			local possibilities = {}
			foreach(
				neighbours,
				function(neighbour)
					local cell = cells:get(neighbour.position) or 0
					local gem = gems:get(neighbour.position) or 0
					if (cell & rock_mask == 0)
						and (cell & cell_mask != 0)
						and (gem <= gem_special)
					then
						add(possibilities, neighbour.position)
					end
				end
			)
			if #possibilities > 0 then
				something_moved = true
				local target = possibilities[math.random(1, #possibilities)]
				local moving_gem = gems:get(position)
				gems:del(position)
				local target_gem = gems:get(target)
				gems:set(target, moving_gem)
				local source_gem
				logic_fill_gem_at(cells, gems, marks, position)
				source_gem = gems:get(position)
				marks:set(target, {
					name = "moving",
					source = position,
					target = target,
					moving_gem = moving_gem,
					target_gem = target_gem,
					source_gem = source_gem,
				})
				if moving_gem == gem_bat or moving_gem == gem_robot then
					local cell = cells:get(target)
					cell = cell_bad | (cell & rock_mask)
					cells:set(target, cell)
				end
			end
		end
	)
	return something_moved
end


function logic_enact_move(cells, gems, marks)
	marks:foreachpos(
		function(position, mark)
			if mark.name == "moving" then
				if mark.moving_gem == gem_robot then
				end
			end
		end
	)
	marks:foreachpos(function(p, _) marks:del(p) end)
end
:: src/logic/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA4LTMwIDA2OjI0OjM5Iixtb2RpZmllZD0iMjAyNS0w
NS0xMyAxNjozMjoxMiJdXQ==
:: src/constants.lua
--[[pod_format="raw",created="2024-08-24 15:17:10",modified="2025-05-13 16:32:12",revision=4595]]
--- Match3 Global Constants


-- Gems and cells ------------------------------------------------------

-- Color gems
gem_attack = 0x01
gem_dodge = 0x02
gem_defense = 0x03
gem_armor = 0x04
gem_special = 0x05
gem_rainbow = 0x07

gem_colours = { gem_attack, gem_dodge, gem_defense, gem_armor, gem_special }

gem_supercharge = 0x80
gem_colour_mask = 0x7f

-- Black gems
gem_gift = 0x08
gem_bomb = 0x09
gem_cat = 0x0a
gem_bat = 0x0b
gem_robot = 0x0c
gem_robot_asleep = 0x0d
gem_robot_asleep2 = 0x0e

gem_names = {
	[gem_attack] = "Attack",
	[gem_dodge] = "Dodge",
	[gem_defense] = "Defend",
	[gem_armor] = "Armor",
	[gem_special] = "Special",
}


-- Cells
cell_mask = 0x03
cell_none = 0x00
cell_good = 0x01
cell_bad = 0x02

-- Rocks
rock_full = 0x10
rock_cracked = 0x20
rock_broken = 0x30
cell_door = 0x40
cell_chest_air = 0x50
cell_chest_fire = 0x60
cell_chest_day = 0x70
cell_chest_earth = 0x80
cell_chest_water = 0x90
cell_chest_night = 0xa0

rock_mask = 0xf0

:: src/gfx.lua
--[[pod_format="raw",created="2024-08-24 12:06:13",modified="2025-05-13 16:32:12",revision=6438]]
--- Graphics


local cell_width = 29
local cell_height = 29


function gfx_draw_cells(cells)
	local function draw_cell(p, cell)
		local x, y = cells:coords_cell(p)
		local sprite
		if cells:tiling() == "square" then
			if cell & cell_mask == cell_good then
				sprite = 32
				sprite += (p.x + p.y) % 2
			elseif cell & cell_mask == cell_bad then
				sprite = 34
				sprite += p.y % 2
			end
		elseif cells:tiling() == "hex" then
			if cell & cell_mask == cell_good then
				sprite = 40
				sprite += (p.y + (p.x * 3)) % 3
			elseif cell & cell_mask == cell_bad then
				sprite = 43
			end
		end
		spr(sprite, x, y)
		x, y = cells:coords_gem(p)
		if cell and cell & cell_mask == cell_bad then
			pal(53, 58)
		end
		if cell & rock_mask == 0 then
		elseif cell & rock_mask == rock_full then
			spr(48, x, y)
		elseif cell & rock_mask == rock_cracked then
			spr(49, x, y)
		elseif cell & rock_mask == rock_broken then
			spr(50, x, y)
		elseif cell & rock_mask == cell_door then
			spr(51, x, y)
		elseif cell & rock_mask == cell_chest_air then
			spr(52, x, y)
		elseif cell & rock_mask == cell_chest_fire then
			spr(53, x, y)
		elseif cell & rock_mask == cell_chest_day then
			spr(54, x, y)
		elseif cell & rock_mask == cell_chest_earth then
			spr(55, x, y)
		elseif cell & rock_mask == cell_chest_water then
			spr(56, x, y)
		elseif cell & rock_mask == cell_chest_night then
			spr(57, x, y)
		end	
		pal(53, 53)
	end
	cells:foreachpos(draw_cell)
	-- TODO: move border construction out of the hot loop
	local function draw_borders(p, cell)
		local x, y = cells:coords_cell(p)
		if cells:tiling() == "square" then
			local cell_S = cells:get(p + pos(0, 1))
			local cell_W = cells:get(p + pos(-1, 0))
			local cell_E = cells:get(p + pos(1, 0))
			local cell_N = cells:get(p + pos(0, -1))
			if cell & cell_good != 0 then
				if not cell_S or cell_S & cell_good == 0 then
					line(x, y + 28, x + 28, y + 28, 53)
				end
				if not cell_E or cell_E & cell_good == 0 then
					line(x + 28, y, x + 28, y + 28, 53)
				end
				if not cell_N or cell_N & cell_good == 0 then
					line(x, y, x + 28, y, 57)
				end
				if not cell_W or cell_W & cell_good == 0 then
					line(x, y, x, y + 28, 57)
				end
			elseif cell & cell_bad != 0 then
				if cell_N and cell_N & cell_good != 0 then
					line(x, y, x + 28, y, 58)
				end
				if cell_W and cell_W & cell_good != 0 then
					line(x, y, x, y + 28, 58)
				end
			end
		end
	end
--	cells:foreachpos(draw_borders)
end


-----------------------------------------------------------------------


local sprites_color_gem = {
	[gem_attack] = 1,
	[gem_dodge] = 2,
	[gem_defense] = 3,
	[gem_armor] = 4,
	[gem_special] = 5,
}


local sprites_other_gem = {
	[gem_gift] = 8,
	[gem_bomb] = 9,
	[gem_cat] = 10,
	[gem_bat] = 11,
	[gem_robot] = 12,
	[gem_robot_asleep] = 13,
	[gem_robot_asleep2] = 13,
}

--color_gem_skin = math.random(0, 14)
color_gem_skin = 0
local function gem_sprite(gem)
	local base = 128 + color_gem_skin * 16
	local colour = gem & gem_colour_mask
	if colour >= gem_attack and colour <= gem_special then
		local supercharge = ((gem & gem_supercharge) ~= 0) and 8 or 0
		return sprites_color_gem[colour] - 1 + base + supercharge
	else
		return sprites_other_gem[gem]
	end
end


local function scaled_gem(sprite, x, y, size)
	local fullsize <const> = 29
	local w, h = flr(fullsize * size + 0.5) // 2 * 2 + 1, flr(fullsize * size + 0.5) // 2 * 2 + 1
	local x, y = x + ((fullsize - w) / 2), y + ((fullsize - h) / 2)
	sspr(sprite, 0, 0, fullsize, fullsize, x, y, w, h)
end


local function draw_exploded_gem(gem, x, y, clock, new_clock)
	local size = 16 * new_clock
	local size2 = (16 + clock * 16) * new_clock + 8
	
	local colour = 15 + (gem - 1) * 5
	if clock < 0.25 then
		colour = 7
	elseif clock < 0.50 then
		colour += 2
	elseif clock < 0.75 then
		colour += 1
	end

	ovalfill(x + 3 - size, y + 3 - size, x + 26 + size, y + 26 + size, colour)
	oval(x + 3 - size2, y + 3 - size2, x + 26 + size2, y + 26 + size2, colour)
end


function gfx_draw_gems(cells, gems, states, clock)
	local function draw_gem(p, gem)
		local x, y = gems:coords_gem(p)
		local sprite = gem_sprite(gem)
		local cell = cells:get(p)
		if cell and cell & cell_mask == cell_bad then
			pal(53, 58)
		end
		local state = states:get(p)
		if not state or state.name == "broken" then
			spr(sprite, x, y)
		elseif state.name == "new" then
			scaled_gem(sprite, x, y, clock)
		elseif state.name == "matching" then
		elseif state.name == "falling" or state.name == "swapping"
		then
			local dest_x, dest_y = gems:coords_gem(state.target)
			local ix, iy = x + clock * (dest_x - x), y + clock * (dest_y - y)
			spr(sprite, ix, iy)
		elseif state.name == "moving" then
			x, y = gems:coords_gem(state.source, gem)
			local dest_x, dest_y = gems:coords_gem(state.target)
			scaled_gem(gem_sprite(state.target_gem), dest_x, dest_y, 1.0)
		end
		pal(53, 53)	
	end
	gems:foreachpos(draw_gem)
	local new_clock = clock * clock * clock * clock
	gems:foreachpos(
		function(p, gem)
			local x, y = gems:coords_gem(p)
			local sprite = gem_sprite(gem)
			local cell = cells:get(p)
			if cell and cell & cell_mask == cell_bad then
				pal(53, 58)
			end
			local state = states:get(p)
			if state and state.name == "matching" then
				draw_exploded_gem(gem, x, y, clock, new_clock)
			elseif state and state.name == "moving" then
				x, y = gems:coords_gem(state.source, gem)
				local dest_x, dest_y = gems:coords_gem(state.target)
				local ix, iy = x + clock * (dest_x - x), y + clock * (dest_y - y)
				spr(gem_sprite(state.moving_gem), ix, iy)
			end
		end
	)
end


-----------------------------------------------------------------------


function gfx_draw_turns(ox, oy, turn, anim_turn)
	spr(64, ox, oy)
	local hundreds = (turn // 100) % 10
	local tens = (turn // 10) % 10
	local ones = turn % 10
	local anim = anim_turn // 2
	pal(7, 1)
	clip(ox + 7, oy + 3, ox + 7 + 3 * 8, oy + 3 + 8)
	-- hundreds
	if anim == 0 or (turn % 100) > 0 then
		spr(65 + hundreds, ox + 7, oy + 6)
	else
		spr(65 + hundreds, ox + 7, oy + 6 + anim)
		spr(65 + ((hundreds - 1) % 10), ox + 7, oy + 6 + anim - 10)
	end
	-- tens
	if anim == 0 or ones > 0 then
		spr(65 + tens, ox + 7 + 8, oy + 6)
	else
		spr(65 + tens, ox + 7 + 8, oy + 6 + anim)
		spr(65 + ((tens - 1) % 10), ox + 7 + 8, oy + 6 + anim - 10)
	end
	-- ones
	spr(65 + ones, ox + 7 + 2 * 8, oy + 6 + anim)
	spr(65 + ((ones - 1) % 10), ox + 7 + 2 * 8, oy + 6 + anim - 10)
	clip()
	pal(7, 7)
end


function gfx_draw_mana(ox, oy, mana, zoomed)
	local base_char
	local char_width
	if zoomed then
		base_char = 85
		char_width = 11
		oy -= 3
	else
		base_char = 75
		char_width = 8
	end
	local thousands = (mana // 1000) % 10
	local hundreds = (mana // 100) % 10
	local tens = (mana // 10) % 10
	local ones = mana % 10
	local digits = 4
	if mana < 10 then
		digits = 1
	elseif mana < 100 then
		digits = 2
	elseif mana < 1000 then
		digits = 3
	else
		digits = 4
	end
	ox -= (digits * char_width) // 2
	if mana >= 1000 then
		spr(base_char + thousands, ox, oy)
		ox += char_width
	end
	if mana >= 100 then
		spr(base_char + hundreds, ox, oy)
		ox += char_width
	end
	if mana >= 10 then
		spr(base_char + tens, ox, oy)
		ox += char_width
	end
	spr(base_char + ones, ox, oy)
end


function gfx_draw_mana_bar(ox, oy, mana)
	spr(95, ox, oy)
	if mana == 0 then
		return
	end
	local size = min(91, flr(0.5 + 91*(mana / 250)))
	rectfill(ox+1, oy+2, ox+1+size, oy+5, 40)
	line(ox+1+size, oy+2, ox+1+size, oy+5, 39)
	line(ox+1, oy+2, ox+1, oy+5, 41)
	if size > 1 then
		line(ox+2, oy+1, ox+1+size-1, oy+1, 41)
		line(ox+2, oy+6, ox+1+size-1, oy+6, 39)
	end
end
:: src/hgrid.lua
--[[pod_format="raw",created="2024-08-25 08:16:09",modified="2025-05-13 16:32:12",revision=4153]]
--- Hex Grids

--- Hex grids use the "double height" coordinate system:
---
---     (0,0)         (2,0)         (4,0)
---            (1,1)         (3,1)
---     (0,2)         (2,2)         (4,2)
---            (1,3)         (3,3)
---     (0,4)         (2,4)         (4,4)
---
--- The origin of the grid, `pos(0, 0)`, is at the top left.


-- Local Constants --------------------------------------------------------


local max_width <const> = 17
local max_height <const> = 8


-- Constructors -----------------------------------------------------------


local metatable = {}


function hgrid_new()
	local grid = {}
	metatable.default_origin(grid)
	setmetatable(grid, { __index = metatable })
	for i = 0, max_width * max_height do
		grid[i] = false
	end
	return grid
end


function metatable:new_grid()
	return hgrid_new()
end


function metatable:clone()
	local grid = self:new_grid()
	grid.origin = self.origin
	self:foreachpos(function(p, item) grid:set(p, item) end)
	return grid
end


-- Indexing ------------------------------------------------------------


function metatable:tiling()
	return "hex"
end


function metatable:get(p)
	if p.x < 0 or p.y < 0 or p.x >= max_width or p.y >= 2 * max_height - (p.x % 2) then
		return false
	end
	return self[p.x + ((p.y // 2) * max_width)]
end


function metatable:set(p, value)
	if p.x < 0 or p.y < 0 or p.x >= max_width or p.y >= 2 * max_height - (p.x % 2) then
		return false
	end
	self[p.x + ((p.y // 2) * max_width)] = value
end


function metatable:merge(p, state)
	if p.x < 0 or p.y < 0 or p.x >= max_width or p.y >= 2 * max_height - (p.x % 2) then
		return false
	end
	local index = p.x + ((p.y // 2) * max_width)
	if not self[index] then
		self[index] = {}
	end
	for k, v in pairs(state) do
		self[index][k] = v
	end
end


function metatable:del(p)
	if p.x < 0 or p.y < 0 or p.x >= max_width or p.y >= 2 * max_height - (p.x % 2) then
		return false
	end
	self[p.x + ((p.y // 2) * max_width)] = false
end


-- Screen Coordinates ---------------------------------------------------------


function metatable:default_origin()
	self.origin = { x = 116, y = 7 }
end


function metatable:compute_origin()
	local min_p = pos(max_width, max_height)
	local max_p = pos(0, 0)
	self:foreachpos(
		function(position, cell)
			if not cell or cell == 0 then
				return
			end
			if position.x < min_p.x then min_p.x = position.x end
			if position.y < min_p.y then min_p.y = position.y end
			if position.x > max_p.x then max_p.x = position.x end
			if position.y > max_p.y then max_p.y = position.y end
		end
	)
	local width = 1 + max_p.x - min_p.x
	local height = 1 + max_p.y - min_p.y
	self.origin = {
		x = (480 // 2) - ((width * 27) // 2) - (min_p.x * 27) - 4,
--		y = 20 + ((270 - 20) // 2) - ((height * 16) // 2) - (min_p.y * 16) - 8,
		y = 270 - (height * 16) - 16 - 2
	}
end


function metatable:coords_origin()
	return self.origin.x, self.origin.y
end


function metatable:coords_cell(p)
	local ox, oy = self:coords_origin()
	return ox + p.x * 27, oy + p.y * 16
end


function metatable:coords_gem(p)
	local ox, oy = self:coords_origin()
	return ox + (p.x * 27) + 3, oy + (p.y * 16) + 1
end


function metatable:pos(x, y)
	local ox, oy = self:coords_origin()
	x -= ox
	y -= oy + 1
	local px, py = x // 27, y // 16
	local dx, dy = x - (px * 27), y - (py * 16)
	if dx < 8 then
		if (px + py) % 2 == 0 and dy < 14 + (-2 * dx) then
			px -= 1
			py -= 1
		elseif (px + py) % 2 != 0 and dy > -1 + (2 * dx) then
			px -= 1
		end
	end
	py = (2 * ((py - (px % 2)) // 2)) + (px % 2)
	return pos(px, py)
end


function metatable:distance(p0, p1)
	-- TODO: is this correct?
	return (abs(p0.x - p1.x) + abs(p0.y - p1.y)) // 2
end


-- Iterating ----------------------------------------------------------


function metatable:foreachpos(func)
	for x = 0, max_width do
		for y = x % 2, max_height * 2 - 1, 2 do
			local p = pos(x, y)
			local item = self:get(p)
			if item then
				func(p, item)
			end
		end
	end
end	


function metatable:neighbours(p)
	return {
		{ position = p + pos(1, 1), direction = "horizontal_SE" },
		{ position = p + pos(0, 2), direction = "vertical" },
		{ position = p + pos(-1, 1), direction = "horizontal_NE" },
		{ position = p + pos(-1, -1), direction = "horizontal_SE" },
		{ position = p + pos(0, -2), direction = "vertical" },
		{ position = p + pos(1, -1), direction = "horizontal_NE" },
	}
end


function metatable:blast_radius(p)
	return {
		p + pos(0, 0),
		p + pos(0, -2),
		p + pos(1, -1),
		p + pos(1, 1),
		p + pos(0, 2),
		p + pos(-1, 1),
		p + pos(-1, -1),
	}
end

:: src/in_editor.lua
--[[pod_format="raw",created="2024-08-30 08:13:35",modified="2025-05-13 16:32:12",revision=2388]]
in_editor = {}

local tiling = "square"

local cells = false
local gems = false
local marks = false

local active_tool = 0
local ox, oy = 8, 8
local sx, sy = 32, 32

local tools = {
	[0] = cell_none,
	cell_good,
	cell_bad,
	rock_full,
	rock_cracked,
	rock_broken,
	cell_chest_air,
	cell_chest_fire,
	cell_chest_day,
	cell_chest_earth,
	cell_chest_water,
	cell_chest_night,
	cell_door,
	false,
	false,
	gem_gift,
	gem_bomb,
	false,
	gem_cat,
	gem_bat,
	gem_robot,
	false,
	false,
}



function in_editor:enter()
	if not cells then
		cells = logic_new_test_cells(tiling, true)
		gems = cells:new_grid()
	end
	cells:default_origin()
	gems:default_origin()
	marks = cells:new_grid()
end


function in_editor:exit()
end


function in_editor:update()
	if keyp("s") then
		tiling = "square"
		cells = false
		in_editor:enter()
	end
	if keyp("h") then
		tiling = "hex"
		cells = false
		in_editor:enter()
	end
	local mx, my, mb, _, _ = mouse()
	if mb == 0x1 and mx < 110 then
		mx -= ox
		my -= oy
		local x, y = clamp(mx // sx, 0, 2), clamp(my // sy, 0, 7)
		active_tool = clamp(x + 3 * y, 0, 22)
	elseif mb == 0x1 then
		local mp = cells:pos(mx, my)
		local tool = tools[active_tool]
		if tool == cell_none then
			local cell = cells:get(mp) or cell_none
			cell = (cell & ~cell_mask) | tool
			cells:set(mp, cell)
			gems:del(mp)
		elseif tool == cell_good or tool == cell_bad then
			local cell = cells:get(mp) or cell_none
			cell = (cell & ~cell_mask) | tool
			cells:set(mp, cell)
		elseif active_tool <= 12 then 
			local cell = cells:get(mp) or cell_none
			cell = (cell & cell_mask) | tool
			cells:set(mp, cell)
			gems:del(mp)
		elseif cells:get(mp) and cells:get(mp) & cell_mask != 0 then
			gems:set(mp, tool)
			local cell = cells:get(mp) or cell_none
			cell = (cell & cell_mask)
			cells:set(mp, cell)
		end
	end
	if mb == 0x2 then
		local mp = cells:pos(mx, my)
		local cell = cells:get(mp) or cell_none
		cell = (cell & cell_mask)
		cells:set(mp, cell)
		gems:del(mp)
	end
	if keyp("g") then
		in_game:load_from_editor(tiling, cells, gems)
		return in_game
	end
	return false
end


function in_editor:draw()
	cls(63)
	if not cells then
		return
	end
	local mx, _, _, _, _ = mouse()
	if mx <= 110 then
		window { cursor = "pointer" }
	else
		window { cursor = "crosshair" }
	end
	gfx_draw_cells(cells)
	gfx_draw_gems(cells, gems, marks, 0.0)
	-- Draw the panel
	rectfill(0, 0, 110, 269, 55)
	rectfill(ox, oy, ox + 28, oy + 28, 63)
	spr(33, ox + 1 * sx, oy + 0 * sy)
	spr(34, ox + 2 * sx, oy + 0 * sy)
	spr(48, ox + 0 * sx, oy + 1 * sy)
	spr(49, ox + 1 * sx, oy + 1 * sy)
	spr(50, ox + 2 * sx, oy + 1 * sy)
	spr(52, ox + 0 * sx, oy + 2 * sy)
	spr(53, ox + 1 * sx, oy + 2 * sy)
	spr(54, ox + 2 * sx, oy + 2 * sy)
	spr(55, ox + 0 * sx, oy + 3 * sy)
	spr(56, ox + 1 * sx, oy + 3 * sy)
	spr(57, ox + 2 * sx, oy + 3 * sy)
	spr(51, ox + 0 * sx, oy + 4 * sy)

	spr(8, ox + 0 * sx, oy + 5 * sy)
	spr(9, ox + 1 * sx, oy + 5 * sy)
--	spr(11, ox + 2 * sx, oy + 5 * sy)
	spr(10, ox + 0 * sx, oy + 6 * sy)
	spr(11, ox + 1 * sx, oy + 6 * sy)
	spr(12, ox + 2 * sx, oy + 6 * sy)
--	spr(14, ox + 0 * sx, oy + 7 * sy)
--	spr(15, ox + 1 * sx, oy + 7 * sy)

	local x, y = active_tool % 3, active_tool // 3
	rect(ox + x * sx - 1, oy + y * sy - 1, ox + x * sx + 29, oy + y * sy + 29, 7)
end
:: src/in_game.lua
--[[pod_format="raw",created="2024-08-27 17:11:11",modified="2025-05-13 16:32:12",revision=5651]]
in_game = {}


-- The Board
local tiling = "square"
local gravity = pos(0, 1)

local cells = false
local gems = false
local marks = false

local matches = {}

local prev_cells = false
local prev_gems = false
local prev_game = false

-- State Machine
local editor_requested = false
local substate = false
local clock = 0.0
local interaction = false

local starting_game = {
	turn = 0,
	in_cascade = false,
}
local game = deep_copy(starting_game)
local anim_turn = 0
local star_seed = 37


-----------------------------------------------------------------------


-- Functions for substate need to be global, because of Lua
-- forward-declaration rule for locals.


function creating_the_board()
--	cells = logic_new_test_cells(tiling)
--	gems = cells:new_grid()
	cells:compute_origin()
	gems.origin = cells.origin
	marks = cells:new_grid()
	matches = {}
	game = deep_copy(starting_game)
	game.player = logic_new_fighter()
	anim_turn = 0
	star_seed = math.random(37, 6584587)
	logic_fill_all_gems(cells, gems, marks)
	return creating_missing_gems
end


function creating_missing_gems()
	if clock == 0.0 then
		logic_fill_gems(cells, gems, marks)
	end
	clock += 1.0 / 8.0
	if clock < 1.0 then
		return creating_missing_gems
	end
	-- Clean-up
	marks:foreachpos(
		function(p, mark)
			if mark.name == "new" then
				marks:del(p)
			end
		end
	)
	return moving_things
end


function moving_things()
	if clock == 0.0 and game.turn > 0 then
		local something_moved = logic_mark_move(cells, gems, marks)
		if not something_moved then
			return starting_new_turn
		end
	end
	clock += 1.0 / 16.0
	if clock < 1.0 then
		return moving_things
	end
	logic_enact_move(cells, gems, marks)
	return starting_new_turn
end


function starting_new_turn()
	game.turn += 1
	anim_turn = 20
	game.in_cascade = false
	game.player:start_new_turn()
	return waiting_for_input
end


function waiting_for_input()
	local mx, my, mb, _, _ = mouse()
	if mb == 0x1 then
		local mp = cells:pos(mx, my)
		if gems:get(mp) then
			interaction = { name = "swap", position = mp, start = t() }
			return waiting_for_swap
		end
	end
	if keyp("del") then
		local mx, my = mouse()
		local p = cells:pos(mx, my)
		gems:set(p, gem_gift)
		marks = cells:new_grid()
		matches = {}
	end
	if keyp("w") then
		local mx, my = mouse()
		local p = cells:pos(mx, my)
		gems:set(p, gem_rainbow)
		marks:set(p, { name = "new" })
		matches = {}
		return checking_matches
	end
	if keyp("r") then
		local mx, my = mouse()
		local p = cells:pos(mx, my)
		cells:set(p, (cells:get(p) or 0) | rock_full)
		gems:del(p)
		matches = {}
		return checking_matches
	end
	if keyp("a") then
		local mx, my = mouse()
		local p = cells:pos(mx, my)
		gems:set(p, gem_attack)
		marks:set(p, { name = "new" })
		matches = {}
		return checking_matches
	end
	if keyp("e") then
		editor_requested = true
		return creating_the_board
	end
	if keyp("z") then
		cells = prev_cells:clone()
		gems = prev_gems:clone()
		marks = cells:new_grid()
		game = deep_copy(prev_game)
	end
	if keyp("1") then color_gem_skin = 0 end
	if keyp("2") then color_gem_skin = 1 end
	if keyp("3") then color_gem_skin = 2 end
	if keyp("4") then
		color_gem_skin = (color_gem_skin - 1) % 6
	end
	if keyp("6") then
		color_gem_skin = (color_gem_skin + 1) % 6
	end
	if keyp("5") then
		local prev = color_gem_skin
		while prev == color_gem_skin do
			color_gem_skin = math.random(0, 5)
		end
	end
	return waiting_for_input
end


function waiting_for_swap()
	local mx, my, mb, _, _ = mouse()
	if mb ~= 0x1 then
		interaction = false
		return waiting_for_input
	end
	local mp = cells:pos(mx, my)
	if cells:distance(mp, interaction.position) ~= 1
		or (not gems:get(mp))
	then
		return waiting_for_swap
	end
	local success = logic_mark_swap(gems, marks, interaction.position, mp)
	interaction = false
	if not success then
		return waiting_for_input
	end
	prev_cells = cells:clone()
	prev_gems = gems:clone()
	prev_game = deep_copy(game)
	return swapping_two_gems
end


function swapping_two_gems()
	clock += 1.0 / 8.0
	if clock < 1.0 then
		return swapping_two_gems
	end
	logic_enact_swap(gems, marks)
	return checking_matches
end


function checking_matches()
	matches, marks = logic_find_matches(cells, gems)
	if #matches > 0 then
		game.player:count_points(game, gems, matches)
		return clearing_gems
	end
	return playing_enemy
end


function clearing_gems()
	clock += 1.0 / 24.0
	if clock < 1.0 then
		return clearing_gems
	end
	logic_enact_clear(gems, marks)
	return repairing_cells
end


local repairing_done = false
function repairing_cells()
	if clock == 0.0 then
		local is_something_repaired = logic_mark_repair(cells, marks, matches)
		if not is_something_repaired then
			return breaking_things
		end
	end
	clock += 1.0 / 8.0
	if clock < 0.5 then
		repairing_done = false
		return repairing_cells
	elseif not repairing_done then
		logic_enact_repair(cells, marks)
		repairing_done = true
		return repairing_cells
	elseif clock < 1.0 then
		return repairing_cells
	end
	return breaking_things
end


local breaking_done = false
function breaking_things()
	if clock == 0.0 then
		local something_broke = logic_mark_breakage(cells, gems, marks, matches)
		if not something_broke then
			return applying_gravity
		end
		breaking_done = false
	end
	clock += 1.0 / 32.0
	if clock < 0.5 then
		return breaking_things
	elseif not breaking_done then
		logic_enact_breakage(cells, gems, marks)
		breaking_done = true
		return breaking_things
	elseif clock < 1.0 then
		return breaking_things
	end
	return applying_gravity
end


function applying_gravity()
	if clock == 0.0 then
		local some_gems_are_falling = logic_mark_gravity(cells, gems, marks, gravity)
		if not some_gems_are_falling then
			return playing_enemy
		end
	end
	clock += 1.0 / 8.0
	if clock < 1.0 then
		return applying_gravity
	end
	logic_enact_gravity(gems, marks)
	return checking_matches
end


function playing_enemy()
	game.player:apply_points()
	clock += 1.0 / 60.0
	if not keyp("space") then
		return playing_enemy
	end
	return creating_missing_gems
end


-----------------------------------------------------------------------


function in_game:load_from_editor(ed_tiling, ed_cells, ed_gems)
	tiling = ed_tiling
	if tiling == "square" then
		gravity = pos(0, 1)
	else
		gravity = pos(0, 2)
	end
	cells = ed_cells:clone()
	gems = ed_gems:clone()
	marks = cells:new_grid()
	matches = {}
	game = deep_copy(starting_game)
	substate = creating_the_board
end


-----------------------------------------------------------------------


function in_game:enter()
	editor_requested = false
	if not substate then
		substate = creating_the_board
	end
end


function in_game:exit()
end


function in_game:update()
	local next = substate()
	if next ~= substate then
		clock = 0.0
		substate = next
	end
	if anim_turn > 0 then
		anim_turn -= 1
	end
	if editor_requested then
		return in_editor
	end
	return false
end


function in_game:draw()
	if not cells then
		return
	end
	-- Starry background
	cls(63)
	-- Draw the board
--	rectfill(0, 100, 479, 269, 10)
	spr(112, 0, 100)
	gfx_draw_cells(cells)
	gfx_draw_gems(cells, gems, marks, clock)
	-- Draw the panel
	--[[
	rectfill(0, 0, 110, 269, 60)
	line(0, 0, 110, 0, 62)
	line(0, 50, 110, 50, 62)
	line(0, 0, 0, 269, 62)
	line(110, 0, 110, 269, 58)
	line(0, 49, 110, 49, 58)
	line(0, 269, 110, 269, 58)
	]]
	-- Top bar
	spr(98, 4, 5)
	gfx_draw_turns(480 // 2 - (35 //2), 2, game.turn, anim_turn)
	spr(100, 480 - 4 - 17, 5)
--	spr(98, 4, 5)
--	spr(100, 4 + 17 + 4, 5)
--	gfx_draw_turns(480 - 35 - 4, 2, game.turn, anim_turn)
--	rectfill(2, 30 - 4, 70, 30 - 4 + 70, 40)
	print("\#7Health: " .. tostr(game.player.health), 11, 30, 15)
	print("\#7Armor: " .. tostr(game.player.armor), 14, 39, 30)
	print("\#7Defense: " .. tostr(game.player.defense), 5, 48, 25)
	print("\#7Dodge: " .. tostr(game.player.dodge), 5, 60, 20)
	print("\#7Special: " .. tostr(game.player.special), 5, 73, 35)
	print("\#7Attack: " .. tostr(game.player.attack), 160, 30, 15)
	-- Update the cursor
	local mx, my = mouse()
	local cursor_pos = cells:pos(mx, my)
	local cell = cells:get(cursor_pos)
	if cell and cell ~= 0 then
		window { cursor = "grab" }
	else
		window { cursor = "" }
	end
	if false then
		rectfill(mx + 4 - 10, my + 10, mx + 36, my + 20, 7)
		print(tostr(cursor_pos.x)..","..tostr(cursor_pos.y), mx + 6 - 10, my + 12, 0)
	end
end
:: src/sgrid.lua
--[[pod_format="raw",created="2024-08-24 07:17:45",modified="2025-05-13 16:32:12",revision=4772]]
--- Square Grids

--- The origin of the grid, `pos(0, 0)`, is at the top left.


-- Local Constants --------------------------------------------------------


local max_width <const> = 16
local max_height <const> = 9


-- Constructors -----------------------------------------------------------


local metatable = {}


function metatable:new_grid()
	return sgrid_new()
end


function sgrid_new()
	local grid = {}
	metatable.default_origin(grid)
	setmetatable(grid, { __index = metatable })
	for i = 0, max_width * max_height do
		grid[i] = false
	end
	return grid
end


function metatable:clone()
	local grid = self:new_grid()
	grid.origin = self.origin
	self:foreachpos(function(p, item) grid:set(p, item) end)
	return grid
end


-- Indexing --------------------------------------------------------------------


function metatable:tiling()
	return "square"
end


function metatable:get(p)
	if p.x < 0 or p.y < 0 or p.x >= max_width or p.y >= max_height then
		return false
	end
	return self[p.x + (p.y * max_width)]
end


function metatable:set(p, value)
	if p.x < 0 or p.y < 0 or p.x >= max_width or p.y >= max_height then
		return false
	end
	self[p.x + (p.y * max_width)] = value
end


function metatable:merge(p, state)
	if p.x < 0 or p.y < 0 or p.x >= max_width or p.y >= max_height then
		return false
	end
	local index = p.x + (p.y * max_width)
	if not self[index] then
		self[index] = {}
	end
	for k, v in pairs(state) do
		self[index][k] = v
	end
end


function metatable:del(p)
	if p.x < 0 or p.y < 0 or p.x >= max_width or p.y >= max_height then
		return false
	end
	self[p.x + (p.y * max_width)] = false
end


function metatable:distance(p0, p1)
	return abs(p0.x - p1.x) + abs(p0.y - p1.y)
end


-- Screen Coordinates ---------------------------------------------------------


function metatable:default_origin()
	self.origin = { x = 121, y = 4 }
end


function metatable:compute_origin()
	local min_p = pos(max_width, max_height)
	local max_p = pos(0, 0)
	self:foreachpos(
		function(position, cell)
			if not cell or cell == 0 then
				return
			end
			if position.x < min_p.x then min_p.x = position.x end
			if position.y < min_p.y then min_p.y = position.y end
			if position.x > max_p.x then max_p.x = position.x end
			if position.y > max_p.y then max_p.y = position.y end
		end
	)
	local width = 1 + max_p.x - min_p.x
	local height = 1 + max_p.y - min_p.y
	self.origin = {
		x = (480 // 2) - ((width * 29) // 2) - (min_p.x * 29),
--		y = 20 + ((270 - 20) // 2) - ((height * 29) // 2) - (min_p.y * 29),
		y = 270 -(height * 29) - 6
	}
end


function metatable:coords_origin()
	return self.origin.x, self.origin.y
end


function metatable:coords_cell(p)
	local ox, oy = self:coords_origin()
	return ox + p.x * 29, oy + p.y * 29
end


function metatable:coords_gem(p)
	local ox, oy = self:coords_origin()
	return ox + p.x * 29, oy + p.y * 29
end


function metatable:pos(x, y)
	local ox, oy = self:coords_origin()
	return pos((x - ox) // 29, (y - oy) // 29)
end


-- Iterating -------------------------------------------------------


function metatable:foreachpos(func)
	local p = pos(0, 0)
	for x = 0, max_width do
		for y = 0, max_height do
			local p = pos(x, y)
			local item = self:get(p)
			if item then
				func(p, item)
			end
		end
	end
end	


function metatable:neighbours(p)
	return {
		{ position = p + pos(1, 0), direction = "horizontal" },
		{ position = p + pos(0, 1), direction = "vertical" },
		{ position = p + pos(-1, 0), direction = "horizontal" },
		{ position = p + pos(0, -1), direction = "vertical" },
	}
end


function metatable:blast_radius(p)
	return {
		p + pos(0, 0),
		p + pos(1, 0),
		p + pos(1, 1),
		p + pos(0, 1),
		p + pos(-1, 1),
		p + pos(-1, 0),
		p + pos(-1, -1),
		p + pos(0, -1),
		p + pos(1, -1),
	}
end

:: src/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA4LTI0IDA3OjE3OjA5Iixtb2RpZmllZD0iMjAyNS0w
NS0xMyAxNjozMjoxMiJdXQ==
:: debug.lua
--[[pod_format="raw",created="2024-08-24 12:45:09",modified="2025-05-13 16:32:12",revision=1534]]
-- Detect uninitialized globals and typos
-- from @snowkittykira from the BBS


-- if you're using include(), include this after including everything else,
-- since most included modules will need to assign global variables on load

-- these globals are needed by picotron
_init = _init or false
_draw = _draw or false
_update = _update or false
-- these are used by the picotron terminal
cproj_draw = cproj_draw or false
cproj_update = cproj_update or false
_ = _ or false
_is_terminal_command = _is_terminal_command or false
k = k or false
res = res or false
-- gui needs these
drag_t = drag_t or false

local function unknown_variable (t, k)
  error (debug.traceback ('unknown variable ' .. tostring (k), 2))
end

setmetatable (_G, {
  __index = unknown_variable,
  __newindex = unknown_variable,
})
:: drakma.lua
b64$LS1bW3BvZF9mb3JtYXQ9InJhdyIsY3JlYXRlZD0iMjAyNC0wNC0wNyAwNzo0Mjo0NSIsbW9k
aWZpZWQ9IjIwMjUtMDUtMTMgMTY6MzI6MTIiLHJldmlzaW9uPTI5NjZdXQpfbW9kdWxlcyA9IHt9
CgotLSBBICdyZXF1aXJlJyBmdW5jdGlvbiBzaW1pbGFyIHRvIHN0YW5kYXJkIEx1YS4KLS0gSWRl
YSBmcm9tIGVsZ29waGVyIG9uIHRoZSBCQlMKZnVuY3Rpb24gcmVxdWlyZShuYW1lKQoJbG9jYWwg
Y2FjaGVkID0gX21vZHVsZXNbbmFtZV0KCWlmIChjYWNoZWQpIHJldHVybiBjYWNoZWQKCglsb2Nh
bCBmaWxlbmFtZSA9IGZ1bGxwYXRoKG5hbWUgLi4gJy5sdWEnKQoJbG9jYWwgc3JjID0gZmV0Y2go
ZmlsZW5hbWUpIAoKCWlmICh0eXBlKHNyYykgIT0gInN0cmluZyIpIHBhbmljKCJjb3VsZCBub3Qg
aW5jbHVkZSAiIC4uIGZpbGVuYW1lKQoKCS0tIGh0dHBzOi8vd3d3Lmx1YS5vcmcvbWFudWFsLzUu
NC9tYW51YWwuaHRtbCNwZGYtbG9hZAoJLS0gY2h1bmsgbmFtZSAoZm9yIGVycm9yIHJlcG9ydGlu
ZykKCS0tIG1vZGUgKCJ0IiBmb3IgdGV4dCBvbmx5IC0tIG5vIGJpbmFyeSBjaHVuayBsb2FkaW5n
KQoJLS0gX0VOViB1cHZhbHVlCgktLSBAIGlzIGEgc3BlY2lhbCBjaGFyYWN0ZXIgdGhhdCB0ZWxs
cyBkZWJ1Z2dlciB0aGUgc3RyaW5nIGlzIGEgZmlsZW5hbWUKCWxvY2FsIGZ1bmMsIGVyciA9IGxv
YWQoc3JjLCAiQCIgLi4gZmlsZW5hbWUsICJ0IiwgX0VOVikKCWlmIChub3QgZnVuYykgcGFuaWMo
IlN5bnRheCBlcnJvcjoiLCB0b3N0cihlcnIpKQoKCWxvY2FsIG1vZHVsZSA9IGZ1bmMoKQoJX21v
ZHVsZXNbbmFtZV0gPSBtb2R1bGUKCglyZXR1cm4gbW9kdWxlCmVuZAoKCmZ1bmN0aW9uIHBhbmlj
KC4uLikKCWxvY2FsIGFyZ3MgPSB7IC4uLiB9Cglmb3JlYWNoKAoJCWFyZ3MsCgkJZnVuY3Rpb24o
c3RyKQoJCQlzZW5kX21lc3NhZ2UoMywgeyBldmVudCA9ICJyZXBvcnRfZXJyb3IiLCBjb250ZW50
ID0gc3RyIH0pCgkJZW5kCgkpCglzdG9wKCkKZW5kCgoKLS0gVGFibGUgdXRpbGl0eSBmdW5jdGlv
bnMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0KCgpmdW5jdGlvbiBpc19lbXB0eSh0KQoJcmF3ZXF1YWwobmV4dCh0KSwgbmlsKQplbmQKCmZ1
bmN0aW9uIGRlZXBfY29weSh0LCBhbHJlYWR5KQoJaWYgKG5vdCBhbHJlYWR5KSBhbHJlYWR5ID0g
e30KCWlmIHR5cGUodCkgPT0gInRhYmxlIiB0aGVuCgkJaWYgYWxyZWFkeSBhbmQgYWxyZWFkeVt0
XSB0aGVuCgkJCXJldHVybiBhbHJlYWR5W3RdCgkJZW5kCgkJbG9jYWwgbmV3ID0ge30KCQlhbHJl
YWR5W3RdID0gbmV3CgkJZm9yIGssIHYgaW4gcGFpcnModCkgZG8KCQkJbmV3W2tdID0gZGVlcF9j
b3B5KHYsIGFscmVhZHkpCgkJZW5kCgkJcmV0dXJuIG5ldwoJZWxzZQoJCXJldHVybiB0CgllbmQK
ZW5kCgoKZnVuY3Rpb24gdG9zdHJyZWModCkKCWlmIHR5cGUodCkgIT0gInRhYmxlIiB0aGVuCgkJ
cmV0dXJuIHRvc3RyKHQpCgllbmQKCQoJbG9jYWwgcyA9IG5pbAoJZm9yIGssIHYgaW4gcGFpcnMo
dCkgZG8KCQlpZiBub3QocykgdGhlbgoJCQlzID0gInsgIgoJCWVsc2UKCQkJcyAuLj0gIiwgIgoJ
CWVuZAoJCXMgLi49IHRvc3RyKGspIC4uICIgPSAiIC4uIHRvc3RycmVjKHYpCgllbmQKCWlmIG5v
dCBzIHRoZW4KCQlyZXR1cm4gInt9IgoJZW5kCglzIC4uPSAiIH0iCgoJcmV0dXJuIHMKZW5kCgoK
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCgpmdW5jdGlvbiBjbGFtcCh2LCBtaW4sIG1heCkKCWlm
IHYgPCBtaW4gdGhlbgoJCXJldHVybiBtaW4KCWVuZAoJaWYgdiA_IG1heCB0aGVuCgkJcmV0dXJu
IG1heAoJZW5kCglyZXR1cm4gdgplbmQKCgpmdW5jdGlvbiBleHBfZGVjYXkoYSwgYiwgZGVjYXks
IGR0KQoJLS0tIExlcnAgc21vb3RoaW5nLCBidXQgZnJhbWVyYXRlLWluZGVwZW5kYW50LCBmcm9t
IEZyZXlhIEhvbG3DqXIKCS0tLSBodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PUxTTlF1
RkVET3lRCgktLS0gVXNlIGFzIGBhID0gZXhwX2RlY2F5KGEsIGIsIGRlY2F5LCBkdClgCglyZXR1
cm4gYiArIChhIC0gYikgKiBtYXRoLmV4cCgtIGRlY2F5ICogZHQpCmVuZAoKCi0tIFBvcyAtLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLQoKCi0tIFdBUk5JTkc6IGRvIG5vdCBmb3JnZXQgdGhhdCBgcG9zYCBpcyBh
IHJlZmVyZW5jZSB0eXBlLCBub3QgYSB2YWx1ZToKLS0gYXZvaWQgbW9kaWZ5aW5nIGluIHBsYWNl
LgpmdW5jdGlvbiBwb3MoeCwgeSkKCWxvY2FsIHAgPSB1c2VyZGF0YSgiaTE2IiwgMikKCXAueCA9
IHgKCXAueSA9IHkKCXJldHVybiBwCmVuZAoKCi0tIERyYXdpbmcgLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoK
Ci0tIEZyb20gU29waGllIG9uIHRoZSBkaXNjb3JkCmZ1bmN0aW9uIGdldF9kcmF3c3BhY2UoKQog
ICAgcmV0dXJuIHsKICAgICAgICBjYW1feD1wZWVrNCgweDU1MTApLAogICAgICAgIGNhbV95PXBl
ZWs0KDB4NTUxNCksCiAgICAgICAgY2xpcF9sPXBlZWsyKDB4NTUyOCksCiAgICAgICAgY2xpcF90
PXBlZWsyKDB4NTUyYSksCiAgICAgICAgY2xpcF9yPXBlZWsyKDB4NTUyYyksCiAgICAgICAgY2xp
cF9iPXBlZWsyKDB4NTUyZSksCiAgICB9CmVuZAoKCmZ1bmN0aW9uIHNldF9kcmF3c3BhY2UoZHJh
d3NwYWNlKQogICAgcG9rZTQoMHg1NTEwLGRyYXdzcGFjZS5jYW1feCkKICAgIHBva2U0KDB4NTUx
NCxkcmF3c3BhY2UuY2FtX3kpCiAgICBwb2tlMigweDU1MjgsZHJhd3NwYWNlLmNsaXBfbCkKICAg
IHBva2UyKDB4NTUyYSxkcmF3c3BhY2UuY2xpcF90KQogICAgcG9rZTIoMHg1NTJjLGRyYXdzcGFj
ZS5jbGlwX3IpCiAgICBwb2tlMigweDU1MmUsZHJhd3NwYWNlLmNsaXBfYikKZW5k
:: main.lua
--[[pod_format="raw",created="2024-03-30 05:39:34",modified="2025-05-13 16:32:12",revision=6330]]
include "drakma.lua"
include "src/constants.lua"
include "src/sgrid.lua"
include "src/hgrid.lua"
include "src/logic/combat.lua"
include "src/logic/creation.lua"
include "src/logic/matching.lua"
include "src/logic/mechanics.lua"
include "src/gfx.lua"
include "src/in_game.lua"
include "src/in_editor.lua"
--include "debug.lua"


local state = in_editor
--local state = in_game
local next_state = false


function _init()
	window { cursor = "" }
	fetch("pal/0.pal"):poke(0x5000)
	state:enter()
end


function _update()
	if next_state then
		state:exit()
		state = next_state
		state:enter()
	end
	next_state = state:update()
end


function _draw()
	state:draw()
	if key("shift") then
		print(string.format("\014% 3.0f", math.floor(0.5 + stat(1) * 100.0)) .. "%", 460, 100 - 6, 7)
	end
end
:: .info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA4LTIzIDE4OjQ1OjEzIixtb2RpZmllZD0iMjAyNS0w
NS0xMyAxNjozMjoxMiIscnVudGltZT0xOCxzdG9yZWQ9IjIwMjQtMDMtMzAgMDY6NTQ6MjQiLHdv
cmtzcGFjZXM9e3tsb2NhdGlvbj0iZ2Z4LzAuZ2Z4Iix3b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0
aW9uPSJzZngvMC5zZngiLHdvcmtzcGFjZV9pbmRleD0yfSx7bG9jYXRpb249Im1haW4ubHVhIix3
b3Jrc3BhY2VfaW5kZXg9NX0se2xvY2F0aW9uPSJwYWwvMC5wYWwiLHdvcmtzcGFjZV9pbmRleD02
fX1dXQ==
:: [eoc]
