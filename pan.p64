picotron cartridge // www.picotron.net
version 2

:: docs/
:: docs/design.md
b64$LS1bW3BvZF9mb3JtYXQ9InJhdyIsY3JlYXRlZD0iMjAyNS0wNS0wOCAxMzo1MjoyNSIsbW9k
aWZpZWQ9IjIwMjUtMDUtMTYgMjA6MTI6NDkiLHJldmlzaW9uPTMxMTldXQojIERlc2lnbgoKIyMg
UnVsZXMKCiMjIyBGaXJzdCBWYXJpYXRpb24KCkFybW9yIGdlbXMgZ2l2ZSBwb2ludHMgd2l0aCBh
IDI6MSByYXRpby4KCiMjIyBTZWNvbmQKCkFybW9yIGFuZCBzcGVjaWFsIGdlbXMgZ2l2ZSBwb2lu
dHMgd2l0aCBhIDM6MSByYXRpby4KCldoZW4gYSBmaWdodGVyIGF0dGFjazogZmlyc3Qgc3Vic3Ry
YWNrIHRoZSBvcHBvbmVudCdzIGJsb2NrIHBvaW50cyBhbmQgYXJtb3IKcG9pbnRzIGZyb20gdGhl
IGF0dGFjayBwb2ludHMsIHRoZW4gc3Vic3RyYWN0IHRoZSByZW1haW5pbmcgYXR0YWNrIHBvaW50
cwpkaXJlY3RseSB0byBoZWFsdGggKHdpdGhvdXQgdG91Y2hpbmcgYXJtb3IpLgoKV2hlbiBhIGZp
Z2h0ZXIgZG9lcyBhIHNwZWNpYWwgYXR0YWNrOiBzdWJzdHJhY3QgdGhlIHNwZWNpYWwgcG9pbnRz
IGZyb20gdGhlCm9wcG9uZW50J3MgYXJtb3IgcG9pbnRzLCB0aGVuIHRvIGhlYWx0aC4gU3BlY2lh
bCBhdHRhY2tzIGNhbm5vdCBiZSBibG9ja2VkLgoKIyMjIFRoaXJkCgpBbGwgZ2VtcyBnaXZlIHBv
aW50cyB3aXRoIGEgMToxIHJhdGlvLgoKV2hlbiBhIGZpZ2h0ZXIgYXR0YWNrOiBpZiB0aGVpciBh
dHRhY2sgcG9pbnRzIGFyZSBsZXNzIHRoYW4gdGhlIGJsb2NrIHBvaW50cwpvZiB0aGUgb3Bwb25l
bnQsIG5vIGRhbWFnZSBpcyBkZWFsdDsgb3RoZXJ3aXNlIGFsbCB0aGUgYXR0YWNrIHBvaW50cwph
cmUgc3Vic3RyYWN0ZWQgdG8gYXJtb3IgYW5kIGhlYWx0aCBvZiB0aGUgb3Bwb25lbnQuCgojIyMg
Rm91cnRoIChtaXggb2Ygc2Vjb25kIGFuZCB0aGlyZCkKCkFybW9yIGFuZCBzcGVjaWFsIGdlbXMg
Z2l2ZSBwb2ludHMgd2l0aCBhIDM6MSByYXRpby4KCldoZW4gYSBmaWdodGVyIGF0dGFjazogaWYg
dGhlIG9wcG9uZW50IGhhcyBtb3JlIGJsb2NrIHBvaW50cywgdGhlIGF0dGFjayBpcwpibG9ja2Vk
LiBPdGhlcndpc2Ugc3Vic3RyYWN0IHRoZSBvcHBvbmVudCdzIGFybW9yIHBvaW50cyBmcm9tIHRo
ZSBhdHRhY2sgcG9pbnRzLAphbmQgc3Vic3RyYWN0IHRoZSByZW1haW5pbmcgYXR0YWNrIHBvaW50
cyB0byB0aGUgb3Bwb25lbnQncyBoZWFsdGggKHdpdGhvdXQKdG91Y2hpbmcgYXJtb3IpLgoKV2hl
biBhIGZpZ2h0ZXIgZG9lcyBhIHNwZWNpYWwgYXR0YWNrOiBzdWJzdHJhY3QgdGhlIHNwZWNpYWwg
cG9pbnRzIGZyb20gdGhlCm9wcG9uZW50J3MgYXJtb3IgcG9pbnRzLCB0aGVuIHRvIGhlYWx0aC4g
U3BlY2lhbCBhdHRhY2tzIGNhbm5vdCBiZSBibG9ja2VkLgoKIyMgU3BlY2lhbCBNb3ZlcwoKLSBF
eHRyYSBBdHRhY2s6IGEgYmlnIGF0dGFjayAoVE9ETzogaG93IGRvZXMgaXQgc2NhbGU-IHVzZSB0
aGUgbnVtYmVyIG9mCiAgc3VwZXItY2hhcmdlZCBhdHRhY2sgZ2Vtcz8pLiBUcmlnZ2VycyBhZnRl
ciB0aGUgbm9ybWFsIGF0dGFjaywgc28gY2FuCiAgY2lyY3VtdmVudCBkb2RnZSwgZGVmZW5zZSBh
bmQgYXJtb3IuCgotIERvdWJsZSBTdHJpa2U6IG5leHQgYXR0YWNrIGlzIGRlYWx0IHR3aWNlLiBO
ZXh0IGF0dGFjayBjYW4gYmUgb24gdGhlIHNhbWUKICB0dXJuLiBEb2RnZSBvbmx5IHRyaWdnZXJz
IGZvciB0aGUgZmlyc3QgaGl0LgoKLSBSYWdlOiB0cmFuc2Zvcm1zIGFsbCBkZWZlbnNlIGdlbXMg
aW50byBhdHRhY2sgZ2Vtcy4gVE9ETzogY2FwIHRoZSBkYW1hZ2U-CgotIFNwZWVkOiB0cmFuc2Zv
cm1zIGFsbCBkZWZlbnNlIGdlbXMgaW50byBkb2RnZSBnZW1zLiBDYW4gaW1tZWRpYXRlbHkKICBm
aWxsIHRoZSBkb2RnZSBiYXIuCgotIEhhcmRlbjogdHJhbnNmb3JtcyBhbGwgZGVmZW5zZSBnZW1z
IGludG8gYXJtb3IgZ2Vtcy4KCi0gUGFycnkvQ291bnRlcjogcGFycnkgdGhlIG5leHQgYXR0YWNr
IChudWxsaWZ5IGl0KSBhbmQgbWlycm9yIHRoZSBkYW1hZ2UKICB0byB0aGUgb3Bwb25lbnQuCgoj
IyBTa2lsbHMKClVzaW5nIGEgc2tpbGwgd2l0aG91dCBjcmVhdGluZyBhIG1hdGNoIGRvZXMgbm90
IGVuZCB0aGUgdHVybiwgZXZlbiBpZiBzb21lCmdlbXMgYXJlIGNsZWFyZWQuIFRob3NlIGNsZWFy
ZWQgZ2VtcyBhcmUgYWRkZWQgdG8gdGhlIG5leHQgbWF0Y2guCgotIENsZWFyIG9uZSBnZW0uCgot
IENsZWFyIG9uZSBjb2x1bW4uCgotIFN1cGVyLWNoYXJnZSBvbmUgZ2VtLgoKLSBNb3ZlIGFsbCBz
dXBlcmNoYXJnZXMgdG8gYSBzcGVjaWZpYyBjb2xvci4KCi0gRnJlZSBzd2FwOiBtYWtlIGEgc3dh
cC1hbmQtbWF0Y2ggd2l0aG91dCBlbmRpbmcgdGhlIHR1cm4uCgotIFN3YXAgdHdvIGNvbG9ycy4K
Ci0gU3dhcCB0d28gZGlzdGFudCAobm9uLW1hdGNoaW5nPykgZ2Vtcy4KCi0gU3dhcCB0d28gYWRq
YWNlbnQgbm9uLW1hdGNoaW5nIGdlbXMuCgotIFJvdGF0ZSBjb2x1bW4uCgotIFN3YXAgdHdvIChk
aXN0YW50KSBjb2x1bW5zLgoKIyMgUGVybWFuZW50IFNraWxscwoKLSBJbnZlcnQgZ3Jhdml0eS4K
Ci0gU2h1ZmZsZSB0aGUgYm9hcmQuCgojIyBVcGdyYWRlcwoKQ29tbW9uOgotIGluY3JlYXNlIHBl
cmNlbnRhZ2Ugb2Ygc3VwZXJjaGFyZ2UgPGNvbG9yPiBnZW1zICgwJSAtPiAxMCUgLT4gMjAlIC0_
IC4uLikKLSBkZWNyZWFzZSBkb2RnZSBtZXRlciAoNiAtPiA1IC0_IDQgLT4gLi4uKQotIGRlY3Jl
YXNlIHNwZWNpYWwgbWV0ZXIgKDEyIC0_IDExIC0_IDEwIC0_IC4uLikKClJhcmU6Ci0gaW5jcmVh
c2UgbWF4IGFybW9yCi0gaW5jcmVhc2UgaGVhbHRoCi0gaW5jcmVhc2UgbWF4IGF0dGFjaz8KLSBp
bmNyZWFzZSBwZXJjZW50YWdlIG9mIDxjb2xvcj4gZ2VtcyAoMjAlIC0_IDMzJSkKCklmIGhlYWx0
aCBpcyBsb3csIG9uZSBvZiB0aGUgMyBvcHRpb25zIGlzIGFsd2F5czoKLSBoZWFsIGEgc21hbGwg
YW1vdW50CgojIyBOZXcgR2FtZSBQbHVzCgotIEVubmVtaWVzIGFyZSB0b3VnaGVyCi0gQmFzaWMg
c3dhcCBtZWNoYW5pYyBpcyByZXBsYWNlZCB3aXRoIG11bHRpLXN3YXAgKGkuZS4gc3dhcCBhIGNo
YWluIG9mIDYgZ2Vtcyk=
:: docs/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA4LTI2IDE0OjAzOjI1Iixtb2RpZmllZD0iMjAyNS0w
NS0xNiAyMDoxMjo0OSJdXQ==
:: gfx/
:: gfx/0.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTAzLTMwIDA1OjM5OjM0Iixtb2RpZmllZD0iMjAyNS0w
NS0xNiAyMDoxMjo0OSIscmV2aXNpb249NzgzNl1dbHo0AOhDAACpyQAA8xR7WzBdPXtibXA9cHh1
AEMgEBAE8PAsZmxhZ3M9MCxwYW5feAgAz3k9MCx6b29tPTZ9LDEA-1DwER0dBPBPPxJAPuAODxYf
Kg8VDiAOHyofFg7QDg8qPxUuBQBADg81wB4ApBQfFS8WHxUfFA8TANUPFQ8UDxNPFQ8TDxQfKAAB
FQARLxUAEC8VADGQPyw_AFATLxUfEz4A-AYeHytgDyw-LS8VXy0-LB8VHywPK1ARAD8PNUATACXz
AFBPLC8TTywvKx8TLysfNVsANU8tLyIAH2ATAITvcD8rLn0eHR81gPwD8C7JAR3yPDkvKxAPD-AG
DysgHvAFTyzwBw0-LQ0O8AYNDD0ODzXwAx1sHfABDawN4A28HcANLB8qjA0OoA0sK4wdDpANLBuc
HQ4PNXAN-AAtDgYAKwpgBwAm7D0GAP8g3E0OCnANvE0OGnANrF0OCpAdbG0OGqAOzQ4awA6tDhrg
Hm0eGvABCm4q8ARq8BfNAB3wBU0PLOAOoA4PLQ7ADg0OkA4dDqAOoABAgA4tDgQA0QyADg0PKx0O
YA4dCw0OAFIbHW4dGwsAMyuNKxQAEq0SACr9AQYAkHAOLS5tLi0OcFQA8QkaDyoLDk0OCgsPGg4d
DgxgDh0OCRsJDi0GAAERADMtDikEAIAMYA49Lk0uPQkAIP0DSQD-Jm0vCW0OHEBbXQhdW3AOPQ4d
Dh0OPQ4cgDstHg0eLTtwGyAOrQ4cABuwHm0eHPABDG4s8ARsEAEf8AKLDytgDvAEHkAe8AQODyxO
DQ0A8DFNHtAuIA5tDiAuDzVAHi0eAA4NHw8NHA0OAB4tHiAObR4MDyoODAsODB5tDhAOfQ4MHgwe
DA59Dg81AA59Dg0cKwDwCX0OCgAOjQ5NDo0OCgA_bQ4tDm0_CgAOGt8A8AYaDgoQCgA_zT4KEAow
DhoOLQ5NDi0WAPAGcAoATk1OChAKkA4qDk0OKg4K0AogGwD-AiAK8AMODQ4a8AkOGvALCvBx6AAd
IBoPCgNwLPAKDysPFhQDIvAJEgAgDzUUABEfBgBBDzXwCwYA8AQE7yvADu8tDqAODf8sAA6QDg38
BgDwDhw_TD4cDg81YC4MDg8NHw8PDQ4sDgsfDwsODC5A0wHwBQ4KHxAKDiwOChkKDgwOHQ4wDg0M
FgAWGRUAAEAAsSAOHA4MDgsaCw4sBgAAFgAQCBUAAmEA8AIcDggwLvwBLhhACA78AQ4oYAYAYAiA
DjyOPAcAUiwOjQ4sCQBVDQ5MDgwNABB8CgAwkA4cCgCvHA4YoO4YwOjwMCoBKR8SKgEWULAODd8s
lgUFMgEXDC0BVTwOLA48JQEDDgAFIAEwXixeAgESCxcBYA8cHx0PHDABIh8dMQEYCxsBEQsbATAb
QAsVARErGwESCxsBFAsbARgLGwEVCxsBFQsbAW8boO4bwOsbAR-wGS8fK6AusA4fLR5wDi0ekA4f
LB0eQA48HR5gDkwdHhAOHA8NDw8PDRwWAPIEbB0eLA8PDxAPDzwdDiAOnB0eDB4AoVwOIA4sHmwd
HnwwA-ECHB4LDiwePB0eXA4LAC4rDgwQAKMMHR48DgsQKxAeEgByHS4MDgtwGxAA8QUMDi0eC8Ab
EB4bDjwNDgvwAhsADhwB4PABHhAOTA4LsB4gDg0e-wAhG2ALAHIADkwuGxAuCwCSDB0eLB47IA4d
DABAXB4rYAgA-xiMHiuADrweK7AOjB4r0A5sHivwAQ48HivwAw4cHivwBh4r8Akb8CI1AR3xCBYf
K2Ae8AAeDy0ODzVQDg8tHrAeHQ8sDQDwEA0fLB5wHh0cDh81YA48HkAOHTwOC3AOXA4wDkwOG4DL
ANAwDjw_QD48DhswDkwdDwBQHUwOC1AfABBABQAjUA4PACELcO4AAAUAYXAOLD4gPvEB8AMsHQ4L
EA4dLA4bkA48DhsgDjwWAAG3AxAwKwAQgIECEBxMABAcKgKADSwODD4APgxEABMNsAFxDhwdDgsO
HSAAEhzSAQEzAABzASQbgPQBABMAIAsQBQBgoA5cDhwuZQJADlwODNwFoA4LwA5cDg08DhsIAAGp
ATDgDky0ADDgDlyGAI-wAJ4b8AKbsFsBHdAyLyugHqAeLy0OcB4dBABAPywOQE8BALcFFB2OAqIO
EB4dTA4wDh08vgBBLB4dbIUEE1y7ALAeHZwOIA58Hh1sHpcB8QQQDlweHTweLA4LHhwOEA48Hh0M
DQDFDA4LAAsuCwAODC4dEACVHgsgKwAeLQ4MDwAhG2DrAAAKABGw7QDxCiAb8AEOTA4QHvADDiwO
DB4NDiAe4C5MDgAKAHKgGx4sHh0MDgBSLnALHlwOAHAdDguACx6MDQCwG6ALHrwOC9ALHowsAeAL
HmwOC-ADCx48DhvwBaUAvwvwCAseG-AKG-ARQwEd8gYanyvwAg4vLQ5dDvAADg0-LA5MDvBOAyBc
DqYBMVwO0DACMAwOXDMIIAwuGQAQsDcCIC81sAQEZQEQoBMAAD0BABQAAWgBEBwGBTAsDgAFAAQm
AHCQDg0_DzU_BAUAIwVBDjsAG2wAYKAODRwOQAUAEAwMAAGfAiANLGgAUjwOIA4NtgJgHD4LED4s
OQBQHA47IBvFAhBwHAABcQEBCgAkC1AGABBcTgCxXA5QDg0sPgswPjxRAGA8DjtAGw4MAkANTA6A
BQBBCzAePEYAcCweG0ALHixMAEEcHitw3gH-A1AODR4rsAseC1AeK-AAG2AbcG4JfTH9Aw4FAAFd
CRDNXQZ0YA4tTi1OLUgJBU4JEilNCR8JTQlGDyQNEB8yMQD--0ifHR0E-zf---88NQALHTE1AB84
NQAhXzsN-zwNBgA_D4YAHQc7AA8GADgPhgAMD6cBHQ0TBU8POw88BAAhFx8MAA84AP-------wcv
DzuJBh0HOwAPBAAZFx8MAA84AP-------wcvDzyJBhxxjzwPPQ87rwYAEU8GADL-PAAHABABBwAR
zxQAF38gABEfBgAXjwwAF_8GAAIwACRfPDQAES8GABUPNAATL2QAFgRXABcfKQAEgwAQBwcAF98T
ABGfBgARPwYAGL8lABdvJQAmXzxWADb-PBINACw-PCsAHR8YADb-PAgNABOfEwAWAiwAF38_AAN8
AAVdACc7TyMAEx8jABYWEwAXf7gACBIAF886AQIkARnfQwAWE5IACKsAD_QBGfEmIyAEcP82A_D_
BdD_BcD_B7D_B6D_CZD_CYD_C3D_C2D_DVD_DUD_DzD_DyD_ERD_EQD_NgAJABEgFQARQCEAEWAt
ABGAOQARoEUAEcBRAD-g-gOXFAweNY4AHzeOAHofOI4AevMzOwPg-zwF0P87BcD-PAew-zsHoP88
CZD-OwmA-zwLcP87C2D-PA1Q-zsNQP88DzD-Ow8g-zwREP87EQD-PBP-OxMADwATIB8AE0AvABNg
PwATgE8AE6BfABPAbwA-4P88rwAODoARDzEAewBCAQQ9AxOfSQMg4G4IADC_0C4HABCOBQDwAE7A
-gYPPbANDzv_AA0MLvIBoE4NDD4NDI4NDA76AfEFLg0M-gZgng0MXg0MLg0MPlAM-gsHAsE_DQzu
DQx_IA4NDM4vAPIAPhCeDQz_Ag0MDgAM-gQNBAAQAzYAEABFAEIMEP4AWgBRIAxuDQxvAAM3AkG_
DQx_XgARYG4AEHAcABCORAIBQACRHg2gXg0M7rAOJgAhnsA6AM-QXg0MzuCuDQxODXCvExzwE-AV
vzQPMdDfNC8xoN80TzGAXzRfMg8xDzAPNF8xYE80fzILAPAJLzJPMUBPNI8yDzFPMk8xMD80-zIB
PzEgCABBAz8xEAgAvx8xHzAQLzT-MgUvCAAZcS8yDzH-MgEMAHIfMQ8w-zICDAAyMA80DAAQHxgA
AAwAUD8wED8xcgAgMCAIAPEOAT8wME8xfzIPMV8yTzBATzFvMh8xPzJPMGBfMT-FAP8GLzJfMIBP
Md8woC8x3zDQDzG-MPAVCAccAyIBUJ80DzIvJgEADgAfDyoBEEIwDzQ-LAERnw0AIU8yMQFhvzIP
MF8yNAERrz8AED8eABMyPQFgDzIPMY8y_wAAvQABXgAkMi8ZABJ-EQBgNB8yDzAvCgASMSkBAfgA
An0AEC92AAEVABAyWgAAVgAAFwAgDzASAAIuACMyH28ARR80nzKCAVQvMB80vyIAAGcAQR80LzAR
ACEPNA8AEjHEAEUPMK8ynwEUXw8AAqIBoW8yDzBPMg8xPzKpATF-Mh-EACFPMrABACABEy8eABEw
rAESMP8AAbsBAEsBUh8wHzEfvwE-DzI-vwE2ACIBEHCiAGCgTzQvMUDFAeCAXzQvMTAvNE8xYG80
L5cBAHEAIVBP6wAQD_oBcDEQHzQ-Mj_-AQBLAQFFAVQxDzAAH8gBAssAEh8SAABPATAgLzS6AUEA
DzQf5ABBIC80fysBIDEf8gAAgQAANAAAhwGSMB8xTzBADzQ-xQHwUjIvMEBOYD8xLzI_8AMvMV5A
PzSAHQAfMU4wXRxQHQ8yDBAuQF1MMAwbDpA9G1wgDB4QLRwgPUs8YC0bHBAtaxweQC0rLAAdWwwb
LkAtOxwAHUsMKy4wLRsMGywADQwrDA4OAP8eCwwNKwwOACw7DAs_MB0cDTseADwrTlA8Ky4ALI5g
HF4gDI6AbjB_sC6ALvATZAEd8QU2TzTwAy4ADk8zDzIALsAOLzMPMg0AcA4vMw6wDj0FAvAHDzFN
oAw9DzIMQwwLPQxwHg0MDRuDG9IE8AZAHi0cMwUUBQQTHA4dGzAOPQsjFAUCAKIDCz0LMA4tCyMF
EAC1BAMtCwwwDCsMEwQSAFQrHEAsIw8AYxQDLFAuEwwAdwUUAy5ADi0PAGMOLTAOHQsRABAfEgBD
LQswLREAwgoPKhoUAx0bMAsdDBIAgjoDBAMrDEAsDgBHBRoTBF8ALwQTXwACCBAAGj0PACctC34A
C30AAAIAAHwAEyt7AAACAAF8AI--MAEscP81BEIfH-ARhC809QEuQA4PKg4PMvUBLg0wLg30AS4N
IC4N9QMuDRAZAIAN9AMODA4NEAUAMWROZAwAcC4NVF4NVC4JAPAAfisODY4NEK4LDA8MDwoJDADw
D50OCw8MHwoJrSAtUw4LKgkNUy0wHg1UHikODVQeDQsAE14JADFkTWQIACb0AwcAIv4IBABxDv0I
QP8wB9kAH0vZAGElLxDaAFQRDw8PDtsAUhEfDw8O3AAQLxcAA94AHyreAJwVFd4AEBaeKwTeAFMW
HxQPE94AABcAD94ApCMaHd0AVBsPGQ8Y3QBTGx8ZDxjdAAAXAATdABMd3AAvHk3cAJEUH9wAVCAP
Hg8d3ABTIB8eDx3cAAAXAA-cAKMUJNwAVCUPIw8i3ABTJR8jDyLcAAAXAA-cAF4L4AlWbzQPMT-k
CQAOCQL8BwHoCUAfNA8yGggAyQcCFQAB8gkAZAgkXzInCRM-zQgQMFgIAMcIMi8xLxcAETA8CBEf
KgBEPzAvNP8JARAKABsIAR0AHTEWChAfrQgPGAoCAXEAH28aCgEgHzSGAA0cCgHQCQEqAAQgChEf
XwAeHyAKADkKAs4ACSgKET-DCgMVAAYuCgGYAANXAA84CgAC0gA0LzFPPgoRTzoAAF4ANj8wH0YK
Mz8yLxcAAFcAADQAAU4KYh8yHzFfMG4AAXUBAFQKVy8wTzQPFQABWgoBkQkWMCgAA14KLz8wXAo7
DoQODzEA0PMALhkE8IT-NQnwBQ5vKA8nBAAfOQ8AADMpDycEAA8PABAzKg8nBAAPDwAKD0sAEQsP
AA_lAApb-Qjw-z7-APMALTIuOTcwMjM4MDk1MjM4DQFmLTMuNzQ5AQACHAEZNBwBkwUHBAAnAAcg
FwIATwcAJwBcAQscOEAAkRAHIBcQBwAHMAIALxBHPwAcAX8AQgcwByACAA8-ACU-EBdAvgAkETBA
AK8ABwAHEAcARyAHQgAdb1cwN0AHMH0AIyAXEH0AETeBAQ9AACASRzcBAsIAHyA6ASECdwAOfwAP
QgAbEDeCAD8QFxBAABn-AwkNBKA-KjBeIB4fPh4NEB4NAAYACI9eDSA_HTA9oGEACywxNGIA9wCw
HypQLg8_MD4NQA0eDVADAI8wXiBeDSBdkFIAHQe0AGAgHQAeDUBXCCEdIAMAD1QANlAeHUAuYP0A
HxD8ACtgYB4PPkAuUABxMC4NHiAeHU8AAFIAES0FAS9gHawAHvIAkF8qIF4PPhAeTRBOMF4wSAAH
qQAvIE2pAB-gLypAPg8_IC4tIB4dQE4LAR8d_gEuA6gAAOkABQIBBQYAEED7AB-ApwEoAp0ATyA_
HRCtADINWgAASgBBTg0wHb0AAFYBXy4dQC2wVwAa8QEKEAQQTyowbhCOAC4vOi4N0AoPBQAQr44N
AG4dEE4dME3PAwwcOW8A-wMgLypQPg86ME4NIF4NMB0uDVADAAFAII4AjmUAH41eABwOzQDHAC0Q
Lg1APg0wPh0gAwAfMGEAMQFcACBQLlwAAD0EMU5QDQ8ALy4gIQEpgRAvKmAuDzpQtgBBQC4dQAkA
ZQAuAC4dAH4BAbwAEU1uAF9QLg1gLWQAHPUEjyoAjg86jg0ubS4NUG4gfhCOEE0AD74AK-EFIE8q
MF4POhBuDQBOPQA_HTAuHUBhADMALi2_AAPDAA9iACUEvAAnAD0fAQ8JAAU-YC0wQgIuAQUAfwBu
HQBuDQDHADcPaAAEoY4NAH4NEG4NIC3GAFAwTg0QXmEAbyA_HUA9IGQAGf4GXggEEP86SiAO-ztK
Dz0ADv87TA8_BgAwAA89IQBdPiD9ShAxCpEzLjMxOTA0NzYGAANuAJItMC43MTQyODUGAC82ODMK
AdBmHATwWPVSIAX0UgMQBQAwDzoABwAfDgYAa3wQ81IeIP5SxAhTMjYuNzXfAB8zUBoBAM8A77-0
UiAE81IPOxAE81IOBQBbD7QAIaASDwQgvzVADr840TMwvzcNGTT1AdwPNg0ODdwLDQ4NPF8qPAsN
AB9aDAAD-wDcCw0ADg28Cw0gDrsNQL0-ChryAhEOBPADDxavFTAPFr8UDxMgBwDxARAPFt8VDxMA
DxY-FF8OPxQLAAESAFJPFV8OPxsAEd8XABYVIgAhFd87ABIVSQABBwAvML6PABoPEAEIQUw-KkwJ
AGE8HyocGzwLAKB8GzwKDQ4NbBtMBwAwXBtcBwAa3AwAABsBXwoNIA66GwE3QE8VPw6JQAEfAVQf
Dh8UHyMBMn8VHx4BAAkAAyMAVl8UHw5fIAE0AA8VEgAPKwEq8AFqHASQ-zlEDzXwBQ85-zdDdzsA
CQAQRX0-AwkAQA8_8AELADVHDzUJADAPPuAKALMQ8An_EA814A85-gsA1w8_wA85-hHwCf4RDzUL
APAeDz6gDzn_EvAJ-hIPNaAPOT4vNf4L8An_Cy0_DQ8_gA85Pg0fOA4N-grwCf4KUhkhPg0VAHEM
Hg0PNv4JFgCALg0LLg0PPnAYADouDQsWAAAuACEtGxQAYAstGx4NHxIAIU4rUQAgDCsiABSgjgAn
DR8MAAKxAAG_ACcNHwwAAeIAQ-5HDR8IAAIGAUT_RQ0fCQAgDz4jAUH_Qw0fCQCM-UQPPvAF_kVE
C2UzNi42ODVJBQOOAWYtMi4yOTIYAA6dAQ-bECDRExEE8AY5QDlACTsJIAQA9gRbCQAJWwkQCWsJ
awkPPgAJ6wkOBQD-GhAJywkeIAmrCR5ACYsJHmAJawkegAlLCR6gCSsJHsAJCwke4Ake8AEOkh8N
HTCGAPEPHU7ADk8QPkA_XQ4tDjAOTR4dDi0ODz4gDl0OHT4cBwABGQAA0kBADCAOjRQAEH22NzAw
Tj0HAI9APH4ckHzwLHkAHvAIRR8T4B4fFQ4gHmAeHQ4dLg0ODz4wHh1KQKggDh0OnQ4MEA7dBQB-
IN4cMNzwK2kAHtEJHxgAHsAOHxoOHS6Q9jczHQ6ACABRDz5gLg0KAFcMUA4dDgsAF20HABOdBQAx
YA6NSDggDhwFAI8MgI4MoHzwB5EAHvAKGy8dIC6ADi8fLi0OYA6tDkAOzQ4gDu0OANE4EAAlQQGD
AcAQDg0ebR4NDhwgDgBvADAOHFAHADAADGAHABOAggAvkIyCAB-RgA8i8AIODz7wAA4PJPM6cA4P
PtAOLQ4EAPAIDKAeTR5wHo0eMB7NHjAejR4sQB5NHiyqOSAsoCAAAAs7EBwFABAMJDtP8AAODHYC
GxAIAwH-Ax8bUB4PPiBeEF4NAB0eLSAeDVU_DRoxSwfxBhERBPBJjxtwjg8_YI4NcI1gjnCODQoA
L-A3SQAZzyjgAQAAqgAAAATw-wEAAuGMDy--Of-EsA4PL-7-wiAFXx7w-8EfCQD------wf8A-81
-8MPPqAO-zX-xA8_sP3-xVYFGwSdBSQxMzINIy0x6hg-MC41ogUJf6P-OQXwEf4EAAsQCq8FfwMP
Nw818A8LAESQCR7wAx0PPvAOCAAfDAcAH38HHvAFHfANBgAbMgzwBgcAHwwHACR-BR7wBx3wCwYA
GzIM8AQHAB8KBwAkfwMe8Akd8AkGABsyDPACBwAfCAcAJH8BHvALHfAHBgAbMgzwAAcAHwYHACN-
4B7wDR3wBQYAGyEM0AYAAGcBDwcAIX-AHvAPHfADBgAbIQywBgAAZQEPBwAhf6Ae8BEd8AEGABsg
DJAGAC-_AwUAE38MgB7wE-4DBAAL8gIdDHAd8P-EHQyAHfD-wh0MkAcAgqAd8P-AHQywBwCCwB3w
-74dDNAHAFDgHfD-vOkBAwgAUAEd8P_62QADCABQAx3w-7hdAQMIAFAFHfD-tuEBAwgAUgcd8P_0
ZwIi-7TKAwIgAAMIACMFHkAAAwgAIwMeYAADCAAjAR6AAAIIACLgHp0AAgcAIsAeuQACBwAioB7V
AAIHACGAHuoAD-EA---FPxP9AwQACwEQAT8R-QUEAAsBLwFPER38AQYAGwBeAQHdBA8HACMYsA0A
DwcAHiLAHc0FDwcAIxjQDQAPBwAeIuAdvQYPBwAkGQAOAA8HAB4iAR2xBw8HACQZAg4ADwcAHiID
HaUIDwcAJBkEDgAPBwAeIgUdmQkPBwAkGQYOAA8HAB4iBx2NCg8HACRvCP0HDPAOBQAUbwn9BQzw
EAUAFF8L-AXwEQQADE----_-SQweD6cVER8xMQDv8F8oKAT-PxYC-gUC-i4G-h0CTgLuAv4UBv4G
Bv4HAv4NAv4DAv4CAgYCjgb_DAJOAv4wAv4iAl4C3gb_OwL_BQb_AQI_Av4RAgYC3gKOAj4CThIG
DzIGEv4TAgYC-hYC-hcC-jQC-hAC-ioC-mMGvkIAEBAbADAHAt43ABH_JgACKwAQA0oA-wA9Bk4C
-iMC7gJeAp4G-iSJNxnCKCgErz8C-goCDgbuVgBgbgI_Bv4JEwAhPgIIAADhAAEaABCuFQCA-gwC
-hIC-jeGAKDuAgYCfga_Av4ACwF6BgI_Au4C3swA0J4C-gECngJ_Bl4G-lCvABEuvwBgCAL_HQbe
agAQR0AAMg0Cfi8AgS4CTgYuAv4eRQEQMYIA4AAG-iAC-i4CLgJ_Bv4NJgAxDgZuhgAfAegAHOFv
Pwb_MQKOBo4C-hkGfr0BIFcGigAyCAJe4QAQzgwAEN4aADBeAo5rABcTzQARfpQAoBcCrgK_Av4T
Ar7dAXRVBv4LAv4UOQFg-gUCfgJuOQAgFgK2AEEBAv4LqwAxDAJOHQKBWwb_IQY_Aj4YAOEFAv4S
Bv4PAv4LBm4Cng0AHyDTABwgjz9cABEumgAQAsYAcEQCfgaOAs53AgGUAGH_CALOAh5PAhAEaQAh
-gTUAUEGAv4cEgACzQEQLVUBQf4CBq7PAkACAv4bTwAQvukAFQbdARDeTwBSBQKOAi4VARIelQIx
rgJOSgAQFyEBMB0GrgcBQR0C-gPaAFAFBv4lBkQAECIkACBOBk0CPw0CruYAHGD-PwsC-m9gADEi
Bp6TABMWZAFBAgb_HtEAETAmAhAScwGQ7gL_Mwb_gwKOrgAi-gAqAEGuAv5OEABgDAKuBv4nVwIz
fgK_RgAQNJgCAEkAzywC-g4C-lEC-h8GjqQAHhNssQIwAQKejwMYFkACEAHzAzEGAr6sABALjgBB
Qgb_Dk8DEAEvAUCuBv6RsQAkDAJwASH_MzYEUAwC-joGEgAVFj8AEDauAEG_Av5SYwJPLQL_LqsA
HhAZiQECtwFBIgL_BqUBUAUC-g8GCAFRHQJuAq70AxA7ZwBSEQI_AgaCBADHABA6FAABIgIQbmwE
EC4rABECzAARLYABEQxWABEcpgFBCQL_BCEDEARkARIeXwMCcwFQDAbOAo6FAzFEAl5QAE8NAv4a
yAAeQjcG-gk8AzEQAr5BAxAG3AMBYQNBAwb_XHQDAfUBIf4FOQUQAScAExaEAACtAwQNABHeqAAS
RtYDQAQC-jKBAQSRARAEWAUAvAAFOwBBHwL_JkcCECDEABACUwRPKwL_HsEAGQDqMNA1bvAEHi8R
DxAPER8Q-Ff1GB8Rbw8fEB8NwA4fEa8PDxAODw2gDg8R7w8ODw2ADg8R-w8BDg8NcAoAASlYgBFv
D05tDg8NCwBRXQ5MPi0ZAIAwDgwtPlwOLCgbEA0NAEEOTB4cDwAQC9RWIAwtY1eRPj0OCwogDg8Q
DgACHgARCh0AJGwuDQBkCS0OjD49CwAAIVoADQBiMA4JHU48MgBgGjAOCW1_FgCgUAsJ-QEOCxpQ
C6gb-xMLCnALDu0OCxqACx6tHgsaoBsebR4bGsAKG24bKvAACmsqm14icDSPE-ADDk--YKAWHxUO
8AEODxaPFmEARWEQrwkAUMAODxbPCQBQoA4PFu8JALGADg8W-xQBDxUOYC4A9Q8efQ8VDkAODxZ9
HhwOLR4tDxUPEjAODF0eHA4cLgwlAVY9HhwOfBUBNBwOnA0AMx0O3AsAJg8VDAAHFwBCCS3ePQkA
IP0FMAEQC2JVMgsaQBoBJBpgGgH-Eg7NDgsaoAsOrQ4LGsALDo0OCxrgC44LGvABixrwA4rwFh8B
HVAaLxjwCVZfsBsPGg7wBw4PGy8ZCgBRBQ4PG08KAFEDDg8bbwoAUAEODxuPCgAg4A6wNWAeDR49
Dxo-ASAbHW9XYi4dDxoOoPoAAAIAcx0LDoAODD0OAJEtCw5gDgw9LgwOAEI9Cw5AHAACEAD0BE0L
DiAOC00OHA5sDl0ODxcQDgwNABAK0FtAC00OnAwAcAkQCg49DpwBYCAZIAsAcIwOPQ4KGUALABFs
CwDwDmAKDi0ObA4tDgoZgAoOHY4dDgoZoAoOrQ4KGcAKN1_xGeAKDm0OChnwAQpHADHwAwouAO-w
BQouChnwByoZ8AkpsEgBHeBN-x0BoA7PIA8fDyAfH0ICkSD-HgEPHw8cYAsAVQMODxxQCgDFDzVA
Dg8gTx4uLS5NDwBAPQ4sLi8DAhAAZAwtDqwOLQ0AVB0OzA4dDQBUDQ7sDg0NAEUO-AEeGABWLA5s
DiwcAHYdDgwebB4MOgB2LQ4NDmwODVgAX00ObA5NDQABKg8fGwAWjhkALP0DCwAQUAsAEAFkXv8D
NWAPHP4BCx81gPsBGqD6AfAvkQIf8QUi8AgeDyQPJQ8kHvAEHh8lLyMfJO8EICVvCgBQsB4fJa8J
ABFwEgDxDg5tHyQeQA4fJY0OjQ8kDQ8hMA4PJY0ODA6NDg8hlwMJDQBffQ4sDn0NAAJUXR5MHl0N
AFQ9HowePQ0AXx0ezB4dGgACCDQALw8kXAAGKA8khAAKDgBgDQ6NDo0eDADxBjAfIR5tDm0eGx81
QAobHq0eGypwCgUFcSqwChseLR4HBc8bLhsq8AQKKyrwCCqmAg0OtwwPMQB7D9YGLEVfD05d1wYE
zAbBUA4MHT4MTjwOHQ4L2AaBHQ48XgwuDA7nXgATAzNOHB4QAAKEBVMMXgwePIgFIg8QEAAKIQAl
biwPAFQJHQ4Mji4AAA0AIn4MAgYA5AZDDQ5MPjoAERrzBgIOBlBQCwldfvoGD_kGgkN-FB5t6gYR
bd8GER3tBgDeBhAemF0hHQvtBhA9DwAQHrJdEB2TBQLiBjEeDH4QABIJKAE1HgyeDwBEDQ4M3g0A
GAsNAAoaAAIDBwELAAADB0AKCTAK_wYB0wUi-QHQBRLtzAUfzcoFABCOyAVfihnwA4n7Bk8QD-IG
Ey3-BhANtwYhLg0ABwDSAAEcAUMNCw6gCQEBvGURDQIHFS0QABEdBAcRLbBfAXBiAQYHASAAAxIA
ET0IBxA9DgBCbgwOTQoHBg8AAgwHID0OaAESTQ4HES0NABI9EAdALQ4Mjo4CAT8BQi0ODG4NAEFg
Cg4dDQASHUoBUg0OjA4NTgE-DY4NGgd0Dw4HDSAMLoYDBxIHOAyuDBQHNwzODBYHMwzuDBcHRhz_
AQwXAHYuDG4MLgweNgBXDhxuHA46AABLZQArAQdcABAtfgEVHnoAET0gABU9BQcKEAASDJQIBUYH
L45NLgduQ08jDk0wB1FdDgwOXTEHcRx9DgwOfQsxBxAMDAAAa2gC2QMFDgAArgMQbTQBIg5tDQAQ
XRkFIh5dDQByPR4cThwePQ0AZR0eHI4cHuIDXxzOHA4NGgAACDQAGQtOAAFoAAJ0ABgLgQAJDQAA
AWmRDA59HgoJMBoezADwAR4aGUAJGh5NDk0eGilwCRrIav8KKbAJGh4tHhop8AAJGi4aKfAECSop
8AgpsP4Gew8xAB4PBQ7-KDA1bxM3AQMcBwE3AaIWbxQfFR8SwA4fHQciDxIWBzMODxL-DUUODxJw
CgABNwEBCw5GDg8SUCwHARsACQwOBC4HJw58OQEGDA4PAQ4FDQwOMTAOCQQOAwgADykBVRAYKQEQ
GxYHIR8aKQHAG28ZHxofF8AOHxuvDAfBDxegDg8b7xkODxeAKgexHg0ebQ4PF3AODxvtDVAuPQ4P
FzABAcMNAAIAABEACQ8AApoJE00NDhFNmgkHDQ4BBwEBEQATbA0AKA8aDgASDAMOAS0BBwsAUk0O
jA5NOgECvQwmCxoLAABAAT89jj1BAU8QHUEBA_4GAUEB8wwgbx4fHx8cwA4fIK8eDx8ODxygDg8g
7x4ODxwNB4AODxxwDg8gPwIHAjsGGVACBxRQDg4COAFTLQ7MDi3OChPsmAogDA20axENDAAzDx8d
Cg4DHAATLQgOFC0zAQIGDhI9DwARXWcPDzcBbRAiNwEQJcoGCMAGQB8hwA7vDYEPJA4PIaAOD-EN
gQ4PIYAODyV9YA1AcA4PJcwtEW1QDRJQvgYAGQAQUFQGMywObTUBApANJAswtQ0lCwrNDQALACIP
JOYNCxcAFgktABMJQgAAKAEDWQAAKAECbwABKAEChwAQCyoBAJwAASsBP20ObS0BDg9mBnsPMQAe
AMABIBouSwtREA8RDxBLCyARL4sG8wTwAU4PEU8PDxBOoA5PEW8PTxAOkwZFDxAOcAoAOw81YAwA
ANoNBQ0AUU0OTD4dDgAB3A0AoQYADwAXQKEGAzYLAJ8GME0LD8VGEz2eBhU9NAsAnwYUPTQLI4w_
MgsRHZ8GAjILIQsNnwYAJQswUA4Lsw1-CglgDgv9AQgAAPEAcApObU4KGYBKDk0OShngKQs-WfAB
KQspMBovE0UBEBWrdQFFASAWL5kGAEUBUBZPFA8VRQFIFm8UT6AUFXAKAAEsAQkMAAPZDQINABFd
rwYyDQ8VRwETTa8GA_wNA68GA0cBAK0GUD0LDxIQYgEV3EMBAwwAAEEBAq0GAkEBE949ASL9ATgB
CScBDzcBUg-HDQMiAU7HDQA3AVAbbxlPGjcBhRv-GQEPGg5wuQYiDxohAQS7BgMQAAF9BgACAB8t
EQADF1DLFE8PGg5AzBQGHwvMFCAUC8wUJFAOCwAAQQEAhwUPUgFUEB1SAVEfDyAPH1IBICAvuAYA
UgFQIE8eDx9SAUcgbx5PzQ0lDnAKAAAuAQTMBgUPABEtzAYTLRAAggwdDqwOHQ8fSQEB3BQgDx9F
AQHQBgE-ARAdzwZBHQsPHIUCAs4GEy1AARM9zwYUPUQBBM8GAUgBArkGD0gBcxAiSAEBnQ0BSAEg
JS-JBgBIAVAlTyMPJEgBUCVvI08kSAGSJX8jDn0PJA5w2gYiDyQ6AQLcBgMOABkMDQBRXQ4sDl0N
AATrBkMPJA5A4AYChAJwHoweTQsPIUQBNB7MHkABARcAAjwBAt8GATgBAtQGATgBAVoAAjgBIm0O
-Q0ZYAsAAN8GBwkADzwBEA_zBnsPMQAeAM8BHxh7DQkA8AZWHw8PED_DDRM-EwACFwADjw0IFQAA
BAAQLxkAH2AZAAACBAADpA0EXgANOgAA2wgGHwCRDw9OHQ8QHQwdwA2xDxEdDB0MDQ5LPj0qAMEQ
DgsdDA0_Ww4rDg0jADAQDgsJAHRLHhsOKw4MHgKQLQwOWw4bPi0MwA8hAA5DADNbDhs2AAATAAE2
ACJrLjQAACMAeC0MDos_DB0yAFF7DisOHTAAAH0CJE47PwAgGRAgAFEdDB1_DT4AYzAKDC0MHQIA
AEoGNDAKDg8AIB0MqQNGUAoOLQ8AAMwSFT0NADCACh4NAFEtHgoZoPsPURnACRpu_Q9vainwBGmQ
5AEeDykOCl8vFE8VLy0OAFAfFM8VHw0AAoMHEwMjDnMPFP8VAQ8UIw5hDxafFB6NHw7hDxYNbxUe
HxYOLxUeHA0gABEQUw5QGw4bLgvzCxASnAGFPB4bDnsOLA33BFIbDpsOPWQBYg0cDtsOLHEBTwst
DtsYAAFCDD3eTYEBQg38Aw18ASL9BXUBMA38ARIAA24VAGUBOB3MHW8VPx4tTFcBOQ9XDgmWPxkP
Gh8ZDxovXw4EEwAABAAUP2sOFy8VAAUZAAC8BwQRAIEeDR4NHxkNPG8OYA8bLA0MDlIBQAwNLA6S
DjEwDgtFexEbAgACFgBjMA4LLA0cEwAwHA0cbAESECgAIS4LFQARDRYAMhAOC08AEws9ADEcDQxl
ASILDFMAUWsOHA0sEgABMQAAEQACOgAiCQA7ABebNQARDTUAGZszADQNDosyABMQEQADVABAGRAO
DaUABVIAcDAKDSwNDI7CAAHDATQ8DRwCAALMAQQRABIs0gECDwASPNgBECwLAALaAR9s2gExD-AO
CQA4CBMPBAAWL-wOCBcABh8AAxAPFx8VAAwEABAfJQAfYEIABAlKAABBDwYVAKIuDQ8fDS4NDA0M
6BVwMA4PIB0MDVxZMCsODJkEMQ8cMB8FIg6rqAQBBgJBLQwOy_UEASoFMA0O67kBBAMFQw77AQ4O
AAFYAFgrDmsOKyEAgg0MDgseax4LHwAEKAAwDA0O2QE2DQ4NFwARLQsAEWsTABItsgMXHRMABTcF
CRMAAcYDAAIAE45KAAAKAgFKAAUCABMt2gMnDA0CAAPmAxgtJgAB8AMCDQAPSwU4D9MPCQAKCRMP
BAAWL98PI_8j3Q8XHyAAYg8jDg0PJLwAMQ8hYOAdEY3iD0IPJQ0MAgAzDgsOCgARDQkQYTAOC40O
CycAAtkBA6QBBQQBAeEBVI0OKw6N3wEAAgAgHkvaWgWaAWULTR6LHk28AT8eyx4aAAQPPAAAEwxd
AAXOAQqAAADSAQKiAAbKAQvIAAHSAQDrAAjGAQdCAAesBQ_8AQwPTQl7DzEAHg9_CXQ4Tg1fdAkA
ogUwTxE_cwcCbwmEHA0_C047DixuCYAcDQ47XgsuC1p6AW4JAeABME4bHhQAEyzWB4UsDgteCx47
DhsGIRwNEgADOAADYwZSDA4Lbis2ACEJAMp6G44zABB_MQARDDIAAD8GNA5LPkIAAD8GURwNTnsO
bQYBPAZSHA1_DSxgAiQcDQIAEjxoAhYsDwANPAYADQAfLDwGJB84bQlNR38VHm1uCSF-FGIJMxQe
LHQJMAxNHnsBERtTfAFzCSALTBIAMB4rDlkBAXQJIAwtZH1WfgsOHQygATUeC556AVIMDQ4L3h8A
AJoBERwOAA8cAAJiDSwO2w48jwFSDB3eLQyKARL8gQlSDQz9AQyCARP8gQkyHM0ccwES7G0BLyxN
awEmD4EJSAEGHxAdkBcCfAnDHQ8aHQ4fGw4cLg8a6BcAIxECER8jCy15CTYMHQsXHwEWAADIFicL
DSsfA5QFASoABCEfAAwAEApBDAAWhQQkHzMLHQtiBQA1AAIbHzENCy0TAAEcAAITAAE8ACIJAD0A
F543ABELNwAZnjUAER05HwIzABMQEQAEVwAQGQoIAFcABVUAcDAKCy0LDozJAAHCATI9C44ZABBQ
DAARHQIAEi3MAQIPAAOsDBAtCwAPpQUkHzh7CXsEUgkTLWwJFw1OCQRkCQFQCSALLrgEB2MJVQ4L
rgsOggdkLQ4LzgsOYwkwDgvuxQQDpwFkDgv_AQsO7AGHDA4LLgtuCy4hAABfAFAOG24bDmEABSgA
ACoAQw4LbgtLBwVjCVEeC24LHu8IBJMHASYABo8HCxMABJcHIw6LSAADYQkSjkQAD1kJVB84WQkz
BzgZEh1MCVgODyUODFUJM30OCzkZBA4JAEgBFA4MABEK0wERfRQAMn0OCt8BA5cBBEkAAT0DEG28
BiMebdMBABkJVRtOGx4NjAGCCy0eG44bHi2ZAQBVDT-OGw4cAAQOPgAVDF8ABMYBAoMAASIABMoB
BaYABMQBDc0AAMwBE30kAAXKAQR9CQPKAQC8GQ-CATEPLglcDzEAHg9YIA4CDgkGBAADYwkEGAkJ
MQkfgBkAAgCcEgOHIAQRAA06AADIFA8fAAUDQAAAjgkXDxUAD0QAAB8wIwAKA0gAHzClAAQHSAAf
IIwACBUvIwAfEGsADgJKAA9tAA8HEwAPbQApLzAOIwAMER8jAB8PkAALNFAPDRAADyAAAACmjz8N
Dg_sAAdEcA8NDhMACRsAaB81gA8NHhcAAFwG-w4NHzWgHw0ebw8eHw0fNcANHw1uHC3wAA1sLfAE
bQkpPDAPFI-zkAsNKTIPFM8WAAr6LwPBEwP9LzL-FAX5LwIZABMDbAoSIBsABQwADxwACB8VHAAY
FBUcAEYwDxIOShRiHzVADxIOlCIAQCYiEg68AAEbAFKADxIOzwsAEaAaABSPGgBSwA8SDo8LAO-g
DxKODR818AGNHPADjDcpOwQyCgI7KRMPDgACEgATASoABRIAF_AxAAUVABvAOAAEBAArDqA-AAQE
AC4OgEcABh0AH2BPAAQEBAAvDkBXAAQEBAAAR1NIHxkNHAIAEA7UGwBfFBccAgARDOoKA9sTBgIA
AnoUMRAPF-4TCC8AWgsfNSALFgAC8jEXDD0AAfsxGAw2ACcagBEAAg0yFQwtABTADQARDBkyIw4M
JQAx8AEL8BRhCxrwAwsOCADfBQsuCxrwBysa8AkqsNQpOwQzCg8EAAsNpRMPLQAMAUQpDy8A--MH
EwAPXgBvBxMADy8ADgD6Kyf-HvsrABEHX-0BHKD8KTNOCBcMBh8MAzszMf8jAxIALSEwehUPBAAD
IR8jZRV1IA4PJf8jBQwADzsAzB8kOwAzHyQ7ABtFIw79AyA0Ei28DQKPDPEAHyEfNUALHyEerR4a
K3ALmwwxK7AL-Cz-ASvwAAsaLhor8AQLKivwCCuBHw0PpAz-IwRwHxMNmwwQDZAOUg4LPA4MhB8A
jwsTCxUAQk0MDw0LAAA7DwBeH1ILbQ4KHQkRAPEiAHowMm0OClUfANEpMgwdDBIAATUAIgkgNgAB
EgABow4AJQAPNgACEA1xJCIKHjcAETAlADMMCk4RACIZMCUAQR1KHh1GACFQCiEAIQ1ODwAhGVBe
AAaRH0IJcAoODQAUHdEQAg0AHx0PDwUPsgtrcV8VTl0PFA2yC6RvFA4PFj0ObxQNtwsgTQ5MJ0YN
DxJNagszFk8ULAAmEk8VAOIPFD0ODWwODxIOLQwOCxQAEEwSADILDjwQAACpmwEQAAAhABoKIAAQ
Ch8AEU0MkhMeHwByDWwLTgseTN47YgxdSx49DPAJM2xOTOgJE83gCRPM2AkijQzUCR_M5ztKD7UL
UDAPGU4oFhAMrgEQG2gCIQs8VQIiDmAgAwEfAxEXEgAZQB0DIgwO5QIFCgMBEBYlCy33AhIdmhIB
LRIWHR8DEi3fJAtEAyQZIBMAACADAe8CEkASAAAfAxIt9hEADwAxSh4NMAASgA8AM04MHS41BQcD
FMANABINODUBDQADPDUC_hMPPjVRBmAID2oLfBBOHxYFCxYTQCEWIQ0MHQUIGQACuBMBAAIVHGgU
AxcAAQUCAhQAFAkTAAPgAQ8TADEDJwUKFAABCgIUDBQAIgwNAgABEAIKKABdDQxODA0pAAgCAA8Z
AAlRUA4M-QFwAq-_AQoZgPoBGaD5BAqnRX8jTn0NAAZfFhY8YBYCGwARXegBESEIKwHzBgbkAQLQ
BiILTagBAM0kBCEAA7kBDyEAFCIMXdYBByEABdQBAyIAJH1KdDYCHgAEygETHWM2Iv0DYDYC9hUC
awkCZjYfrWQ20xQYZAki8ARiCZDwAB8Rvw8PDsBYNjAPDqACCSAXvhAJYIAPER4nzgoAcGAPES4X
3h8KCVIPEf4ED-8I8AMPEX5PDn4dDw0wDxFuDUw9Ph0XAPEEEAw_PVwNLA0uLQ8NEAw_DUwdHA4A
8QMLDzUADD4NXA0cPT4tCwoADxANAHANLA0ePQsKGwAjbC0MAGMJPg2MPS4KABB8IgCCTQsKEAku
TTwuAFAaEAl_fRQA8AEw-gFNCxowDe5dCwpQHa5tagcwHV6NaAcQ7ZIxEa2QMRZtkDEfkC8BHwO5
CCLwBMAeMfAAH_pkEMC2HjAPE6C0HpAXvg8TDxKADxYvAWATDxJgDxYvAYATDxJQDxb_BBMAAC8B
8AQWrh8Tfh0PEjAPFo4dHA0uHR4dGQBwEAx_HRwNHMUawi0PEhAMXh0cDXwNHjEBcU4NHA2cDR4x
AWMVPg3cDQ4tAQMKABYJCgAxTt0OJwEh-gMiAS-_AiEBVBIbeB4i8AR2HpDwAB8bvxkPGMBINjAP
F6BTCJAXvg8YDxeADxshAfAGGA8XYA8bLhceHxgOHW4dDxdQDxtezBIwLU4NUBNRMAxuDRwCAEg_
HQ8XDgAQCy0BIm4tBhNQPi0LEAw4AAUPACEKABAAEmwMACIPGg0AIi49GQASnAoAFgkKADNuDYxa
AhJuKAASGgoAAVoCNm6NDjoBLwsNOwFDA-oHIvAE3R2Q8AAfIL8eDxzAQjYwDxygtR2QF74PHQ8c
gA8gOwFgHQ8cYA8gXAKgHQ8cUA8gXi8dLjYBAJIdcA8gXg0sLSw1AYIcMAxODawNLjEBME4NzEEC
AIwDMewNDicBQC4N-AEDAaAPHz4NLA1sDSxNFgBzTg0MHWwdDE8CEF48aCMNDpIDEH4iAQwsAReN
hAMfCykBSgMQHSLwBPsGkPAAHyW-Iw8hwFUmMA8hoNUG8BEXvg8iDyGADyUeJz4PIn4NDyFgDyUu
F04Nfh0PIVAPJUonABYAAGECMZ4NDBcAcjAMjg0sDW4oARCeCwAAKAFRfh1MHU4oAVBeHYwdLgoA
ZA8kPh3MXRMAAxMBQR1MHT4KAAA6ABFOHQEATwARTh0BAGMAABQAEDAJABE_IgEyng0_JAE-fg0e
JgEQDzwGew4xAA9tBlJTbk8Ofg1uBgRkBnQwDC49DE084AJBLg08XQMgAOQCYy4NDE0cHQ8AAeoC
YgxdDB08DcYBEhAPACMMLeUCAB8AJG0sDgCECS4NDI08DR4MABF9KAAB2AFDHg1MPTYAEBqJBhF8
GABPMH59DoAGjlOeHxN_DYEGBncGQDAMbh0oATIcDQ5GARBeDwAgHSzCCgBIAWFODRwdDH0NAAFv
BkMMHQydDgBxDxUuDQzdDDMEBQoAFgkKAEA_DdxdNAE-Pt0OiQaJEQ5-BhMNjQYRDoEGAHEGEVAI
BQALATA_DQstBBFeDwAAUAo7Lh0LDwAQCoMGIywNEAACOQEACwAFEQADVwUjDG0OACQPGg8AIx49
HQATnQwAGAkMAEReDQyNfQIjXg0wABQaDAABfQJAXg2MXVMBL17togaAEA6aBhI_pgYSTpgGAqcG
APIAEC1zAxEuqAZyPg0MrQwNHoQCQz4NDM2AAlIuDQztDKMDAE0nATsBEB_TJGMMbQwtDD2VAnMN
HG0cDQxNPQEBGwEEzAMQXmUBHx1BARE-C17tugZsUz4PIm4NvAYAyS4ADQBAYAwuF_IAQG4dC1BQ
jAEXAAGQAgITLhBujAIAaDMxDA1eiAIQftcEALgGAcwDIk0cuQZyDD4dHI0cHbkDdSQuDRzNHD0X
ABJdKQEALQAE0wYARAAC6AcBXAACzAYCcgAQPjQBAgsAEC7MAxALDAAhLl08ARBueAEPQAEQD6MG
ew8xAB4A0wEgNy6WDwAOPTAPHw20FkAQDxEvCwBAAB5PEBI9YB8NsB5vEIdD8AIfDXAejxAPEY8P
Hw1ADq8QD8VD8AsNIA0fEZ8QDxGfDx8QDRANHw8fEW8QHxEPECEHwB4NDzUADT8PHxEvEPssIB8Q
BAAQPlgN8AkNTw8vEW8PLxBODR81EA1fDw8Qjw8PEF5AIgkOABEwDgARbw4AGR8OADkPNUAOABFQ
DgATTyoAAA4AEW8YACBgDRQAMG4MTvAh8AENLw8MjgwuDR81cA0fDwyuu3BRNYANDw_VR58PNZAN
7g0boO0frCLwAFwvE-AIHh8VDxYO8AUePwgAoA8S8AIeTxUPFh61BjTgHm8LAHDAHn8VDxYuCwA0
oB6fCwBwgB6fFR8WPgsAEWALAAA5FgEPABFADwAULw8AIDAODwAXTw8AJRZvDQBVDxKeHxUcACBA
Hw8ABToAIVANEAADWQDxGQ1wDRyeHxU_DA2QDRyeDxQuDA2wDRx_Cy4MDdANHG4LHgwN8AANHE4J
AEACDRw_nh--A-AEDRweCwwd8AYNLB3wCS3wLuUVKHEZDvAHDh8arBVhF-AFDi8aiRVhF-ADDj8a
3ithF-ABDk8aIz3wARfgDl8aDxtfGQ8XwA5vGg-0SiEXoAoAIg8ZDgARgA4AEy8OABFgDgATTw4A
EUAOABNvDgARIA4AE48OADAQDm82RDIbXxoeISJvGUNSEG4PACMQDjUAAA8AUB81IA8XEAAUTxAA
EkAQABQvEAASYBAAFA8QABKAEAABDACAoA8XXxkPGl4MADHADxf4PQAMADDgDxfKLBA_DABA8AEP
F00AES4NADADDxejFhEeDQBCBQ8XD-wsUB818AcvBgA-CS2wrBUj8Rj-HwEOgA8cDyD-HwEPIA8c
YA0fHg8g7x8PIB4NUA0vHg8gzx8PIC5pA5E-Hg8grx8PID4OAFNPHq8gTgoAMA8gj2o9Dw4AZjSf
H06iADIfrgygAFIvHgzODLkAQR8eDO7lA-8FUA0M-gEMDRtgDf4BDRuA-QEboPvJFCAWIMkUgSMP
IfAFHi8khhQQIekDESQ5PfEAIeAebyQPJT8jDyGwHo8kQz2SIZAOjyQvJV8jCEQgbyTlFCBfJMIN
MFAOHy4AIiQfaz0CEwARLyoVAGcHQA8kPg8-HRAOXgAWfyIAXz8kDyWPHgBGAN8HMg4NLiAAEE3D
AEIdPg0eIABAXyUvI20KICEfDQAwIy2OCgBwcA8hTyMNjuod8AOQDyE-Iw1uHyEvNbAPIS8jDU4L
AHDgDyEfIw0uCwCB8AIPIQ8jDQ4MACAFLwYATwgs8AIfB3sPMQAeBVAHQR8qDxFOBwAJAGEPKg8P
HxFSB3EfKi8RDyovDwCRsB4fKk8RDypPDgCRcB4fKm8RDypvDgDBQA4fKo8RDyqPDx8RYgdhKp8R
Dyqfxx0xDRANrQdRKm8RHyqXB0EQDg8PaAcBugcgKi8YAAErAAJyBxEuHgAANgBCPw8vKhAeER_i
BzE_Dw98BwH5RAMqHhAvcCkhEU40ABMgGgATDxoAFR8aABUwNAAGFgAVHxYAVQ8PLxAvLAATQBYA
NS8QPxQAFFAqAAUUABMfFAATbyIAImAN6jRRbg8PPgy4B5EPERwPEI4MHgy7B5IPEQwPEK4MDgy_
B1ERDxDOHL4HH_y_BywQJ7sHYRcfFgcPFLwHUBcvFgcODAAAvgclF08NAHLAHhdfFgceDQBFoB4X
fw0AEIANACIXLg0AEWANAEMPFA8WEQARQBEAFi8RACMwDiIAAQK7BxcAIZcfFAAXHxQApg8SHxR_
HxYfFC8VACNAHxUAFxVmACNQDRYABRQAAOkHARIAMS4PFO0HURt_Cx4L7gchG14KAILQDRwbTgsO
C-IHIhsuCwBiAg0cGx4b9AcfK-MHLxAXqx1gBw4HDxsHxwYB8gdSBx8bBx8NAHIDDgcvGwcvDQBx
AQ4HPxsHPw0AceAOB08bB08MAHHADgdfGwdfDAARoAwAAPwHAhAAEYAQABUvEAAUYBAAFhokABVA
FAABdgADFgAXIBYAFS8WADQQDmcTABcfHQgzDxpf4AcEGgAyXg8ZKQgCGwAJFwABMQgCGAAJFgAU
QBYAGA8WABVgFgAGFAAUgBQAAxAAEKAQAAI7CBMZSQgA-TQAPwgTGU0IIg8aQggUGVEIA3k_JA8Z
VQgiDxpKCBQZWQgQHxEAD1gIMKH3AQ6ADgf-IAEH-B2hHw8eB_8gBw4PHt4dgB8fHgfPIAceDwAC
mCZ2Lx4HryAHLhEAVD8epz4NDQCZPQ8gXQ8fHQ8gEwBWTQ8fHQwUAJYMPQ8gPQwdHAsRAAB7Hxgs
EAABBxEIEQBYDQwdLB0RAEgMHSwtEAA4HSw9DwAAWhYGDwAVqwsAVC0Mrg0uDQBUHQzODR4NAACu
mxEODQBjUA4M-gENTydf-QEKHzVLHSYCgggxFw8kfwhBFw8lB_kcESGuBCElBxIdECGtBCElB0gd
gSGwHhdvJQc-DABxkA4XbyUnTwwAYHAOB28lF2oIE0_JCAB0CHAHPyUXDyMvOh1EJT4PIxkAYB8k
Bw8lF00dAhsAEC4bAAAdCAC7CAJ1AA41AAMcCQ81AAMvDyU2AHqYHyQfJQ4PIx4NNgBwHQ8kHR8l
PsUBA-sIAOA9JB8l-ghzDyRNLyVuHQEJYw8kPQxuHQMJAHEQ4R0bLzWwCwwdDC4dGyrgHjvQHRsq
8AILHA0bKvAFKxtbD-gIsh7-R7IPNADaDmYBDzEA------pQbT02fX0=
:: gfx/1.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA5LTEzIDEzOjUxOjM5Iixtb2RpZmllZD0iMjAyNC0w
OS0xMyAxMzo1MzoxOCIscmV2aXNpb249OV1dbHo0AG0AAAAFMQAA8xR7WzBdPXtibXA9cHh1AEMg
EBAE8PAsZmxhZ3M9MCxwYW5feAgAz3k9MCx6b29tPTh9LDEA----------------------------
------------------------------------51BtPTh9fQ==
:: gfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTAzLTMwIDA1OjM5OjM0Iixtb2RpZmllZD0iMjAyNS0w
NS0xNiAyMDoxMjo0OSIsc3RvcmVkPSIyMDI0LTAzLTMwIDA1OjM5OjM0Il1d
:: map/
:: map/0.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTAzLTMwIDA1OjM5OjM0Iixtb2RpZmllZD0iMjAyNC0w
OS0wMSAwNzozNDozNSIscmV2aXNpb249MzA3NV1dbHo0AMEAAABZEAAA8Ah7e2JtcD11c2VyZGF0
YSgiaTE2IiwzMgMALyIwAQD-------_x0zIwMDAzMDAwNDAwMDYMAC81MIAAWxMxCAATNYAALzYw
AQBbFzb8ABMxDAAPAQBVBHwBAAABEzAMAA_AAVkTMXQAEzB4ABcxjAAPAAFVEzaEAAQMAC81MAEA
--------nvEJIiksaGlkZGVuPWZhbHNlLHBhbl94PTQ3CQDSeT0wLHRpbGVfaD0yOQoAEHcKAIB6
b29tPTF9fQ==
:: map/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTAzLTMwIDA1OjM5OjM0Iixtb2RpZmllZD0iMjAyNS0w
NS0xNiAyMDoxMjo0OSIsc3RvcmVkPSIyMDI0LTAzLTMwIDA1OjM5OjM0Il1d
:: pal/
:: pal/0.pal
b64$LS1bW3BvZCxiZ19jb2xvcj0wLGJsYWNrZXN0X2NvbG9yPTAsY3JlYXRlZD0iMjAyNC0wOC0y
MyAxODo1OTowOSIsaGlkZGVuPXtbMF09ZmFsc2UsZmFsc2UsZmFsc2UsdHJ1ZSx0cnVlLHRydWUs
ZmFsc2UsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsZmFsc2UsZmFsc2UsZmFsc2UsdHJ1
ZSx0cnVlLHRydWUsdHJ1ZSxmYWxzZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVl
LHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0
cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1
ZSx0cnVlLHRydWUsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsdHJ1ZSx0cnVlLGZhbHNl
LGZhbHNlLGZhbHNlLGZhbHNlfSxoaWRkZW5fdG9nZ2xlcz17WzBdPWZhbHNlLGZhbHNlLHRydWUs
ZmFsc2V9LGh1ZV9vZmZzZXQ9LTAuNDc2NDIzNTE0OTI3NjcsaWNvbj11c2VyZGF0YSgidTgiLDE2
LDE2LCIwMDAxMDEwMTAxMDEwMTAxMDEwMTAxMDAwMDAwMDAwMDAwMDEwNzA3MDcwNzA3MDcwNzA3
MDYwMTAwMDAwMDAwMDAwMTA3MDcwNzA3MDcwNzA3MDcwNjA2MDEwMDAwMDAwMDAxMDcwNzA3MDcw
NzA3MDcwNzA2MDYwNjAxMDAwMDAwMDEwNzA3MDcwNzA3MDcwNzA3MDYwNjA2MDYwMTAwMDAwMTA3
MDcwNzA3MDcwNzA3MDcwNzA3MDcwNzAxMDAwMDAxMDcwNzA3MDcwNzA3MDcwNzA3MDcwNzA3MDEw
MDAwMDEwNzA3MDYwNjAxMDEwZDBkMDEwMTA3MDcwMTAwMDAwMTA3MDcwNjA2MDEwMTBkMGQwMTAx
MDcwNzAxMDAwMDAxMDcwNzAxMDEwNzA3MDYwNjBkMGQwNzA3MDEwMDAwMDEwNzA3MDEwMTA3MDcw
NjA2MGQwZDA3MDcwMTAwMDAwMTA3MDcwZDBkMDEwMTBkMGQwNjA2MDcwNzAxMDAwMDAxMDcwNzBk
MGQwMTAxMGQwZDA2MDYwNzA3MDEwMDAwMDEwNzA3MDcwNzA3MDcwNzA3MDcwNzA3MDcwMTAwMDAw
MTA3MDcwNzA3MDcwNzA3MDcwNzA3MDcwNzAxMDAwMDAxMDEwMTAxMDEwMTAxMDEwMTAxMDEwMTAx
MDEwMCIpLGxvY2tlZD17WzBdPWZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZh
bHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNl
LGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZh
bHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNl
LGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZh
bHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNl
LGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZh
bHNlfSxsb3djb2xfaWNvbj10cnVlLG1vZGlmaWVkPSIyMDI1LTA1LTE2IDIwOjEyOjQ5Iixva3Bh
bF92ZXJzaW9uPSIxLjIuMiIscGlja2Vyc19tb2RlPSJsaW5lYXJfaHVlIixyZXZpc2lvbj03MTc3
LHRlc3RfY3ViZV9jb2xvcnM9e1swXT17MTUsMzEsNH0sezMxLDQsMjB9LHs0LDIwLDIxfSx7MTAs
OSwyNX0sezksMjUsMjR9LHs4LDI0LDJ9LHsyNiwxMSwyN30sezExLDI3LDN9LHsyNywzLDE5fSx7
MjgsMTcsMTl9LHsyOCwxMiwxNn0sezEyLDE2LDF9LHs2LDI5LDEzfSx7MjksMTMsMTh9LHsxMywx
OCwxfSx7NywyMywxNH0sezIzLDE0LDEzfSx7MTQsMzAsMTh9LHs3LDYsMjJ9LHs2LDIyLDV9LHsy
Miw1LDIxfSx7MSwxLDF9LHsxLDEsMX0sezEsMSwxfX0sdGVzdF9tb2RlPSJjdWJlcyIsdGVzdF9y
YW1wX2NvbG9ycz11c2VyZGF0YSgidTgiLDEwLDI3LCIwMDE4MDgxOTA5MGExYTBiMWIwMDA2MDAw
MDAwMDAwMDAwMDAwMzAwMTYwMDAwMDAwMDAwMDAwMDEzMDAwNTAwMDAwMDAwMDAwMDAwMDEwMDBk
MDAwMDAwMDAwMDAwMDAxMDAwMWQwMDAwMDAwMDAwMDAwMDExMDAxNzAwMDAwMDAwMDAwMDAwMGMw
MDBlMDAwMDAwMDAwMDAwMDAxYzAwMWUxMjAyMTUxNDA0MWYwZjA3MDAwMDAwMDAwMDAwMDAwMDAw
MDAwMDAwMTQwNDFmMGYwODE4MDIwMDAwMTUwNTE2MDYwNzE3MGUxZTAwMDAwMTEwMTEwYzFjMWQw
ZDEyMDAwMDEzMDMxYjBiMWEwYTA5MTkwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAw
MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAw
MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAw
MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAw
MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAw
MDAiKSx3aGl0ZXN0X2NvbG9yPTddXWx6NAD3AQAAFQIAAP0FdXNlcmRhdGEoImkzMiIsNjQsIjAB
APANMjMyYjNiMDA4MjNmMzgwMDk4NDczZjAwOWY1MQgAkWM1MWM0YTAwZgEA8G8wMDc0MWY2NTAw
YTgyNTkyMDBlMjQ5YmEwMGVmODNjNTAwZjhiYmQ5MDA3NzJjMTYwMGEyMzIxOTAwZDU0ZjIxMDBm
MzgyNTcwMGZjYmM5YzAwNjc0OTEzMDA5YzcxMWEwMGQ2YTIyNTAwZWRjNDU0MDBmYmUxOTkwMDJk
NTMYAPAWMzE2ZTMyMDA1MGEzMmMwMDg3ZDQ1NjAwYmZmMjk1MDAxNjU4NQgA8Bw3Nzk3ZDAwMjBi
NGIzMDA1Y2Q4ZDIwMGFjZjZmMDAwNDcyMjg2MDA1ZTI2IADQOGQzYmVkMDBhZTgxZrAAkDhjNGZj
MDA1MwIAQDAwYjICAEAwMGUzAgBAMDBmNAIAAMgAAAIAQDAwMWQCAEAwMDJlAgBAMDA0NgIAQDAw
OWICAEAwMGMxAgDgMDA0ZjRiM2UwMDczNmHgAPAXOWU4Zjc0MDBhYTlkODUwMGJlYjVhNDAwNWE1
ZTY4MDA2ODZiNzB4ASA3N9AAoDgxODQ4YTAwYTYCAPEHMDAzZjI3MmEwMDViMzczNDAwNjY0MGAA
QDA0OTRIAPAAMDczYzQwMDY4OTFkNSIp
:: pal/default_00.pal
b64$LS1bW3BvZCxiZ19jb2xvcj0wLGJsYWNrZXN0X2NvbG9yPTAsY3JlYXRlZD0iMjAyNC0wOC0y
MyAxODo1OTowOSIsaGlkZGVuPXtbMF09ZmFsc2UsZmFsc2UsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0
cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNl
LGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZh
bHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNl
LGZhbHNlLGZhbHNlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVl
LHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0
cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsZmFsc2V9LGhpZGRlbl90b2dnbGVzPXtbMF09ZmFsc2Us
ZmFsc2UsZmFsc2UsZmFsc2V9LGh1ZV9vZmZzZXQ9LTAuNDg3NTM0NjI2MDM4NzgsaWNvbj11c2Vy
ZGF0YSgidTgiLDE2LDE2LCIwMDAxMDEwMTAxMDEwMTAxMDEwMTAxMDAwMDAwMDAwMDAwMDEwNzA3
MDcwNzA3MDcwNzA3MDYwMTAwMDAwMDAwMDAwMTA3MDcwNzA3MDcwNzA3MDcwNjA2MDEwMDAwMDAw
MDAxMDcwNzA3MDcwNzA3MDcwNzA2MDYwNjAxMDAwMDAwMDEwNzA3MDcwNzA3MDcwNzA3MDYwNjA2
MDYwMTAwMDAwMTA3MDcwNzA3MDcwNzA3MDcwNzA3MDcwNzAxMDAwMDAxMDcwNzA3MDcwNzA3MDcw
NzA3MDcwNzA3MDEwMDAwMDEwNzA3MDYwNjAxMDEwZDBkMDEwMTA3MDcwMTAwMDAwMTA3MDcwNjA2
MDEwMTBkMGQwMTAxMDcwNzAxMDAwMDAxMDcwNzAxMDEwNzA3MDYwNjBkMGQwNzA3MDEwMDAwMDEw
NzA3MDEwMTA3MDcwNjA2MGQwZDA3MDcwMTAwMDAwMTA3MDcwZDBkMDEwMTBkMGQwNjA2MDcwNzAx
MDAwMDAxMDcwNzBkMGQwMTAxMGQwZDA2MDYwNzA3MDEwMDAwMDEwNzA3MDcwNzA3MDcwNzA3MDcw
NzA3MDcwMTAwMDAwMTA3MDcwNzA3MDcwNzA3MDcwNzA3MDcwNzAxMDAwMDAxMDEwMTAxMDEwMTAx
MDEwMTAxMDEwMTAxMDEwMCIpLGxvY2tlZD17WzBdPWZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZh
bHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNl
LGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZh
bHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNl
LGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZh
bHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNl
LGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZh
bHNlLGZhbHNlLGZhbHNlfSxsb3djb2xfaWNvbj10cnVlLG1vZGlmaWVkPSIyMDI1LTA1LTA1IDIw
OjAxOjQ5Iixva3BhbF92ZXJzaW9uPSIxLjIuMiIscGlja2Vyc19tb2RlPSJsaW5lYXJfaHVlIixy
ZXZpc2lvbj00Njc4LHRlc3RfY3ViZV9jb2xvcnM9e1swXT17MTUsMzEsNH0sezMxLDQsMjB9LHs0
LDIwLDIxfSx7MTAsOSwyNX0sezksMjUsMjR9LHs4LDI0LDJ9LHsyNiwxMSwyN30sezExLDI3LDN9
LHsyNywzLDE5fSx7MjgsMTcsMTl9LHsyOCwxMiwxNn0sezEyLDE2LDF9LHs2LDI5LDEzfSx7Mjks
MTMsMTh9LHsxMywxOCwxfSx7NywyMywxNH0sezIzLDE0LDEzfSx7MTQsMzAsMTh9LHs3LDYsMjJ9
LHs2LDIyLDV9LHsyMiw1LDIxfSx7MSwxLDF9LHsxLDEsMX0sezEsMSwxfX0sdGVzdF9tb2RlPSJj
dWJlcyIsdGVzdF9yYW1wX2NvbG9ycz11c2VyZGF0YSgidTgiLDEwLDI3LCIwMDE4MDgxOTA5MGEx
YTBiMWIwMDA2MDAwMDAwMDAwMDAwMDAwMzAwMTYwMDAwMDAwMDAwMDAwMDEzMDAwNTAwMDAwMDAw
MDAwMDAwMDEwMDBkMDAwMDAwMDAwMDAwMDAxMDAwMWQwMDAwMDAwMDAwMDAwMDExMDAxNzAwMDAw
MDAwMDAwMDAwMGMwMDBlMDAwMDAwMDAwMDAwMDAxYzAwMWUxMjAyMTUxNDA0MWYwZjA3MDAwMDAw
MDAwMDAwMDAwMDAwMDAwMDAwMTQwNDFmMGYwODE4MDIwMDAwMTUwNTE2MDYwNzE3MGUxZTAwMDAw
MTEwMTEwYzFjMWQwZDEyMDAwMDEzMDMxYjBiMWEwYTA5MTkwMDAwMDAwMDAwMDAwMDAwMDAwMDAw
MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAw
MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAw
MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAw
MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAw
MDAwMDAwMDAwMDAwMDAiKSx3aGl0ZXN0X2NvbG9yPTddXWx6NADxAQAAFQIAAP0FdXNlcmRhdGEo
ImkzMiIsNjQsIjABAPANNGMzNjVhMDA4MjNmMzgwMDk4NDczZjAwOWY1MQgAkTY0NDg3NzAwZgEA
8DgwMDc0MWY2NTAwYTgyNTkyMDBlMjQ5YmEwMGVmODNjNTAwZjhiYmQ5MDA3NzJjMTYwMGEyMzIx
OTAwZDU0ZjIxMDBmMzgyNVAA8CRjYmM5YzAwNjc0OTEzMDA5YzcxMWEwMGQ2YTIyNTAwZWRjNDU0
MDBmYmUxOTkwMDJkNTMYAPAWMzE2ZTMyMDA1MGEzMmMwMDg3ZDQ1NjAwYmZmMjk1MDAxNjU4NQgA
8A03Nzk3ZDAwMjBiNGIzMDA1Y2Q4ZDIwMGFjZjZm_ACwNzIyODYwMDVlMjYgANA4ZDNiZWQwMGFl
ODFmsACQOGM0ZmMwMDUzAgBAMDBiMgIAQDAwZTMCAEAwMGY0AgAAyAAAAgBAMDAxZAIAQDAwMmUC
AEAwMDQ2AgBAMDA5YgIAQDAwYzECAOAwMDRmNGIzZTAwNzM2YeAA8BM5ZThmNzQwMGFhOWQ4NTAw
YmViNWE0MDA1ODU5NWQwMDY4AgBRMDA2Zja5ABE3AQBQMDA4NjivAfEGMDNmMjcyYTAwNWIzNzM0
MDA2NjQwYABQMDQ5NDQoACA1YxABgDdmYTZjZSIp
:: pal/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA4LTIzIDE4OjU0OjE5Iixtb2RpZmllZD0iMjAyNS0w
NS0xNiAyMDoxMjo0OSJdXQ==
:: sfx/
:: sfx/0.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTAzLTMwIDA1OjM5OjM1Iixtb2RpZmllZD0iMjAyNS0w
NS0xNiAyMDoxMjo0OSIscmV2aXNpb249Njk2Ml1dbHo0ABoBAABSCAAA8CdweHUAAygAAAQABA9A
EAIOAAGgASACoA4ADxAADfDKAQIDBAUGBwAP-5AICQoLDwwPDQ8ODw8QAPAADQ8RDxIPEw8UDxUP
Fg8XEwDxAQ8YDxkPGg8bDxwPHQ8eDx8UAPEAIA8hDyIPIw8kDyUPJg8nFADxACgPKQ8qDysPLA8t
Dy4PLxQA8QAwDzEPMg8zDzQPNQ82DzcUAP8FOA85DzoPOw88Dz0PPg8-AA--8P8BAOv-J1oBEAYP
IBABIAEgAfAAAhACDBABIA8hIAEwD0Dwww8oD--wxg-4Cg--D4AP9w8NAfAJARAGDDAAAh9EMAAc
H0AwAPIf-wEA3L-4D0AADUD--7DwcAoA--9kH-8BAP_ZUP----8g
:: sfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTAzLTMwIDA1OjM5OjM0Iixtb2RpZmllZD0iMjAyNS0w
NS0xNiAyMDoxMjo0OSIsc3RvcmVkPSIyMDI0LTAzLTMwIDA1OjM5OjM0Il1d
:: src/
:: src/logic/
:: src/logic/combat.lua
--[[pod_format="raw",created="2024-08-30 06:37:36",modified="2025-05-16 20:12:49",revision=4324]]
--- Combat Logic


function logic_new_fighter(kind)
	local self = {
		health = 30,
		max_health = 30,
		armor = 3,
		max_armor = 3,
		block = 0,
		dodge = 0,
		max_dodge = 9,
		special = 0,
		attack = 0,
	}
	
	function self:start_new_turn()
		self.block = 0
		self.attack = 0
		self.special = 0
		self.gems = {}
		for g in all(gem_colours) do self.gems[g] = 0 end
	end
	
	function self:count_points(game, gems, matches)
		for match in all(matches) do
			local count = #(match.positions)
			if match.colour == gem_rainbow then
				-- TODO: keep? delete? what about supercharge?
				foreach(
					gem_colours,
					function(g) self.gems[g] += count end
				)
			else
				for p in all(match.positions) do
					local supercharge = (gems:get(p) & gem_supercharge ~= 0) and 1 or 0
					self.gems[match.colour] += 1 + supercharge
				end
			end
			game.in_cascade = true -- TODO: keep? delete?
		end
	end
	
	function self:apply_points()
		--self.health = max(0, self.health - [gem_attack])
		local armor_points = self.gems[gem_armor] // 2
		self.armor = min(self.max_armor, self.armor + armor_points)
		self.block = self.gems[gem_block]
		self.dodge = min(self.max_dodge, self.dodge + self.gems[gem_dodge])
		self.special = self.gems[gem_special] // 2
		self.attack = self.gems[gem_attack]
	end
	
	function self:enact_points(other)
		local self_is_attacking = (self.attack > 0) or (self.special > 0)
		local other_is_dodging = (other.dodge == other.max_dodge)
		if self_is_attacking and other_is_dodging then
			self.attack = 0
			self.special = 0
			other.dodge = 0
		end
		if self.attack > 0 then
			if other.block <= self.attack then
				self.attack -= other.block
				other.block = 0
			else
				other.block -= self.attack
				self.attack = 0
			end
			if other.armor <= self.attack then
				self.attack -= other.armor
				other.armor = 0
			else
				other.armor -= self.attack
				self.attack = 0
			end
			other.health = max(0, other.health - self.attack)
			self.attack = 0
		end
		if self.special > 0 then
			if other.armor <= self.special then
				self.special -= other.armor
				other.armor = 0
			else
				other.armor -= self.special
				self.special = 0
			end
			other.health = max(0, other.health - self.special)
			self.special = 0
		end
	end
	
	return self
end


function logic_new_enemy()
	local self = logic_new_fighter()
	
	self.max_health = 15
	self.health = self.max_health
	
	function self:make_intent(turn)
		self.intent = {}
		if turn % 4 == 0 then
			self.intent.block = 3
			self.intent.armor = 1
		elseif turn % 4 == 1 then
			self.intent.attack = 3
		elseif turn % 4 == 2 then
			self.intent.armor = 1
			self.intent.dodge = 3
		elseif turn % 4 == 3 then
			self.intent.special = 1
		end
	end

	function self:apply_intent()
		self.attack = self.intent.attack or 0
		self.special = self.intent.special or 0
		self.dodge = min(self.max_dodge, self.dodge + (self.intent.dodge or 0))
		self.block = self.intent.block or 0
		self.armor = min(self.max_armor, self.armor + (self.intent.armor or 0))
		self.intent = nil
	end
	
	return self
end



:: src/logic/creation.lua
--[[pod_format="raw",created="2024-08-30 06:25:09",modified="2025-05-16 20:12:49",revision=5496]]
--- Board Creation Logic


local sc_target <const> = 3


function logic_new_test_cells(tiling, for_editor)
	local grid
	local size
	if tiling == "square" then
		grid = sgrid_new()
		for x = 0, 15 do
			for y = 0, 4 do
				grid:set(pos(x, y), cell_good)
			end
		end
	elseif tiling == "hex" then
		grid = hgrid_new()
--		for i = 0, 3 do
--			for y = i, 12 - i, 2 do
--				grid:set(pos(6 + i, y), cell_good)
--				grid:set(pos(6 - i, y), cell_good)
--			end
--		end
		for x = 0, 16 do
			for y = 0, 8 do
				if y % 2 == x % 2 then
					grid:set(pos(x, y), cell_good)
				end
			end
		end
	end
	return grid
end


------------------------------------------------------------------------


local bag_of_gems = {}
local rejected_gems = {}
local supercharge_counters = {}
for g in all(gem_colours) do supercharge_counters[g] = math.random(2, 10) end


local function random_gem(sc_counts)
	while #bag_of_gems == 0 do
		bag_of_gems = rejected_gems
		rejected_gems = {}
		for g in all(gem_colours) do
			supercharge_counters[g] += 1
			if math.floor((supercharge_counters[g]) % (10.0 / 1.0)) == 0 then
				g |= gem_supercharge
			end
			add(rejected_gems, g)
		end
	end
	local idx = math.random(1, #bag_of_gems)
	local gem = deli(bag_of_gems, idx)
	local colour = gem
--	local colour = gem & gem_colour_mask
--	if sc_counts and (sc_counts[colour] < sc_target) then
--		gem |= gem_supercharge
--		sc_counts[colour] += 1
--	end
	return gem
end


function logic_fill_gem_at(cells, gems, marks, p, sc_counts)
	local cell = cells:get(p) or 0
	if (cell & cell_mask == 0) or (cell & rock_mask != 0) then
		return
	end
	local test = (gems:tiling() == "square") and logic_test_sqr_match_at or logic_test_hex_match_at
	local gem = gems:get(p)
	if not gem then
		local attempts = 0
		local found = false
		while attempts < 16 and not found do
			if gem then
				add(rejected_gems, gem)
			end
			gem = random_gem(sc_counts)
			gems:set(p, gem)
			found = not test(gems, p)
			attempts += 1
		end
		if attempts == 16 then
			gem = gem_gift
			gems:set(p, gem)
		end
		marks:set(p, { name = "new" })
	end
end


local function count_supercharged_gems(gems)
	local counts = {}
	for c in all(gem_colours) do counts[c] = 0 end
	gems:foreachpos(
		function(_, gem)
			local colour = gem & gem_colour_mask
			local supercharge = (gem & gem_supercharge ~= 0)
			if supercharge then
				counts[colour] += 1
			end
		end
	)
	return counts
end


function logic_fill_gems(cells, gems, marks)
	-- TODO: fill in reverse gravity order
	local counts = count_supercharged_gems(gems)
	cells:foreachpos(
		function(p, _)
			logic_fill_gem_at(cells, gems, marks, p, counts)
		end
	)
end


------------------------------------------------------------------------


local function supercharge_gems(gems)
	local counts = count_supercharged_gems(gems)
	for colour in all(gem_colours) do
		while counts[colour] < sc_target do
			local possibilities = {}
			gems:foreachpos(
				function(p, gem)
					local gem_col = gem & gem_colour_mask
					local gem_sc = (gem & gem_supercharge ~= 0)
					if gem_col == colour and not gem_sc then
						add(possibilities, p)
					end
				end
			)
			if #possibilities > 0 then
				local choice = math.random(1, #possibilities)
				local p = possibilities[choice]
				gems:set(p, colour | gem_supercharge)
			end
			counts[colour] += 1
		end
	end
end


function logic_fill_all_gems(cells, gems, marks)
	local counts = {}
	for c in all(gem_colours) do counts[c] = sc_target end
	cells:foreachpos(
		function(p, _)
			logic_fill_gem_at(cells, gems, marks, p, counts)
		end
	)
--	supercharge_gems(gems)
end

:: src/logic/matching.lua
--[[pod_format="raw",created="2024-08-24 08:12:55",modified="2025-05-16 20:12:49",revision=6792]]
--- Matching Logic

-- The matching algorithm has two phases:
--
-- 1. First, a linear sweep through all the gems, and for each gem involved in a match
--    creates a mark registering which direction(s) matched.
-- 2. Then a flood-fill algorithm is used to group matches together.


local function logic_is_matching(gem1, gem2)
	if (not gem1) or (not gem2) then
		return false
	end
	
	gem1 &= gem_colour_mask
	gem2 &= gem_colour_mask
	
	-- Only colored gems can match.
	if (gem1 < gem_attack) or (gem1 > gem_rainbow) then
		return false
	end
	if (gem2 < gem_attack) or (gem2 > gem_rainbow) then
		return false
	end

	return (gem1 == gem2) or (gem1 == gem_rainbow)
		or (gem2 == gem_rainbow)
end


--------------------------------------------------------------------------


local function test_3(gems, p0, p1, p2)
	local gem0 = gems:get(p0)
	local gem1 = gems:get(p1)
	local gem2 = gems:get(p2)
	return logic_is_matching(gem0, gem1)
		and logic_is_matching(gem0, gem2)
		and logic_is_matching(gem1, gem2)
end


local function test_4(gems, p0, p1, p2, p3)
	local gem0 = gems:get(p0)
	local gem1 = gems:get(p1)
	local gem2 = gems:get(p2)
	local gem3 = gems:get(p3)
	return logic_is_matching(gem0, gem1)
		and logic_is_matching(gem0, gem2)
		and logic_is_matching(gem0, gem3)
		and logic_is_matching(gem1, gem2)
		and logic_is_matching(gem1, gem3)
		and logic_is_matching(gem2, gem3)
end


function logic_test_sqr_match_at(gems, p)
	local S = p + pos(0, 1)
	local SS = p + pos(0, 2)
	local N = p + pos(0, -1)
	local NN = p + pos(0, -2)
	local E = p + pos(1, 0)
	local EE = p + pos(2, 0)
	local W = p + pos(-1, 0)
	local WW = p + pos(-2, 0)
	local SE = p + pos(1, 1)
	local SW = p + pos(-1, 1)
	local NE = p + pos(1, -1)
	local NW = p + pos(-1, -1)
	return test_3(gems, SS, S, p) or test_3(gems, S, p, N) or test_3(gems, p, N, NN)
		or test_3(gems, EE, E, p) or test_3(gems, E, p, W) or test_3(gems, p, W, WW)
		or test_4(gems, p, S, SE, E) or test_4(gems, p, S, SW, W) 
		or test_4(gems, p, N, NE, E) or test_4(gems, p, N, NW, W)
end


function logic_test_hex_match_at(gems, p)
	local S = p + pos(0, 2)
	local S_S = p + pos(0, 4)
	local N = p + pos(0, -2)
	local N_N = p + pos(0, -4)
	local SE = p + pos(1, 1)
	local SE_SE = p + pos(2, 2)
	local SW = p + pos(-1, 1)
	local SW_SW = p + pos(-2, 2)
	local NE = p + pos(1, -1)
	local NE_NE = p + pos(2, -2)
	local NW = p + pos(-1, -1)
	local NW_NW = p + pos(-2, -2)
	local E = p + pos(2, 0)
	local W = p + pos(-2, 0)
	return test_3(gems, S_S, S, p) or test_3(gems, S, p, N) or test_3(gems, p, N, N_N)
		or test_3(gems, SE_SE, SE, p) or test_3(gems, SE, p, NW) or test_3(gems, p, NW, NW_NW)
		or test_3(gems, NE_NE, NE, p) or test_3(gems, NE, p, SW) or test_3(gems, p, SW, SW_SW)
		or test_4(gems, p, SE, S, SW) or test_4(gems, p, NE, N, NW)
		or test_4(gems, p, NE, E, SE) or test_4(gems, p, NW, W, SW)
end


local function check_3_and_mark(gems, p0, p1, p2, mark, marks)
	if test_3(gems, p0, p1, p2) then
		marks:merge(p0, mark)
		marks:merge(p1, mark)
		marks:merge(p2, mark)
	end
end


local function check_4_and_mark(gems, p0, p1, p2, p3, mark, marks)
	if test_4(gems, p0, p1, p2, p3) then
		marks:merge(p0, mark)
		marks:merge(p1, mark)
		marks:merge(p2, mark)
		marks:merge(p3, mark)
	end
end


local function mark_sgrid_matches_at(gems, p0, marks)
	check_3_and_mark( gems,
		p0,
		p0 + pos(0, 1),
		p0 + pos(0, 2),
		{ name = "matching", vertical = true }, marks )
	check_3_and_mark( gems,
		p0,
		p0 + pos(1, 0),
		p0 + pos(2, 0),
		{ name = "matching", horizontal= true }, marks )
	check_4_and_mark( gems,
		p0,
		p0 + pos(1, 0),
		p0 + pos(0, 1),
		p0 + pos(1, 1),
		{ name = "matching", vertical = true, horizontal = true }, marks )
end


local function mark_hgrid_matches_at(gems, p0, marks)
	check_3_and_mark( gems,
		p0,
		p0 + pos(0, 2),
		p0 + pos(0, 4),
		{ name = "matching", vertical = true }, marks )
	check_3_and_mark( gems,
		p0,
		p0 + pos(1, 1),
		p0 + pos(2, 2),
		{ name = "matching", horizontal_SE = true }, marks )
	check_3_and_mark( gems,
		p0,
		p0 + pos(1, -1),
		p0 + pos(2, -2),
		{ name = "matching", horizontal_NE = true }, marks )
	local p1 = p0 + pos(1, 1)
	local p2 = p0 + pos(1, -1)
	local p3 = p0 + pos(2, 0)
	if test_4(gems, p0, p1, p2, p3) then
		marks:merge(p0, { name = "matching", vertical = true, horizontal_NE = true, horizontal_SE = true})
		marks:merge(p1, { name = "matching", vertical = true, horizontal_SE = true })
		marks:merge(p2, { name = "matching", vertical = true, horizontal_NE = true })
		marks:merge(p3, { name = "matching", vertical = true, horizontal_NE = true, horizontal_SE = true})
	end
end


local function mark_all_matches(gems)
	local marks = gems:new_grid()
	if gems:tiling() == "square" then
		gems:foreachpos(
			function(p, _gem)
				mark_sgrid_matches_at(gems, p, marks)
			end
		)
	elseif gems:tiling() == "hex" then
		gems:foreachpos(
			function(p, _gem)
				mark_hgrid_matches_at(gems, p, marks)
			end
		)
	end
	return marks
end


---------------------------------------------------------------------------


local function group_this_match(cells, gems, marks, p)
	-- A simple flood-fill algorithm to group all
	-- intersecting linear matches together.
	local colour = gem_rainbow
	local positions = {}
	local one_good_cell = false
	local remaining = { p }
	local rainbows = {}
	while #remaining > 0 do
		local current = deli(remaining)
		local gem = gems:get(current) & gem_colour_mask
		local mark = marks:get(current)
		if mark and mark.name == "matching"
			and (not mark.counted)
			and logic_is_matching(colour, gem)
		then
			if gem == gem_rainbow then
				-- Rainbow gems can be part of multiple matches,
				-- so they need to be unflagged at the end.
				add(rainbows, current)
			else
				colour = gem
			end
			add(positions, current)
			marks:merge(current, { counted = true })
			local cell = cells:get(current)
			if cell and cell & cell_mask == cell_good then
				one_good_cell = true
			end
			local neighbours = gems:neighbours(current)
			foreach(
				neighbours,
				function(n)
					local s = marks:get(n.position)
					if not s then
						return
					end
					if s and s.name == "matching"
						and (not s.counted)
						and s[n.direction]
					then
						add(remaining, n.position)
					end
				end
			)
		end
	end
	foreach(
		rainbows,
		function(p)
			marks:merge(p, { counted = false })
		end
	)
	return { colour = colour, positions = positions, one_good_cell = one_good_cell }
end


function logic_find_matches(cells, gems)
	local marks = mark_all_matches(gems)
	local matches = {}
	marks:foreachpos(
		function(p, mark)
			if mark and mark.name == "matching"
				and (not mark.counted)
			then
				local match = group_this_match(cells, gems, marks, p)
				if match.colour == gem_rainbow then
					-- Ignore, as this is probably a stray rainbow that was unflagged
					-- at the end of `count_this_match`.
					-- TODO: an edge case is when there is a legitime match of
					-- only rainbow gems (e.g. 3 rainbows surrounded by black things).
				else
					add(matches, match)
				end
			end
		end
	)
	return matches, marks
end
:: src/logic/mechanics.lua
--[[pod_format="raw",created="2024-08-30 06:41:59",modified="2025-05-16 20:12:49",revision=5445]]
--- Core Mechanics Logic


------------------------------------------------------------------------


function logic_mark_gravity(cells, gems, marks, gravity)
	local some_gems_are_falling = false
	gems:foreachpos(
		function(p, gem)
			local below = p + gravity
			local distance = 0
			local cell_below = cells:get(below) or cell_none
			while (cell_below & cell_mask != cell_none)
				and (cell_below & rock_mask == 0)
			do
				if (not gems:get(below)) then
					some_gems_are_falling = true
					distance += 1
				end
				below += gravity
				cell_below = cells:get(below) or cell_none
			end
			if distance > 0 then
				marks:set(p, { name = "falling", target = p + distance * gravity })
			end
		end
	)
	return some_gems_are_falling
end


function logic_enact_gravity(gems, marks)
	local fell_gems = {}
	marks:foreachpos(
		function(p, mark)
			if mark.name == "falling" then
				local new_p = mark.target
				add(fell_gems, { gem = gems:get(p), pos = new_p })
				gems:del(p)
				marks:del(p)
			end
		end
	)
	foreach(fell_gems,
		function(fell_gem)
			gems:set(fell_gem.pos, fell_gem.gem)
			marks:del(fell_gem.pos)
		end
	)
end


------------------------------------------------------------------------


function logic_mark_swap(gems, marks, source, target)
	local gem0 = gems:get(source)
	local gem1 = gems:get(target)
	local test = (gems:tiling() == "square") and logic_test_sqr_match_at or logic_test_hex_match_at
	gems:set(source, gem1)
	gems:set(target, gem0)
	local matched = test(gems, target) or test(gems, source)
	gems:set(source, gem0)
	gems:set(target, gem1)
	if not matched then
		return false
	end
	marks:set(source, {
		name = "swapping",
		selected = true,
		target = target,
	})
	marks:set(target, {
		name = "swapping",
		target = source,
	})
	return true
end


function logic_enact_swap(gems, marks)
	local reinsert = {}
	marks:foreachpos(
		function(p, mark)
			if mark.name == "swapping" then
				add(reinsert, { gem = gems:get(p), position = mark.target })
				gems:del(p)
				marks:del(p)
			end
		end
	)
	foreach(
		reinsert,
		function(r) gems:set(r.position, r.gem) end
	)
end


-------------------------------------------------------------------------


function logic_enact_clear(gems, marks)
	marks:foreachpos(
		function(p, mark)
			if mark.name == "matching" then
				gems:del(p)
				marks:del(p)
			end
		end
	)
end

-------------------------------------------------------------------------


function logic_mark_repair(cells, marks, matches)
	local is_something_repaired = false
	foreach(
		matches,
		function(match)
			if match.one_good_cell then
				foreach(
					match.positions,
					function(position)
						local cell = cells:get(position) or 0
						if cell & cell_mask == cell_bad then
							marks:set(position, { name = "repaired" })
							is_something_repaired = true
						end
					end
				)
			end
		end
	)
	return is_something_repaired
end


function logic_enact_repair(cells, marks)
	local to_be_unmarked = {}
	marks:foreachpos(
		function(position, mark)
			if mark.name == "repaired" then
				local cell = cells:get(position)
				cell = (cell & ~cell_mask) | cell_good
				cells:set(position, cell)
				add(to_be_unmarked, position)
			end
		end
	)
	foreach(to_be_unmarked, function(p) marks:del(p) end)
end


----------------------------------------------------------------------


function logic_mark_breakage(cells, gems, marks, matches)
	local something_broke = false
	foreach(
		matches,
		function(match)
			foreach(
				match.positions,
				function(position)
					local neighbours = cells:neighbours(position)
					foreach(
						neighbours,
						function(n)
							local cell = (cells:get(n.position) or 0) & rock_mask
							if cell >= rock_full and cell <= rock_broken then
								marks:set(n.position, { name = "broken" })
								something_broke = true
							end
							local gem = gems:get(n.position) or 0
							if #match.positions > 3 then
								if gem == gem_cat or gem == gem_bat
									or gem == gem_robot_asleep
									or gem == gem_bomb
								then
									marks:set(n.position, { name = "broken" })
									something_broke = true
								elseif gem == gem_robot then
									gems:set(n.position, gem_robot_asleep2)
								end
							elseif gem == gem_bomb then
								marks:set(n.position, { name = "broken", exploded = true })
								something_broke = true
							end
						end
					)
				end
			)
		end
	)
	return something_broke
end


function logic_enact_breakage(cells, gems, marks)
	local to_be_unmarked = {}
	marks:foreachpos(
		function(position, mark)
			if mark.name == "broken" then
				local cell = cells:get(position) or 0
				if cell & rock_mask == rock_full then
					cells:set(position, (cell & cell_mask) | rock_cracked)
				elseif cell & rock_mask == rock_cracked then
					cells:set(position, (cell & cell_mask) | rock_broken)
				elseif cell & rock_mask == rock_broken then
					cells:set(position, (cell & cell_mask))
				end
				local gem = gems:get(position) or 0
				if gem == gem_cat or gem == gem_bat
					or gem == gem_robot_asleep
					or gem == gem_bomb
				then
					gems:del(position)
				end
				if gem == gem_bomb and mark.exploded then
					local neighbours = cells:blast_radius(position)
					foreach(
						neighbours,
						function(p)
							local cell = cells:get(p)
							if cell then
								cells:set(p, cell_bad | (cell & rock_mask))
							end
						end
					)
				end
				add(to_be_unmarked, position)
			end
		end
	)
	foreach(to_be_unmarked, function(p) marks:del(p) end)
end


-----------------------------------------------------------------------


function logic_mark_move(cells, gems, marks)
	local something_moved = false
	local movers = {}
	gems:foreachpos(
		function(position, gem)
			if gem == gem_cat or gem == gem_bat or gem == gem_robot then
				add(movers, position)
			elseif gem == gem_robot_asleep2 then
				gems:set(position, gem_robot_asleep)
			elseif gem == gem_robot_asleep then
				gems:set(position, gem_robot)
			end
		end
	)
	foreach(
		movers,
		function(position)
			local neighbours = cells:neighbours(position)
			local possibilities = {}
			foreach(
				neighbours,
				function(neighbour)
					local cell = cells:get(neighbour.position) or 0
					local gem = gems:get(neighbour.position) or 0
					if (cell & rock_mask == 0)
						and (cell & cell_mask != 0)
						and (gem <= gem_special)
					then
						add(possibilities, neighbour.position)
					end
				end
			)
			if #possibilities > 0 then
				something_moved = true
				local target = possibilities[math.random(1, #possibilities)]
				local moving_gem = gems:get(position)
				gems:del(position)
				local target_gem = gems:get(target)
				gems:set(target, moving_gem)
				local source_gem
				logic_fill_gem_at(cells, gems, marks, position)
				source_gem = gems:get(position)
				marks:set(target, {
					name = "moving",
					source = position,
					target = target,
					moving_gem = moving_gem,
					target_gem = target_gem,
					source_gem = source_gem,
				})
				if moving_gem == gem_bat or moving_gem == gem_robot then
					local cell = cells:get(target)
					cell = cell_bad | (cell & rock_mask)
					cells:set(target, cell)
				end
			end
		end
	)
	return something_moved
end


function logic_enact_move(cells, gems, marks)
	marks:foreachpos(
		function(position, mark)
			if mark.name == "moving" then
				if mark.moving_gem == gem_robot then
				end
			end
		end
	)
	marks:foreachpos(function(p, _) marks:del(p) end)
end
:: src/logic/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA4LTMwIDA2OjI0OjM5Iixtb2RpZmllZD0iMjAyNS0w
NS0xNiAyMDoxMjo0OSJdXQ==
:: src/constants.lua
--[[pod_format="raw",created="2024-08-24 15:17:10",modified="2025-05-16 20:12:49",revision=6949]]
--- Match3 Global Constants


-- Gems and cells ------------------------------------------------------

-- Color gems
gem_attack = 0x01
gem_dodge = 0x02
gem_block = 0x03
gem_armor = 0x04
gem_special = 0x05
gem_rainbow = 0x07

gem_colours = { gem_attack, gem_dodge, gem_block, gem_armor, gem_special }

gem_supercharge = 0x80
gem_colour_mask = 0x7f

-- Black gems
gem_gift = 0x08
gem_bomb = 0x09
gem_cat = 0x0a
gem_bat = 0x0b
gem_robot = 0x0c
gem_robot_asleep = 0x0d
gem_robot_asleep2 = 0x0e

gem_names = {
	[gem_attack] = "Attack",
	[gem_dodge] = "Dodge",
	[gem_block] = "Block",
	[gem_armor] = "Armor",
	[gem_special] = "Special",
}


-- Cells
cell_mask = 0x03
cell_none = 0x00
cell_good = 0x01
cell_bad = 0x02

-- Rocks
rock_full = 0x10
rock_cracked = 0x20
rock_broken = 0x30
cell_door = 0x40
cell_chest_air = 0x50
cell_chest_fire = 0x60
cell_chest_day = 0x70
cell_chest_earth = 0x80
cell_chest_water = 0x90
cell_chest_night = 0xa0

rock_mask = 0xf0

:: src/gfx.lua
--[[pod_format="raw",created="2024-08-24 12:06:13",modified="2025-05-16 20:12:49",revision=8792]]
--- Graphics


local cell_width = 29
local cell_height = 29


function gfx_draw_cells(cells)
	local function draw_cell(p, cell)
		local x, y = cells:coords_cell(p)
		local sprite
		if cells:tiling() == "square" then
			if cell & cell_mask == cell_good then
				sprite = 32
				sprite += (p.x + p.y) % 2
			elseif cell & cell_mask == cell_bad then
				sprite = 34
				sprite += p.y % 2
			end
		elseif cells:tiling() == "hex" then
			if cell & cell_mask == cell_good then
				sprite = 40
				sprite += (p.y + (p.x * 3)) % 3
			elseif cell & cell_mask == cell_bad then
				sprite = 43
			end
		end
		spr(sprite, x, y)
		x, y = cells:coords_gem(p)
		if cell and cell & cell_mask == cell_bad then
			pal(53, 58)
		end
		if cell & rock_mask == 0 then
		elseif cell & rock_mask == rock_full then
			spr(48, x, y)
		elseif cell & rock_mask == rock_cracked then
			spr(49, x, y)
		elseif cell & rock_mask == rock_broken then
			spr(50, x, y)
		elseif cell & rock_mask == cell_door then
			spr(51, x, y)
		elseif cell & rock_mask == cell_chest_air then
			spr(52, x, y)
		elseif cell & rock_mask == cell_chest_fire then
			spr(53, x, y)
		elseif cell & rock_mask == cell_chest_day then
			spr(54, x, y)
		elseif cell & rock_mask == cell_chest_earth then
			spr(55, x, y)
		elseif cell & rock_mask == cell_chest_water then
			spr(56, x, y)
		elseif cell & rock_mask == cell_chest_night then
			spr(57, x, y)
		end	
		pal(53, 53)
	end
	cells:foreachpos(draw_cell)
	-- TODO: move border construction out of the hot loop
	local function draw_borders(p, cell)
		local x, y = cells:coords_cell(p)
		if cells:tiling() == "square" then
			local cell_S = cells:get(p + pos(0, 1))
			local cell_W = cells:get(p + pos(-1, 0))
			local cell_E = cells:get(p + pos(1, 0))
			local cell_N = cells:get(p + pos(0, -1))
			if cell & cell_good != 0 then
				if not cell_S or cell_S & cell_good == 0 then
					line(x, y + 28, x + 28, y + 28, 53)
				end
				if not cell_E or cell_E & cell_good == 0 then
					line(x + 28, y, x + 28, y + 28, 53)
				end
				if not cell_N or cell_N & cell_good == 0 then
					line(x, y, x + 28, y, 57)
				end
				if not cell_W or cell_W & cell_good == 0 then
					line(x, y, x, y + 28, 57)
				end
			elseif cell & cell_bad != 0 then
				if cell_N and cell_N & cell_good != 0 then
					line(x, y, x + 28, y, 58)
				end
				if cell_W and cell_W & cell_good != 0 then
					line(x, y, x, y + 28, 58)
				end
			end
		end
	end
--	cells:foreachpos(draw_borders)
end


-----------------------------------------------------------------------


local sprites_color_gem = {
	[gem_attack] = 1,
	[gem_dodge] = 2,
	[gem_block] = 3,
	[gem_armor] = 4,
	[gem_special] = 5,
}


local sprites_other_gem = {
	[gem_gift] = 8,
	[gem_bomb] = 9,
	[gem_cat] = 10,
	[gem_bat] = 11,
	[gem_robot] = 12,
	[gem_robot_asleep] = 13,
	[gem_robot_asleep2] = 13,
}

--color_gem_skin = math.random(0, 14)
color_gem_skin = 0
local function gem_sprite(gem)
	local base = 128 + color_gem_skin * 16
	local colour = gem & gem_colour_mask
	if colour >= gem_attack and colour <= gem_special then
		local supercharge = ((gem & gem_supercharge) ~= 0) and 8 or 0
		return sprites_color_gem[colour] - 1 + base + supercharge
	else
		return sprites_other_gem[gem]
	end
end


local function scaled_gem(sprite, x, y, size)
	local fullsize <const> = 29
	local w, h = flr(fullsize * size + 0.5) // 2 * 2 + 1, flr(fullsize * size + 0.5) // 2 * 2 + 1
	local x, y = x + ((fullsize - w) / 2), y + ((fullsize - h) / 2)
	sspr(sprite, 0, 0, fullsize, fullsize, x, y, w, h)
end


local function draw_exploded_gem(gem, x, y, clock, new_clock)
	local size = 16 * new_clock
	local size2 = (16 + clock * 16) * new_clock + 8
	
	local colour = 15 + (gem - 1) * 5
	if clock < 0.25 then
		colour = 7
	elseif clock < 0.50 then
		colour += 2
	elseif clock < 0.75 then
		colour += 1
	end

	ovalfill(x + 3 - size, y + 3 - size, x + 26 + size, y + 26 + size, colour)
	oval(x + 3 - size2, y + 3 - size2, x + 26 + size2, y + 26 + size2, colour)
end


function gfx_draw_gems(cells, gems, states, clock)
	local function draw_gem(p, gem)
		local x, y = gems:coords_gem(p)
		local sprite = gem_sprite(gem)
		local cell = cells:get(p)
		if cell and cell & cell_mask == cell_bad then
			pal(53, 58)
		end
		local state = states:get(p)
		if not state or state.name == "broken" then
			spr(sprite, x, y)
		elseif state.name == "new" then
			scaled_gem(sprite, x, y, clock)
		elseif state.name == "matching" then
		elseif state.name == "falling" or state.name == "swapping"
		then
			local dest_x, dest_y = gems:coords_gem(state.target)
			local ix, iy = x + clock * (dest_x - x), y + clock * (dest_y - y)
			spr(sprite, ix, iy)
		elseif state.name == "moving" then
			x, y = gems:coords_gem(state.source, gem)
			local dest_x, dest_y = gems:coords_gem(state.target)
			scaled_gem(gem_sprite(state.target_gem), dest_x, dest_y, 1.0)
		end
		pal(53, 53)	
	end
	gems:foreachpos(draw_gem)
	local new_clock = clock * clock * clock * clock
	gems:foreachpos(
		function(p, gem)
			local x, y = gems:coords_gem(p)
			local sprite = gem_sprite(gem)
			local cell = cells:get(p)
			if cell and cell & cell_mask == cell_bad then
				pal(53, 58)
			end
			local state = states:get(p)
			if state and state.name == "matching" then
				draw_exploded_gem(gem, x, y, clock, new_clock)
			elseif state and state.name == "moving" then
				x, y = gems:coords_gem(state.source, gem)
				local dest_x, dest_y = gems:coords_gem(state.target)
				local ix, iy = x + clock * (dest_x - x), y + clock * (dest_y - y)
				spr(gem_sprite(state.moving_gem), ix, iy)
			end
		end
	)
end


-----------------------------------------------------------------------


function gfx_draw_turns(ox, oy, turn, anim_turn)
	spr(64, ox, oy)
	local hundreds = (turn // 100) % 10
	local tens = (turn // 10) % 10
	local ones = turn % 10
	local anim = anim_turn // 2
	pal(7, 1)
	local tx = ox + 12
	clip(tx, oy + 4, tx + 3 * 8, oy + 4 + 4)
	-- hundreds
	if anim == 0 or (turn % 100) > 0 then
		spr(65 + hundreds, tx, oy + 7)
	else
		spr(65 + hundreds, tx, oy + 7 + anim)
		spr(65 + ((hundreds - 1) % 10), tx, oy + 7 + anim - 10)
	end
	-- tens
	if anim == 0 or ones > 0 then
		spr(65 + tens, tx + 8, oy + 7)
	else
		spr(65 + tens, tx + 8, oy + 7 + anim)
		spr(65 + ((tens - 1) % 10), tx + 8, oy + 7 + anim - 10)
	end
	-- ones
	spr(65 + ones, tx + 2 * 8, oy + 7 + anim)
	spr(65 + ((ones - 1) % 10), tx + 2 * 8, oy + 7 + anim - 10)
	clip()
	pal(7, 7)
end


-----------------------------------------------------------------------


local function draw_number(mana, zoomed, ox, oy, color)
	local base_char
	local char_width
	if zoomed then
		base_char = 85
		char_width = 11
		oy -= 3
	else
		base_char = 75
		char_width = 8
	end
	local thousands = (mana // 1000) % 10
	local hundreds = (mana // 100) % 10
	local tens = (mana // 10) % 10
	local ones = mana % 10
	local digits = 4
	if mana < 10 then
		digits = 1
	elseif mana < 100 then
		digits = 2
	elseif mana < 1000 then
		digits = 3
	else
		digits = 4
	end
	pal(42, color)
	ox -= (digits * char_width) // 2
	if mana >= 1000 then
		spr(base_char + thousands, ox, oy)
		ox += char_width
	end
	if mana >= 100 then
		spr(base_char + hundreds, ox, oy)
		ox += char_width
	end
	if mana >= 10 then
		spr(base_char + tens, ox, oy)
		ox += char_width
	end
	spr(base_char + ones, ox, oy)
	pal()
end


local function draw_bar(value, max_value, damage, side, ox, oy, color)
	local w = 120
	local v = math.floor(0.5 + (value / max_value) * (w - 2))
	local dv = math.floor(0.5 + (damage / max_value) * (w - 2))
	local x = ox + 1
	local dx = x + v - dv
	if side == "right" then
		ox = ox - w - 3
		x = ox + (w - v) - 1
		dx = ox + (w - v) - 1
	end
	rrectfill(ox + 1, oy + 1, w, 10, 2, 62)
	rrectfill(ox, oy, w, 10, 2, color + 2)
	rrectfill(x, oy + 1, v, 8, 1, color)
	if damage > 0 then
		rrectfill(dx, oy + 1, dv, 8, 0, 6)
		if side == "left" then
			pset(dx + dv - 1, oy + 1, color + 2)
			pset(dx + dv - 1, oy + 8, color + 2)
		else
			pset(dx, oy + 1, color + 2)
			pset(dx, oy + 8, color + 2)
		end
	end
--	rrect(ox, oy, w, 10, 2, color + 2)
end


local function draw_dotted_bar(value, max_value, damage, side, ox, oy, color, highlight)
	local w = (max_value * 7) + 1
	if side == "right" then
		ox = ox - w - 3
	end
	local bg = color + 2
	rrectfill(ox + 1, oy + 1, w, 10, 2, 62)
	rrectfill(ox, oy, w, 10, 2, bg)
	if highlight then
		local c = (damage > 0) and 6 or color
		rrectfill(ox + 1, oy + 1, w - 2, 8, 0, c)
		print("\014dodge!", ox + 1 + w//2 - 12, oy + 3, bg)
	else
		for i = 1, max_value do
			local x = ox + 1 + (i - 1) * 7
			local full_dot = i <= value
			local damaged = full_dot and (i > value - damage)
			if side == "right" then
				full_dot = i > (max_value - value)
				damaged = full_dot and (i <= (max_value - value + damage))
			end
			if full_dot and damaged then
				rrectfill(x, oy + 1, 6, 8, 0, 6)
			elseif full_dot then
				rrectfill(x, oy + 1, 6, 8, 0, color)
			else
				rrect(x + 2, oy + 4, 2, 2, 0, color)
			end
		end
	end
	rrect(ox, oy, w, 10, 2, bg)
end


-----------------------------------------------------------------------


local parts_x <const> = {
	left = {
		icon = 4,
		number = 4 + 30,
		bar = 4 + 42,
		block_icon = function(max_armor) return 4 + 50 + 7 * max_armor end,
		block_number = function(max_armor) return 4 + 50 + 7 * max_armor + 28 end,
		dodge_text = function(max_dodge) return 4 + 50 + 7 * max_dodge end,
		attack_icon = 130,
		attack_number = 130 + 31,
		special_icon = 130,
		special_number = 130 + 31,
	},
	right = {
		number = 457 - 13,
		icon = 457,
		bar = 457 - 23,
		block_number = function(max_armor) return 457 - 50 - 7 * max_armor - 11 end,
		block_icon = function(max_armor) return 457 - 50 - 7 * max_armor - 2 end,
		dodge_text = function(max_dodge) return 457 - 50 - 7 * max_dodge - 11 end,
		attack_number = 320,
		attack_icon = 320 + 12,
		special_number = 320,
		special_icon = 320 + 12,
	},
}


local function draw_health_bar(fighter, side, future)
	local xx = parts_x[side]
	local oy = 4
	local damage = fighter.health - future.health
	spr(104, xx.icon, oy)
	draw_number(fighter.health, false, xx.number, oy + 2, 12)
	draw_bar(fighter.health, fighter.max_health, damage, side, xx.bar, oy + 3, 10)
end


local function draw_armor_bar(fighter, side, future)
	local xx = parts_x[side]
	local oy = 4 + 18
	local damage = fighter.armor - future.armor
	spr(108, xx.icon, oy)
	draw_number(fighter.armor, false, xx.number, oy + 2, 32)
	draw_dotted_bar(fighter.armor, fighter.max_armor, damage, side, xx.bar, oy + 3, 30)
end


local function draw_block_bar(fighter, side, future)
	local text_color = 27
	if fighter.block == 0 then
		pal(24, 62)
		palt(26, true)
		palt(62, true)
		text_color = 62
	elseif future.block < fighter.block then
		text_color = 6
	end
	local xx = parts_x[side]
	local oy = 4 + 18
	spr(107, xx.block_icon(fighter.max_armor), oy)
	draw_number(fighter.block, false,
		xx.block_number(fighter.max_armor), oy + 2, text_color)
	if fighter.block == 0 then
		pal()
		palt()
	end
end


local function draw_dodge_bar(fighter, side, future)
	local highlight = fighter.dodge == fighter.max_dodge
	local damage = fighter.dodge - future.dodge
	local xx = parts_x[side]
	local oy = 4 + 18*2
	spr(106, xx.icon, oy)
	draw_number(fighter.dodge, false, xx.number, oy + 2, 22)
	draw_dotted_bar(fighter.dodge, fighter.max_dodge, damage, side,
		xx.bar, oy + 3, 20, highlight)
end


local function draw_attack_number(fighter, side)
	local text_color = 17
	if fighter.attack == 0 then
		pal(14, 62)
		palt(16, true)
		palt(62, true)
		text_color = 62
	end
	local xx = parts_x[side]
	local oy = 56
	spr(105, xx.attack_icon, oy)
	draw_number(fighter.attack, false, xx.attack_number, oy + 2, text_color)
end


local function draw_special_bar(fighter, side)
	local text_color = 37
	if fighter.special == 0 then
		pal(34, 62)
		palt(36, true)
		palt(62, true)
		text_color = 62
	end
	local xx = parts_x[side]
	local oy = 74
	spr(109, xx.special_icon, oy)
	draw_number(fighter.special, false, xx.special_number, oy + 2, text_color)
end


function gfx_draw_bars(fighter, side, other)
	-- TODO: find a better place to compute future state
	local future = deep_copy(fighter)
	local future_other = deep_copy(other)
	future_other:enact_points(future)
	draw_health_bar(fighter, side, future)
	draw_armor_bar(fighter, side, future)
	draw_block_bar(fighter, side, future)
	draw_dodge_bar(fighter, side, future)
	draw_special_bar(fighter, side)
	draw_attack_number(fighter, side)
end


function gfx_draw_intent(enemy)
	if not enemy.intent then
		return
	end
	local intent = enemy.intent
	local str = ""
	local dx <const> = 26
	local w = 0
	local ox = 0 -- offset
	for _ in pairs(enemy.intent) do w += dx end
	if w < 2*dx then w = 2*dx; ox = dx//2 end
	local x, y = 480 - 9 - w, 78
	rect(x - 7, y - 14, x + w - 4, y + 19, 62)
	print("\014next turn:", x, y - 10, 62)
	palt(62, true)
	pal(9, 11); palt(11, true)
	pal(14, 16); palt(16, true)
	pal(19, 21); palt(21, true)
	pal(24, 26); palt(26, true)
	pal(29, 31); palt(31, true)
	if intent.attack then
		spr(105, x + ox, y)
		x += dx
	end
	if intent.special then
		spr(109, x + ox, y)
		x += dx
	end
	if intent.dodge then
		spr(106, x + ox, y)
		x += dx
	end
	if intent.block then
		spr(107, x + ox, y)
		x += dx
	end
	if intent.armor then
		spr(108, x + ox, y)
		x += dx
	end
	pal()
	palt()
end


function gfx_draw_intent__OLD(enemy)
	if not enemy.intent then
		return
	end
	local intent = enemy.intent
	local str = ""
	local dx <const> = 40
	local dx2 <const> = 11
	local w = 0
	if intent.special then w += dx end
	if intent.attack then w += dx end
	if intent.armor then w += dx + dx2 end
	if intent.block then w += dx end
	if intent.dodge then w += dx + dx2 end
	local x, y = 480 - 9 - w, 78
	line(x - 7, y - 4, x + w - 4, y - 4, 62)
	--rect(x - 7, y - 4, x + w - 4, y + 19, 62)
	local text_w = print("\014next turn", 0, -1000)
	print("\014next turn", x + w - text_w - 6, y - 10, 62)
	if intent.attack then
		draw_number(intent.attack, false, x + 8, y + 2, 17)
		spr(105, x + 16, y)
		x += dx
	end
	if intent.special then
		draw_number(intent.special, false, x + 8, y + 2, 37)
		spr(109, x + 16, y)
		x += dx
	end
	if intent.dodge then
		pal(27, 22)
		spr(110, x, y)
		pal()
		draw_number(intent.dodge, false, x + 7 + 8, y + 2, 22)
		spr(106, x + 7 + 16, y)
		x += dx + dx2
	end
	if intent.block then
		draw_number(intent.block, false, x + 8, y + 2, 27)
		spr(107, x + 16, y)
		x += dx
	end
	if intent.armor then
		pal(27, 32)
		spr(110, x, y)
		pal()
		draw_number(intent.armor, false, x + 7 + 8, y + 2, 32)
		spr(108, x + 7 + 16, y)
		x += dx + dx2
	end
end


:: src/hgrid.lua
--[[pod_format="raw",created="2024-08-25 08:16:09",modified="2025-05-16 20:12:49",revision=6507]]
--- Hex Grids

--- Hex grids use the "double height" coordinate system:
---
---     (0,0)         (2,0)         (4,0)
---            (1,1)         (3,1)
---     (0,2)         (2,2)         (4,2)
---            (1,3)         (3,3)
---     (0,4)         (2,4)         (4,4)
---
--- The origin of the grid, `pos(0, 0)`, is at the top left.


-- Local Constants --------------------------------------------------------


local max_width <const> = 17
local max_height <const> = 8


-- Constructors -----------------------------------------------------------


local metatable = {}


function hgrid_new()
	local grid = {}
	metatable.default_origin(grid)
	setmetatable(grid, { __index = metatable })
	for i = 0, max_width * max_height do
		grid[i] = false
	end
	return grid
end


function metatable:new_grid()
	return hgrid_new()
end


function metatable:clone()
	local grid = self:new_grid()
	grid.origin = self.origin
	self:foreachpos(function(p, item) grid:set(p, item) end)
	return grid
end


-- Indexing ------------------------------------------------------------


function metatable:tiling()
	return "hex"
end


function metatable:get(p)
	if p.x < 0 or p.y < 0 or p.x >= max_width or p.y >= 2 * max_height - (p.x % 2) then
		return false
	end
	return self[p.x + ((p.y // 2) * max_width)]
end


function metatable:set(p, value)
	if p.x < 0 or p.y < 0 or p.x >= max_width or p.y >= 2 * max_height - (p.x % 2) then
		return false
	end
	self[p.x + ((p.y // 2) * max_width)] = value
end


function metatable:merge(p, state)
	if p.x < 0 or p.y < 0 or p.x >= max_width or p.y >= 2 * max_height - (p.x % 2) then
		return false
	end
	local index = p.x + ((p.y // 2) * max_width)
	if not self[index] then
		self[index] = {}
	end
	for k, v in pairs(state) do
		self[index][k] = v
	end
end


function metatable:del(p)
	if p.x < 0 or p.y < 0 or p.x >= max_width or p.y >= 2 * max_height - (p.x % 2) then
		return false
	end
	self[p.x + ((p.y // 2) * max_width)] = false
end


-- Screen Coordinates ---------------------------------------------------------


function metatable:default_origin()
	self.origin = { x = 116, y = 7 }
end


function metatable:compute_origin()
	local min_p = pos(max_width, max_height)
	local max_p = pos(0, 0)
	self:foreachpos(
		function(position, cell)
			if not cell or cell == 0 then
				return
			end
			if position.x < min_p.x then min_p.x = position.x end
			if position.y < min_p.y then min_p.y = position.y end
			if position.x > max_p.x then max_p.x = position.x end
			if position.y > max_p.y then max_p.y = position.y end
		end
	)
	local width = 1 + max_p.x - min_p.x
	local height = 1 + max_p.y - min_p.y
	self.origin = {
		x = (480 // 2) - ((width * 27) // 2) - (min_p.x * 27) - 4,
--		y = 20 + ((270 - 20) // 2) - ((height * 16) // 2) - (min_p.y * 16) - 8,
		y = 270 - (height * 16) - 16 - 2 - 3
	}
end


function metatable:coords_origin()
	return self.origin.x, self.origin.y
end


function metatable:coords_cell(p)
	local ox, oy = self:coords_origin()
	return ox + p.x * 27, oy + p.y * 16
end


function metatable:coords_gem(p)
	local ox, oy = self:coords_origin()
	return ox + (p.x * 27) + 3, oy + (p.y * 16) + 1
end


function metatable:pos(x, y)
	local ox, oy = self:coords_origin()
	x -= ox
	y -= oy + 1
	local px, py = x // 27, y // 16
	local dx, dy = x - (px * 27), y - (py * 16)
	if dx < 8 then
		if (px + py) % 2 == 0 and dy < 14 + (-2 * dx) then
			px -= 1
			py -= 1
		elseif (px + py) % 2 != 0 and dy > -1 + (2 * dx) then
			px -= 1
		end
	end
	py = (2 * ((py - (px % 2)) // 2)) + (px % 2)
	return pos(px, py)
end


function metatable:distance(p0, p1)
	-- TODO: is this correct?
	return (abs(p0.x - p1.x) + abs(p0.y - p1.y)) // 2
end


-- Iterating ----------------------------------------------------------


function metatable:foreachpos(func)
	for x = 0, max_width do
		for y = x % 2, max_height * 2 - 1, 2 do
			local p = pos(x, y)
			local item = self:get(p)
			if item then
				func(p, item)
			end
		end
	end
end	


function metatable:neighbours(p)
	return {
		{ position = p + pos(1, 1), direction = "horizontal_SE" },
		{ position = p + pos(0, 2), direction = "vertical" },
		{ position = p + pos(-1, 1), direction = "horizontal_NE" },
		{ position = p + pos(-1, -1), direction = "horizontal_SE" },
		{ position = p + pos(0, -2), direction = "vertical" },
		{ position = p + pos(1, -1), direction = "horizontal_NE" },
	}
end


function metatable:blast_radius(p)
	return {
		p + pos(0, 0),
		p + pos(0, -2),
		p + pos(1, -1),
		p + pos(1, 1),
		p + pos(0, 2),
		p + pos(-1, 1),
		p + pos(-1, -1),
	}
end

:: src/in_game.lua
--[[pod_format="raw",created="2024-08-27 17:11:11",modified="2025-05-16 20:12:49",revision=8005]]
in_game = {}


-- The Board
local gravity = pos(0, 1)

local cells = false
local gems = false
local marks = false

local matches = {}

local prev_cells = false
local prev_gems = false
local prev_game = false

-- State Machine
local menu_requested = false
local substate = false
local clock = 0.0
local interaction = false

local starting_game = {
	turn = 0,
	in_cascade = false,
}
local game = deep_copy(starting_game)
local anim_turn = 0
local star_seed = 37


-----------------------------------------------------------------------


-- Functions for substate need to be global, because of Lua
-- forward-declaration rule for locals.


function creating_the_board()
	cells = logic_new_test_cells(config.tiling, true)
	gems = cells:new_grid()
	cells:compute_origin()
	gems.origin = cells.origin
	marks = cells:new_grid()
	matches = {}
	
	if config.tiling == "square" then
		gravity = pos(0, 1)
	else
		gravity = pos(0, 2)
	end

	game = deep_copy(starting_game)
	game.hero = logic_new_fighter()
	game.enemy = logic_new_enemy()
	game.enemy:make_intent(game.turn)
	anim_turn = 0
	star_seed = math.random(37, 6584587)
	logic_fill_all_gems(cells, gems, marks)
	return creating_missing_gems
end


function creating_missing_gems()
	if clock == 0.0 then
		logic_fill_gems(cells, gems, marks)
	end
	clock += 1.0 / 8.0
	if clock < 1.0 then
		return creating_missing_gems
	end
	-- Clean-up
	marks:foreachpos(
		function(p, mark)
			if mark.name == "new" then
				marks:del(p)
			end
		end
	)
	return moving_things
end


function moving_things()
	if clock == 0.0 and game.turn > 0 then
		local something_moved = logic_mark_move(cells, gems, marks)
		if not something_moved then
			return starting_new_turn
		end
	end
	clock += 1.0 / 16.0
	if clock < 1.0 then
		return moving_things
	end
	logic_enact_move(cells, gems, marks)
	return starting_new_turn
end


function starting_new_turn()
	game.turn += 1
	anim_turn = 20
	game.in_cascade = false
	game.hero:start_new_turn()
	game.enemy:apply_intent()
	game.enemy:make_intent(game.turn)
	return waiting_for_input
end


function waiting_for_input()
	local mx, my, mb, _, _ = mouse()
	if mb == 0x1 then
		local mp = cells:pos(mx, my)
		if gems:get(mp) then
			interaction = { name = "swap", position = mp, start = t() }
			return waiting_for_swap
		end
	end
	if keyp("del") then
		local mx, my = mouse()
		local p = cells:pos(mx, my)
		gems:set(p, gem_gift)
		marks = cells:new_grid()
		matches = {}
	end
	if keyp("w") then
		local mx, my = mouse()
		local p = cells:pos(mx, my)
		gems:set(p, gem_rainbow)
		marks:set(p, { name = "new" })
		matches = {}
		return checking_matches
	end
	if keyp("r") then
		local mx, my = mouse()
		local p = cells:pos(mx, my)
		cells:set(p, (cells:get(p) or 0) | rock_full)
		gems:del(p)
		matches = {}
		return checking_matches
	end
	if keyp("a") then
		local mx, my = mouse()
		local p = cells:pos(mx, my)
		gems:set(p, gem_attack)
		marks:set(p, { name = "new" })
		matches = {}
		return checking_matches
	end
	if keyp("m") then
		menu_requested = true
		return creating_the_board
	end
	if keyp("z") then
		cells = prev_cells:clone()
		gems = prev_gems:clone()
		marks = cells:new_grid()
		game = deep_copy(prev_game)
	end
	if keyp("1") then color_gem_skin = 0 end
	if keyp("2") then color_gem_skin = 1 end
	if keyp("3") then color_gem_skin = 2 end
	if keyp("4") then
		color_gem_skin = (color_gem_skin - 1) % 6
	end
	if keyp("6") then
		color_gem_skin = (color_gem_skin + 1) % 6
	end
	if keyp("5") then
		local prev = color_gem_skin
		while prev == color_gem_skin do
			color_gem_skin = math.random(0, 5)
		end
	end
	return waiting_for_input
end


function waiting_for_swap()
	local mx, my, mb, _, _ = mouse()
	if mb ~= 0x1 then
		interaction = false
		return waiting_for_input
	end
	local mp = cells:pos(mx, my)
	if cells:distance(mp, interaction.position) ~= 1
		or (not gems:get(mp))
	then
		return waiting_for_swap
	end
	local success = logic_mark_swap(gems, marks, interaction.position, mp)
	interaction = false
	if not success then
		return waiting_for_input
	end
	prev_cells = cells:clone()
	prev_gems = gems:clone()
	prev_game = deep_copy(game)
	return swapping_two_gems
end


function swapping_two_gems()
	clock += 1.0 / 8.0
	if clock < 1.0 then
		return swapping_two_gems
	end
	logic_enact_swap(gems, marks)
	return checking_matches
end


function checking_matches()
	matches, marks = logic_find_matches(cells, gems)
	if #matches > 0 then
		game.hero:count_points(game, gems, matches)
		return clearing_gems
	end
	return counting_points
end


function clearing_gems()
	clock += 1.0 / 24.0
	if clock < 1.0 then
		return clearing_gems
	end
	logic_enact_clear(gems, marks)
	return repairing_cells
end


local repairing_done = false
function repairing_cells()
	if clock == 0.0 then
		local is_something_repaired = logic_mark_repair(cells, marks, matches)
		if not is_something_repaired then
			return breaking_things
		end
	end
	clock += 1.0 / 8.0
	if clock < 0.5 then
		repairing_done = false
		return repairing_cells
	elseif not repairing_done then
		logic_enact_repair(cells, marks)
		repairing_done = true
		return repairing_cells
	elseif clock < 1.0 then
		return repairing_cells
	end
	return breaking_things
end


local breaking_done = false
function breaking_things()
	if clock == 0.0 then
		local something_broke = logic_mark_breakage(cells, gems, marks, matches)
		if not something_broke then
			return applying_gravity
		end
		breaking_done = false
	end
	clock += 1.0 / 32.0
	if clock < 0.5 then
		return breaking_things
	elseif not breaking_done then
		logic_enact_breakage(cells, gems, marks)
		breaking_done = true
		return breaking_things
	elseif clock < 1.0 then
		return breaking_things
	end
	return applying_gravity
end


function applying_gravity()
	if clock == 0.0 then
		local some_gems_are_falling = logic_mark_gravity(cells, gems, marks, gravity)
		if not some_gems_are_falling then
			return counting_points
		end
	end
	clock += 1.0 / 8.0
	if clock < 1.0 then
		return applying_gravity
	end
	logic_enact_gravity(gems, marks)
	return checking_matches
end


function counting_points()
	if clock == 0.0 then
		game.hero:apply_points()
	end
	return attacking
end


local mb_released
function attacking()
	local _, _, mb = mouse()
	if clock == 0.0 then
		mb_released = (mb == 0)
	end
	if clock > 1.0 or (mb_released and mb ~= 0) then
		game.hero:enact_points(game.enemy)
		return defending
	end
	if mb == 0 then
		mb_released = true
	end
	clock += 1.0 / 60.0
	return attacking
end


function defending()
	local _, _, mb = mouse()
	if clock == 0.0 then
		mb_released = (mb == 0)
	end
	if clock > 1.0 or (mb_released and mb ~= 0) then
		game.enemy:enact_points(game.hero)
		return hurting
	end
	if mb == 0 then
		mb_released = true
	end
	clock += 1.0 / 60.0
	return defending
end


function hurting()
	local _, _, mb = mouse()
	if clock == 0.0 then
		mb_released = (mb == 0)
	end
	if clock > 1.0 or (mb_released and mb ~= 0) then
		return creating_missing_gems
	end
	if mb == 0 then
		mb_released = true
	end
	clock += 1.0 / 30.0
	return hurting
end


-----------------------------------------------------------------------

-- TODO: remove
function in_game:load_from_editor(ed_tiling, ed_cells, ed_gems)
	tiling = ed_tiling
	if tiling == "square" then
		gravity = pos(0, 1)
	else
		gravity = pos(0, 2)
	end
	cells = ed_cells:clone()
	gems = ed_gems:clone()
	marks = cells:new_grid()
	matches = {}
	game = deep_copy(starting_game)
	substate = creating_the_board
end


-----------------------------------------------------------------------


function in_game:enter()
	menu_requested = false
	if not substate then
		substate = creating_the_board
	end
end


function in_game:exit()
end


function in_game:update()
	local next = substate()
	if next ~= substate then
		clock = 0.0
		substate = next
	end
	if anim_turn > 0 then
		anim_turn -= 1
	end
	if menu_requested then
		return in_menu
	end
	return false
end


function in_game:draw()
	if not cells then
		return
	end
	-- Starry background
	cls(63)
	
	-- Draw the board
	if cells:tiling() == "square" then
		spr(112, 0, 100)
	elseif cells:tiling() == "hex" then
		spr(113, 0, 100)
	end
	gfx_draw_cells(cells)
	gfx_draw_gems(cells, gems, marks, clock)
	
	-- Top bar
	spr(102, (480 // 2) - (106 //2), 2)
	gfx_draw_turns((480 // 2) - (46 //2), 5, game.turn, anim_turn)
	spr(98, (480 // 2) - 36, 8)
	spr(100, (480 // 2) + 17, 8)
	
	-- Animation
	--line(239, 95 - 50, 239, 95, 62)
	line(239 - 70, 95, 239 + 70, 95, 62)
	
	gfx_draw_bars(game.hero, "left", game.enemy)
	gfx_draw_bars(game.enemy, "right", game.hero)
	
	if substate == attacking then
		print("\f7Fight!", 210, 85)
	elseif substate == defending then
		print("\f7Fight!", 250, 85)
	end
	
	gfx_draw_intent(game.enemy)
	
	if false and game.hero.gems then
		local att = game.hero.gems[gem_attack]
		local dod = game.hero.gems[gem_dodge]
		local blo = game.hero.gems[gem_block]
		local arm = game.hero.gems[gem_armor]
		local spe = game.hero.gems[gem_special]
		print(
			"\014" -- "\014\^o2ff"
			..((att == 0) and "\fg - " or string.format("\fg%2d ", att))
			..((arm == 0) and "\fv - " or string.format("\fv%2d ", arm))
			..((blo == 0) and "\fq - " or string.format("\fq%2d ", blo))
			..((dod == 0) and "\fl - " or string.format("\fl%2d ", dod))
			..((spe == 0) and "\f{ - " or string.format("\f{%2d ", spe))
			,
			30, 98
		)
	end

	-- Update the cursor
	local mx, my = mouse()
	local cursor_pos = cells:pos(mx, my)
	local cell = cells:get(cursor_pos)
	if cell and cell ~= 0
			and (substate == waiting_for_input or substate == waiting_for_swap) then
		window { cursor = "grab" }
	else
		window { cursor = "" }
	end
	if false then
		rectfill(mx + 4 - 10, my + 10, mx + 36, my + 20, 7)
		print(tostr(cursor_pos.x)..","..tostr(cursor_pos.y), mx + 6 - 10, my + 12, 0)
	end
end
:: src/in_menu.lua
--[[pod_format="raw",created="2025-05-14 19:22:29",modified="2025-05-16 20:12:49",revision=1185]]
in_menu = {}


config = {
	tiling = "square",
}

local gui

function in_menu:enter()
	gui = create_gui()
end


function in_menu:exit()
end


function in_menu:update()
	if keyp("s") then
		config.tiling = "square"
		return in_game
	end
	if keyp("h") then
		config.tiling = "hex"
		return in_game
	end
	return false
end


function in_menu:draw()
	cls(63)
	local mx, _, _, _, _ = mouse()
	if mx <= 110 then
		window { cursor = "pointer" }
	else
		window { cursor = "crosshair" }
	end
end
:: src/sgrid.lua
--[[pod_format="raw",created="2024-08-24 07:17:45",modified="2025-05-16 20:12:49",revision=7126]]
--- Square Grids

--- The origin of the grid, `pos(0, 0)`, is at the top left.


-- Local Constants --------------------------------------------------------


local max_width <const> = 16
local max_height <const> = 9


-- Constructors -----------------------------------------------------------


local metatable = {}


function metatable:new_grid()
	return sgrid_new()
end


function sgrid_new()
	local grid = {}
	metatable.default_origin(grid)
	setmetatable(grid, { __index = metatable })
	for i = 0, max_width * max_height do
		grid[i] = false
	end
	return grid
end


function metatable:clone()
	local grid = self:new_grid()
	grid.origin = self.origin
	self:foreachpos(function(p, item) grid:set(p, item) end)
	return grid
end


-- Indexing --------------------------------------------------------------------


function metatable:tiling()
	return "square"
end


function metatable:get(p)
	if p.x < 0 or p.y < 0 or p.x >= max_width or p.y >= max_height then
		return false
	end
	return self[p.x + (p.y * max_width)]
end


function metatable:set(p, value)
	if p.x < 0 or p.y < 0 or p.x >= max_width or p.y >= max_height then
		return false
	end
	self[p.x + (p.y * max_width)] = value
end


function metatable:merge(p, state)
	if p.x < 0 or p.y < 0 or p.x >= max_width or p.y >= max_height then
		return false
	end
	local index = p.x + (p.y * max_width)
	if not self[index] then
		self[index] = {}
	end
	for k, v in pairs(state) do
		self[index][k] = v
	end
end


function metatable:del(p)
	if p.x < 0 or p.y < 0 or p.x >= max_width or p.y >= max_height then
		return false
	end
	self[p.x + (p.y * max_width)] = false
end


function metatable:distance(p0, p1)
	return abs(p0.x - p1.x) + abs(p0.y - p1.y)
end


-- Screen Coordinates ---------------------------------------------------------


function metatable:default_origin()
	self.origin = { x = 121, y = 4 }
end


function metatable:compute_origin()
	local min_p = pos(max_width, max_height)
	local max_p = pos(0, 0)
	self:foreachpos(
		function(position, cell)
			if not cell or cell == 0 then
				return
			end
			if position.x < min_p.x then min_p.x = position.x end
			if position.y < min_p.y then min_p.y = position.y end
			if position.x > max_p.x then max_p.x = position.x end
			if position.y > max_p.y then max_p.y = position.y end
		end
	)
	local width = 1 + max_p.x - min_p.x
	local height = 1 + max_p.y - min_p.y
	self.origin = {
		x = (480 // 2) - ((width * 29) // 2) - (min_p.x * 29),
--		y = 20 + ((270 - 20) // 2) - ((height * 29) // 2) - (min_p.y * 29),
		y = 270 -(height * 29) - 11
	}
end


function metatable:coords_origin()
	return self.origin.x, self.origin.y
end


function metatable:coords_cell(p)
	local ox, oy = self:coords_origin()
	return ox + p.x * 29, oy + p.y * 29
end


function metatable:coords_gem(p)
	local ox, oy = self:coords_origin()
	return ox + p.x * 29, oy + p.y * 29
end


function metatable:pos(x, y)
	local ox, oy = self:coords_origin()
	return pos((x - ox) // 29, (y - oy) // 29)
end


-- Iterating -------------------------------------------------------


function metatable:foreachpos(func)
	local p = pos(0, 0)
	for x = 0, max_width do
		for y = 0, max_height do
			local p = pos(x, y)
			local item = self:get(p)
			if item then
				func(p, item)
			end
		end
	end
end	


function metatable:neighbours(p)
	return {
		{ position = p + pos(1, 0), direction = "horizontal" },
		{ position = p + pos(0, 1), direction = "vertical" },
		{ position = p + pos(-1, 0), direction = "horizontal" },
		{ position = p + pos(0, -1), direction = "vertical" },
	}
end


function metatable:blast_radius(p)
	return {
		p + pos(0, 0),
		p + pos(1, 0),
		p + pos(1, 1),
		p + pos(0, 1),
		p + pos(-1, 1),
		p + pos(-1, 0),
		p + pos(-1, -1),
		p + pos(0, -1),
		p + pos(1, -1),
	}
end

:: src/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA4LTI0IDA3OjE3OjA5Iixtb2RpZmllZD0iMjAyNS0w
NS0xNiAyMDoxMjo0OSJdXQ==
:: debug.lua
--[[pod_format="raw",created="2024-08-24 12:45:09",modified="2025-05-16 20:12:49",revision=3888]]
-- Detect uninitialized globals and typos
-- from @snowkittykira from the BBS


-- if you're using include(), include this after including everything else,
-- since most included modules will need to assign global variables on load

-- these globals are needed by picotron
_init = _init or false
_draw = _draw or false
_update = _update or false
-- these are used by the picotron terminal
cproj_draw = cproj_draw or false
cproj_update = cproj_update or false
_ = _ or false
_is_terminal_command = _is_terminal_command or false
k = k or false
res = res or false
-- gui needs these
drag_t = drag_t or false

local function unknown_variable (t, k)
  error (debug.traceback ('unknown variable ' .. tostring (k), 2))
end

setmetatable (_G, {
  __index = unknown_variable,
  __newindex = unknown_variable,
})
:: drakma.lua
b64$LS1bW3BvZF9mb3JtYXQ9InJhdyIsY3JlYXRlZD0iMjAyNC0wNC0wNyAwNzo0Mjo0NSIsbW9k
aWZpZWQ9IjIwMjUtMDUtMTYgMjA6MTI6NDkiLHJldmlzaW9uPTUzMjBdXQpfbW9kdWxlcyA9IHt9
CgotLSBBICdyZXF1aXJlJyBmdW5jdGlvbiBzaW1pbGFyIHRvIHN0YW5kYXJkIEx1YS4KLS0gSWRl
YSBmcm9tIGVsZ29waGVyIG9uIHRoZSBCQlMKZnVuY3Rpb24gcmVxdWlyZShuYW1lKQoJbG9jYWwg
Y2FjaGVkID0gX21vZHVsZXNbbmFtZV0KCWlmIChjYWNoZWQpIHJldHVybiBjYWNoZWQKCglsb2Nh
bCBmaWxlbmFtZSA9IGZ1bGxwYXRoKG5hbWUgLi4gJy5sdWEnKQoJbG9jYWwgc3JjID0gZmV0Y2go
ZmlsZW5hbWUpIAoKCWlmICh0eXBlKHNyYykgIT0gInN0cmluZyIpIHBhbmljKCJjb3VsZCBub3Qg
aW5jbHVkZSAiIC4uIGZpbGVuYW1lKQoKCS0tIGh0dHBzOi8vd3d3Lmx1YS5vcmcvbWFudWFsLzUu
NC9tYW51YWwuaHRtbCNwZGYtbG9hZAoJLS0gY2h1bmsgbmFtZSAoZm9yIGVycm9yIHJlcG9ydGlu
ZykKCS0tIG1vZGUgKCJ0IiBmb3IgdGV4dCBvbmx5IC0tIG5vIGJpbmFyeSBjaHVuayBsb2FkaW5n
KQoJLS0gX0VOViB1cHZhbHVlCgktLSBAIGlzIGEgc3BlY2lhbCBjaGFyYWN0ZXIgdGhhdCB0ZWxs
cyBkZWJ1Z2dlciB0aGUgc3RyaW5nIGlzIGEgZmlsZW5hbWUKCWxvY2FsIGZ1bmMsIGVyciA9IGxv
YWQoc3JjLCAiQCIgLi4gZmlsZW5hbWUsICJ0IiwgX0VOVikKCWlmIChub3QgZnVuYykgcGFuaWMo
IlN5bnRheCBlcnJvcjoiLCB0b3N0cihlcnIpKQoKCWxvY2FsIG1vZHVsZSA9IGZ1bmMoKQoJX21v
ZHVsZXNbbmFtZV0gPSBtb2R1bGUKCglyZXR1cm4gbW9kdWxlCmVuZAoKCmZ1bmN0aW9uIHBhbmlj
KC4uLikKCWxvY2FsIGFyZ3MgPSB7IC4uLiB9Cglmb3JlYWNoKAoJCWFyZ3MsCgkJZnVuY3Rpb24o
c3RyKQoJCQlzZW5kX21lc3NhZ2UoMywgeyBldmVudCA9ICJyZXBvcnRfZXJyb3IiLCBjb250ZW50
ID0gc3RyIH0pCgkJZW5kCgkpCglzdG9wKCkKZW5kCgoKLS0gVGFibGUgdXRpbGl0eSBmdW5jdGlv
bnMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0KCgpmdW5jdGlvbiBpc19lbXB0eSh0KQoJcmF3ZXF1YWwobmV4dCh0KSwgbmlsKQplbmQKCmZ1
bmN0aW9uIGRlZXBfY29weSh0LCBhbHJlYWR5KQoJaWYgKG5vdCBhbHJlYWR5KSBhbHJlYWR5ID0g
e30KCWlmIHR5cGUodCkgPT0gInRhYmxlIiB0aGVuCgkJaWYgYWxyZWFkeSBhbmQgYWxyZWFkeVt0
XSB0aGVuCgkJCXJldHVybiBhbHJlYWR5W3RdCgkJZW5kCgkJbG9jYWwgbmV3ID0ge30KCQlhbHJl
YWR5W3RdID0gbmV3CgkJZm9yIGssIHYgaW4gcGFpcnModCkgZG8KCQkJbmV3W2tdID0gZGVlcF9j
b3B5KHYsIGFscmVhZHkpCgkJZW5kCgkJcmV0dXJuIG5ldwoJZWxzZQoJCXJldHVybiB0CgllbmQK
ZW5kCgoKZnVuY3Rpb24gdG9zdHJyZWModCkKCWlmIHR5cGUodCkgIT0gInRhYmxlIiB0aGVuCgkJ
cmV0dXJuIHRvc3RyKHQpCgllbmQKCQoJbG9jYWwgcyA9IG5pbAoJZm9yIGssIHYgaW4gcGFpcnMo
dCkgZG8KCQlpZiBub3QocykgdGhlbgoJCQlzID0gInsgIgoJCWVsc2UKCQkJcyAuLj0gIiwgIgoJ
CWVuZAoJCXMgLi49IHRvc3RyKGspIC4uICIgPSAiIC4uIHRvc3RycmVjKHYpCgllbmQKCWlmIG5v
dCBzIHRoZW4KCQlyZXR1cm4gInt9IgoJZW5kCglzIC4uPSAiIH0iCgoJcmV0dXJuIHMKZW5kCgoK
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCgpmdW5jdGlvbiBjbGFtcCh2LCBtaW4sIG1heCkKCWlm
IHYgPCBtaW4gdGhlbgoJCXJldHVybiBtaW4KCWVuZAoJaWYgdiA_IG1heCB0aGVuCgkJcmV0dXJu
IG1heAoJZW5kCglyZXR1cm4gdgplbmQKCgpmdW5jdGlvbiBleHBfZGVjYXkoYSwgYiwgZGVjYXks
IGR0KQoJLS0tIExlcnAgc21vb3RoaW5nLCBidXQgZnJhbWVyYXRlLWluZGVwZW5kYW50LCBmcm9t
IEZyZXlhIEhvbG3DqXIKCS0tLSBodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PUxTTlF1
RkVET3lRCgktLS0gVXNlIGFzIGBhID0gZXhwX2RlY2F5KGEsIGIsIGRlY2F5LCBkdClgCglyZXR1
cm4gYiArIChhIC0gYikgKiBtYXRoLmV4cCgtIGRlY2F5ICogZHQpCmVuZAoKCi0tIFBvcyAtLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLQoKCi0tIFdBUk5JTkc6IGRvIG5vdCBmb3JnZXQgdGhhdCBgcG9zYCBpcyBh
IHJlZmVyZW5jZSB0eXBlLCBub3QgYSB2YWx1ZToKLS0gYXZvaWQgbW9kaWZ5aW5nIGluIHBsYWNl
LgpmdW5jdGlvbiBwb3MoeCwgeSkKCWxvY2FsIHAgPSB1c2VyZGF0YSgiaTE2IiwgMikKCXAueCA9
IHgKCXAueSA9IHkKCXJldHVybiBwCmVuZAoKCi0tIERyYXdpbmcgLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoK
Ci0tIEZyb20gU29waGllIG9uIHRoZSBkaXNjb3JkCmZ1bmN0aW9uIGdldF9kcmF3c3BhY2UoKQog
ICAgcmV0dXJuIHsKICAgICAgICBjYW1feD1wZWVrNCgweDU1MTApLAogICAgICAgIGNhbV95PXBl
ZWs0KDB4NTUxNCksCiAgICAgICAgY2xpcF9sPXBlZWsyKDB4NTUyOCksCiAgICAgICAgY2xpcF90
PXBlZWsyKDB4NTUyYSksCiAgICAgICAgY2xpcF9yPXBlZWsyKDB4NTUyYyksCiAgICAgICAgY2xp
cF9iPXBlZWsyKDB4NTUyZSksCiAgICB9CmVuZAoKCmZ1bmN0aW9uIHNldF9kcmF3c3BhY2UoZHJh
d3NwYWNlKQogICAgcG9rZTQoMHg1NTEwLGRyYXdzcGFjZS5jYW1feCkKICAgIHBva2U0KDB4NTUx
NCxkcmF3c3BhY2UuY2FtX3kpCiAgICBwb2tlMigweDU1MjgsZHJhd3NwYWNlLmNsaXBfbCkKICAg
IHBva2UyKDB4NTUyYSxkcmF3c3BhY2UuY2xpcF90KQogICAgcG9rZTIoMHg1NTJjLGRyYXdzcGFj
ZS5jbGlwX3IpCiAgICBwb2tlMigweDU1MmUsZHJhd3NwYWNlLmNsaXBfYikKZW5k
:: label.qoi
b64$cW9pZgAAAeAAAAEOBAH_aJHV-f39-f39-f39-f39-f39-f395-6mpqb91P5aXmgV-f39-f39
1S-_dHd9-dMxFf39-f39-dQvD-3VMRX9-f3Q-qglksIVwyTCFf398i8P-dUx-lBzxBX9-fIkwhXD
JMIVyyT_74PFwiQVwSQ0wiQV-f3wLw-91zEV-f3xJDTCJBXBJDTCJBXJJDTEJBUkNMQkFcT__LvZ
whXCM8IVxjP99BXdLw-91zEAFdoz-fQVyDPAFcIzxBXFJDTEJBUkNMQkFcgkNMUkNMUkABXCM8QV
wDPEFcQz-uJJuv30MxXbLw-KMcoPxjHXD8Yxyg-KMRXZMx799DMVxjPBABXBM8QAFcQkNMUkNMUk
ABXHJDTNJAAVwjPAAMAzwAAVM8AAwDPAABXCMx799jMV2i8PyTH_gYSKyjEPxTH_4_Pjxf6ysrIC
xSMCxS8PxTESyjEPyTEAFdczHv32MxXEM8IAFcEzwADDFcQkNM0kABXHJDTNJAAVwwDAFTPAABUz
wAAVM8AAFcIzHv32MwAV2C8PyTESD8oSMQ-EMQLFIwLFIwLFLw-EMRIPyhIxD8kxFdczHv32MwAV
xAAzwAAVwTPDFcYkNM0kABXHJDTNJAAVxTPAAMAVM8AAFTPAABXCMx799jMAFdgvD8gxEg-MlIcS
D8Mx-vT09MUjAcUjAcUvD8MxEg-MFBIPyDEAFdYzHv32MwAVxTPAABXBM8QVxSQ0zSQAFcgkNMsk
AMAVxTPBFcAzwAAVM8AAFcIzHv32MwAV1y8PyTESD8wUEg-DMQHArIjBAcAjAcA1wQHAIwHBNQHB
Lw-DMRIPw-78-PzCD8MUEg-JMRXWMx799jMAFcUzwAAVwgDBM8AAFcUkNMskAMAVySQ0ySQAwBXH
M8AAFTPAABUzwAAVwjMe-fYzABXXLw-CMcEPwjESD8I5xA-CFBIPwzEBNQHBNQEjATUBwTUBIwHA
NcABwS8PwzESD8I5wA-AOcAPwhQSD8IxwQ-CMQAV1TMe-fYzABXFM8AAFcUzwAAVxiQ0ySQAwBXL
JDTHJADAFcQzwBXAM8AAFTPAABUzwAAVwjMe-fYzABXWLw-CMRLADzEPwTESD8wUEg-DMTk1OcE1
OSM5NTnBNTkjOTU5NTnBLw-DMRIPxjnAD8IUEg-BMRIPwDEPwjEV1TMe-fYzABXFM8AAFcEzwBXA
M8AAFcckNMckAMAVzSQ0xSQAwBXFM8QAFTPEABXDMx799DMAwBXWLw-CMRIPwDEUD8AxEg-COcQP
whQSD8MxOTU5wTU5Izk1OcE1OSM5wTU5wS8PwzESD8U5wA-DFBIPwTEPwTEUD8ExABXVMx799DMA
wBXDM8QVwDPEABXIJDTFJADAFc8kNMMkAMAVxzPCAMAVwDPCAMAVxDP99ADAFdcvD8IxD8ExFA-A
MRIPzBQSD8MxOTU5wTU5Izk1OcE1OSM5wTU5wS8PwzESD8Q5wA-EFBIPwTEPwTEUD8ExABXWM-30
AMAVxDPEABXAM8IAwBXJJDTDJADAFdEkNMEkAMAVyQDCFcIAwhXGAP30FdkvD8IxwRTAD8AxEg-C
OcQPwhQSD8MxATUBwTUBIwE1AcE1ASMBwTUBwS8PwzESD8wUEg-CMcEUwA-AMQDAFdcA-fQVxgDE
FcAAwxXLJDTBJADAFdMkNCQAwBX9-fEvD8MUwQ-BMRIPzBQSD8MxAcA1wQHAIwHANcEBwCMBNcMB
Lw-DMRIPxDnAD8QUEg-DFMEPwTEAFf398yQ0JADAFdUkAMAV-f3zLw-IMRIPzBQSD8MxAcUjAcUj
AcUvD8MxEg-MFBIPyDEAwBX9-fQkAMAV1wAV-f30Lw-JMRIPyhQSD8QxAsUjAsUjAsUvD8QxEg-K
FBIPyTEAFf399gAV-f390i8PyTEUyhIPxTECxSMCxSMCxS8PxTEUyhIPyTEAwBX9-f39-f3NLw-K
EsoPxjEv1g-GEsoPyjEAFf39-f3ZAMAVAMAV-e0vD-3XMQDAFf3o-jFuMsAVDMAV-d7_F3l9wRXB
AsEV-AAVwAAVwADBFf3qLw-91zEAFf3oDP6H1FbADAjADMEV-cACwRXBAsEVzwL_XNjSwQLBP8EC
Fcv_rPbwwhXKF9AVzAAVwAAVwAAVwAAVyQDCFf3bLw-91TEAwBX92P6-8pXCFcoMCMAMCMAMCMAM
FcoX0BXLF8IVzQL_XNjSwQLBP8ECFc0CP8kCFckXxBXIF-4gtLPDFz7EFz7DFxXLABXAABXAABXA
ABXIAMQV-dovD-3VMQAV-dj_v-KVxBXJDAjADAjADAjADAAVyBc_wxc_xBc_wxcVyRfEFcsC-lzY
0skCFcsCP8sCFcgXwADAF8AAFcYXPsQXPsQXPsQXFckAwRUAFcAAFcAAFcgAwBXAAMAV-dsvD-3T
MQDAFf3Y-r-ylcAAwD-AABXHDMEIDAjADAjADAAVxxc_xBc_xBc_xBcVyBfAAMAXwAAVyQL_XNjS
ywIVyQI-zQIVyADAFRfAABXGFz7EFz7EFz7EFwAVxwAVwAAVABXAABXAABXIAMAVwADAFf3bLzH9
1AAV-doAwBX_v-KVwAAVxgwIwAwIDAjADAjADAAVxxc_xBc_xBc_xBcAFcgAwBUXwAAVyAL_XNjS
zQIVxwI-zwIVyRfAAMAVxhc_xBc_xBc_xBcAFccAFcAAFcUAFcgAwBXAAMAV-dwA-dUV-dz_v-KV
wADAFcYMCMAMCMUMABXHFz7EFz7EFz7EFwAVyhfAAMAVxwL_XNjSzwIVxwI-wQI-xQI-wQIAFckX
wRXHFz7EFz7EFz7EFwAVxwAVwAAVxQAVyADAFcAAwBX9-f390-6-8pXBFccMCMAMCMUMABXHFz7E
Fz7EFz7EFwAVyhfBFckC-lzY0sECP8UCP8ECABXIAj8CwD-FAsA-AgDAFcoXwAAVxhc_xBc_xBc_
xBcAFccAFcgAFcgAwBXAAMAV-f39-dT_v-KVwAAVxgwIyAwAFccXPsQXPsQXPsQXABXLF8AAFckC
-lzY0gLAP8UCwD8CAMAVyQIVAj-FAgACAMAVxxfAFcAXwAAVxhc_xBc_xBc_xBcAFccAFcgAFcgA
wBXAAMAV-f39-dD_v-KVwBXAP8AAFcYMCMgMABXHFz7EFz7EFz7EFwAVxxfAFcAXwAAVygIVAv5c
2NLFAgACAMAVzAI-xQIAFQAVyBfEABXHFz7DFz7EFz7DFwDAFcgAFccAFcgAxBX9-f390P6-8pXE
ABXHDAjHDAAVyBc_wxc_xBc_wxcAwBXHF8QAFcwC-lzY0sUCABUAFc0CP8UCABXLF8IAwBXIF9AA
wBXKABXFABXKAMIV-f39-dL_v-KVwgDAFcgMCMUMAMAVyRfQAMAVyRfCAMAVzAL_XNjSxQIAFc8C
P8UCABXMAMIVygDQFcsAFcUAFf39-f3jAMIVyQwIxQwAFcsA0BXLAMIVzQI-xQIAFc8CxwAV_wDH
Ff39-f3yDMcAFf0CxwAV0ADHFf39-f39-ADGFf3AAMcV-f39-f39-f39-f39-f39-f39-f39-f39
-f39-f39-f39-f39-f391P774ZnCFco6_hX9-f39yzr6Fcs6whXt-pxxGsAVzjrEFcg6-BX9-f39
yTr8Fck6xBXRNMAV1TTA-u3EVMA0FcE0wBXIOsAAwDrAABXGOv3AFf39-f3HOv3AFcg6wADAOsAA
Fc40wBzANBXBNMAVzTTAHMA0HMA0wRw0ABXHOsAAFTrAABXGOv3AABX9-f39xjr9wAAVxzrAABU6
wAAVzDTAHMA0HMA0wRw0ABXKNMAcwDQcxjQAFcc6wAAVOsAAFcY6wf7WoiXAOsMkwDrDJMA6wyTA
OsMkwDrDJMA6wyTAOsMkwDrDJMA6wQAV-f39-cY6wSTAOsMkwDrDJMA6wyTAOsMkwDrDJMA6wyTA
OsMkwDrDJMA6wQAVxzrAABU6wAAVyjTAHMA0HMY0ABXJNBzANBzINAAVxzrAABU6wAAVxjrBJMA6
wyTAOsMkwDrDJMA6wyTAOsMkwDrDJMA6wyTAOsMkwDrBABX9-f39xjrBJMA6wyTAOsMkwDrDJMA6
wyTAOsMkwDrDJMA6wyTAOsMkwDrBABXHOsAAFTrAABXJNBzANBzINAAVyDQczDQAFcc6wAAVOsAA
FcY6-cAAFf39-f3GOv3AABXHOsAAFTrAABXINBzMNAAVyDQczDQAFcc6wAAVOsAAFcY6-cAAFf39
-f3GOv3AABXHOsAAFTrAABXINBzMNAAVyDQczDQAFcc6xAAVxzr8AMAV-f39-cc6-ADAFcc6xAAV
yDQczDQAFck0zADAFcg6wgDAFcg6_gDAFf39-f3JOvoAwBXJOsIAwBXJNMwAwBXKAMwVygDCFcoA
_hX9-f39ywD6FcsAwhXLAMwV-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39zwDDFf39
-ckAwxX9-f391gAVwwDCFcsAwhX9-d0AwhXOABXDAMIV-f39-c4AwhXEABXBABXJAMQV-f3bAMQV
yQDCFcQAFcEAFf39-f3NABXDAMAVwAAVwQAVyQDAFcAAwBX9-dsAwBXAAMAVyQAVwwDAFcAAFcEA
Ff39-f3NABXEABXAAMIVygDAFcAAwBX9-dsAwBXAAMAVyQAVxAAVwADCFf39-f3OABXEABXAABXB
ABXJAMAVwADAFf392wDAFcAAwBXJABXEABXAABXBABX9-f39zQAVxQDBFcEAFckAwBXAAMAV-f3b
AMAVwADAFckAFcUAwRXBABX9APYV-f3SABXHAMIVygDAFcAAwBX9-dsAwBXAAMAVyQAVxwDCFf3A
ABX0ABX9-dIAFcYAFcEAFcoAwBXAAMAV-f3bAMAVwADAFckAFcYAFcEAFf3AABX0ABX9-dIAwxXC
ABXBABXKAMQV-f3bAMQVyQDDFcIAFcEAFf3AABX0ABX9-dcAxhXMAMIV-f3dAMIVzwDGFf3BABXE
AMAVwADBFQAVABUAwRXDAMEVABUAFQDBFQDAFcwAFf39-f39-fIAFcQAFQAVABXBABUAFcAAFcUA
FcAAFQAVABUAFQAVABXAABXIABX9-f39-f3yABXEABUAFQDAFcEAFcEAFcUAFcAAFQAVAMAVwAAV
ABXLABX9-f39-f3yABXEABUAFQAVwQAVABXAABXFABXAABUAFQAVABUAFQAVwAAVyAAV-f39-f39
8gAVxAAVABUAwRUAFQAVwAAVxQAVwQDAFQAVABUAFQAVywAV-f39-f398gAV9AAV-f3ZABX9-f3N
ABX9xgAV9AAV-f3ZABX9-f3NABX9xgAV9AAV-f3YABUAFf39-csAFQAV-cUAFfQAFf392AAVABXQ
AMIV-f3dAMIV0AAVABX9xQAV9AAV-f3XABXBABXOAMQV-f3bAMQVzgAVwQAV-cQAFfQAFf391wAV
wQAVzgDAFcAAwBX9-dsAwBXAAMAVzgAVwQAV-cQAFfQAFf391QDAFcMAwBXMAMAVwADAFf392wDA
FcAAwBXMAMAVwwDAFf3CABXY-vOCV8MV1QAV-f3TAMAVxwDAFcoAwBXAAMAV-f3bAMAVwADAFcoA
wBXHAMAV-cAAFdc5FcM5whXRABX9-dEAwBXLAMAVyADAFcAAwBX9-dsAwBXAAMAVyADAFcsAwBX8
ABXTOcIVxDkVwTkV0AAV-f3TAMAVxwDAFcoAwBXAAMAV-f3bAMAVwADAFcoAwBXHAMAV-cAAFdM5
FcM5wBXAORXBORXQABX9-dUAwBXDAMAVzADAFcAAwBX9-dsAwBXAAMAVzADAFcMAwBX9wgAV0zkV
xDkVwDnCFdEAFf391wAVwQAVzgDEFf392wDEFc4AFcEAFf3EABXTORXEORXAORXBORXQABX9-dcA
FcEAFc8AwhX9-d0AwhXPABXBABX9xAAV0zkVxTnBFcE5FdAAFf392AAVABX9-f3LABUAFf3FABXT
ORXHOcIV0QAV-f3YABUAFf39-csAFQAV-cUAFdM5FcY5FcE5FdEAFf392QAV-f39zQAV-cYAFdM5
wxXCORXBORXRABX9-dkAFf39-c0AFf3GABXYOcYV0gAV-f39-f398gAV9AAV-f39-f398gAV9AAV
-f39-f398gAV9AAV-f39-f398gAV9AAV-f33AP39zxX95gAV9AAV-f39-f398gAV9AAV-f39-f39
8gD2Ff39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39
-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-ej_
wcHBL-39-f39-f3fFcovBC-9-f39-f393TEAFckvwA-bEtsP2xLbD9sS2w-bEtsP2xLbD9sS2w-b
EtsP2xLbMcAAFckvwA-bEtsPywzBD8sSywzBEssP2xLbD9sSywzBEssPy-5eJrPBD8sS2w-LDMEP
yxLbD8sMwQ-LEtsP2xLLMsESyzHAABXJL8AP2xLbD8oMCP6-8pUIDA-KEsoMCD8IDBLKD9sS2w-I
NMcPyBLKDAg-CAwSyg-JMsD_roH5-tjE-BMywA-JEsn_ojIZxRLJD8oMCD8IDA-KEsg0xxLID8oM
CD8IDA-KEsg0xxLID9sSyTLAEzUTMsASyTHAABXJL8APxALPD8QSxALPEsQPyQw--lCjLMH_h9RW
DA-JEskMP-5QoyzB-ofUVgwSyQ-EAs8PxBLEAs8SxA-HNDrDHDocwDQPxxLJDD-_UKMswf6H1FYM
EskPxzLANcD_jTvtwRPAMsAPxxLHBMD_-LycwTkZOcAEwBLHD8kMP-5QoyzB-ofUVgwPyRLHNDrD
HDocwDQSxw-JDD-_UKMswf6H1FYMD8kSxzQ6wxw6HMA0EscPxALPD8QSxzLANcA_wRPAMsASxzHA
ABXJL8APwwIXy-5c2NIXP8ACD8MSwwIXyz8XP8ACEsMPyAz_v-KV-lCjLMP_h9RWDA-IEsgMP-5Q
oyzD-ofUVgwSyA-DAhfL-lzY0hc-wAIPwxLDAhfLPxc-wAISww-GNDokxxw0D8YSyAz_v-KV-lCj
LMP_h9RWDBLID8UywDXAPsUTwDLAD8USxQTAGcD_1U8hxTnA-ncsFsASxQ-IDD-_UKMsw-6H1FYM
D8gSxjQ6JMccNBLGD8gMP-5QoyzD-ofUVgwPyBLGNDokxxw0EsYPwwIXy-5c2NIXP8ACD8MSxTLA
NcA_xRPAMsASxTHAABXJL8APwgIX-iC0s88--hZYVQ-CEsL_F3l9Fz7PP-4WWFUSwg-HDP6-8pX_
UKMsxf6H1FYMD8cSxww--lCjLMX_h9RWDBLHD8L_F3l9Fz7P-lzY0v4WWFUPwhLC-hd5fRc_zz-_
FlhVEsIPxTQ6JMkcNA-FEscM-r-ylf5QoyzF-ofUVgwSxw-DMsA1wP6NO_3JE8AywA-DEsQEGcAm
yTkEEBLED8cMP-5QoyzF-ofUVgwPxxLFNDokyRw0EsUPxww--lCjLMX_h9RWDA-HEsU0OiTJHDQS
xQ-C-hd5fRf_ILSzz-5c2NL_FlhVD8ISwzLANcD_jTvtyRPAMsASwzHAABXJL8APwf4XeX0X-iC0
s9EC-hZYVQ-BEsH_F3l9Fz7RAv4WWFUSwQ-GDP6-8pX_UKMsx-6H1FYMD8YSxgw--lCjLMf_h9RW
DBLGD8H_F3l9Fz7RAv4WWFUPwRLB-hd5fRc_0QL_FlhVEsEPxDQ6JMscNA-EEsYMP-5QoyzH-ofU
VgwSxg-BMsA1wP6NO_3FMj7FE8AywA-BEsMEGSbNBBASww-GDD-_UKMsx-6H1FYMD8YSxDQ6JMsc
NBLED8YMP-5QoyzH-ofUVgwPxhLENDokyxw0EsQPwf4XeX0X-iC0s9EC-hZYVQ-BEsEywDXA-o07
7cUyPsUTwDLAEsExwAAVyS-AD8H_F3l9F-4gtLPRAv4WWFUxD8ASwf4XeX0XPtEC-hZYVTESwA-F
DD-_UKMswAzACAzACML_h9RWDA-FEsUMP-5QoyzADMAIDMAIwv6H1FYMEsUPwf4XeX0XPtEC-hZY
VTEPwBLB-hd5fRc_0QL_FlhVMRLAD8M0OiTNHDQPwxLFDD-_UKMswAzACAzACML_h9RWDBLFD8Ay
NcD_jTvtxzI_xxM_-kcihg-AEsIEGSbPBBASwg-FDD-_UKMswAzACAzACML_h9RWDA-FEsM0OiTN
HDQSww-FDD-_UKMswAzACAzACML_h9RWDA-FEsM0OiTNHDQSww-B-hd5fRf_ILSz0QL_FlhVMQ-A
EsAyNcD_jTvtxzI_xxM_HhLAMcAAFckvwA-B-hd5fRf_ILSzwwLBPsECwT7DAv4WWFUxD8ASwf4X
eX0XPsMCwT7BAsE_wwL_FlhVMRLAD8QMP-5QoyzADD-ADD-ADMEIwP6H1FYMD8QSxAw--lCjLMAM
P8AMP8AMwQjA-ofUVgwSxA-B-hd5fRc_wwLBPsECwT7DAv4WWFUxD8ASwf4XeX0XPsMCwT7BAsE_
wwL_FlhVMRLAD8I0OiTPHDQPwhLEDD-_UKMswAw-wAw-wAzBCMD_h9RWDBLED8AyNf6NO_3HMjUy
PscyHjEPEsIEGSbPBBAxEsEPxAw--lCjLMAMP8AMP8AMwQjA-ofUVgwPxBLCNDokzxw0EsIPxAw-
-lCjLMAMP8AMP8AMwQjA-ofUVgwPxBLCNDokzxw0EsIPwf4XeX0X-iC0s8MCwT7BAsE_wwL_FlhV
MQ-AEsAyNf6NO_3HMjUyPscyHjESMcAAFckvwA-B-hd5fRf_ILSzwgIXwQLBF8ECPsIC-hZYVTEP
wBLB-hd5fRc_wgIXwQLBF8ECPsIC-hZYVTESwA-DDD-_UKMswQw-wAw-wAw-wAwIwP6H1FYMD8MS
www--lCjLMEMP8AMP8AMP8AMCMD_h9RWDBLDD8H_F3l9Fz7CAhfBAsEXwQI_wgL_FlhVMQ-AEsH_
F3l9Fz7CAhfBAsEXwQI_wgL_FlhVMRLAD8E0OiTHNMAkxhw0D8ESwww--lCjLMEMP8AMP8AMP8AM
CMD_h9RWDBLDD8AyNf6NO_3HMjUyPscyHjEPEsEEGSbFBMMmxQQQEsEPwww--lCjLMEMP8AMP8AM
P8AMCMD_h9RWDA-DEsE0OiTHNMAkxhw0EsEPwww--lCjLMEMP8AMP8AMP8AMCMD_h9RWDA-DEsE0
OiTHNMAkxhw0EsEPwf4XeX0X-iC0s8ICF8ECwRfBAj7CAv4WWFUxD8ASwDI1-o077ccyNTI_xzIe
MRIxwAAVyS-AD8H_F3l9F-4gtLPBAhfJAj7BAv4WWFUxD8ASwf4XeX0XPsECF8kCPsEC-hZYVTES
wA-CDD-_UKMswgw-wAw-wAw-wAwIwf6H1FYMD8ISwgw--lCjLMIMP8AMP8AMP8AMCMH_h9RWDBLC
D8H_F3l9Fz7BAhfJAj7BAv4WWFUxD8ASwf4XeX0XPsECF8kCPsEC-hZYVTESwA-ANDokxjTAOsA0
JME0wCTBHP5nSRMPwBLCDD-_UKMswgw-wAw-wAw-wAwIwf6H1FYMEsIPwDI1-o077cYyNcEyPsYy
HjEPEsEEGSbEBBnDBMImwQQQMRLAD8IMP-5QoyzCDD-ADD-ADD-ADAjB-ofUVgwPwhLANDokxjTA
OsA0JME0wCTB-u3EVP5nSRMSwA-CDD-_UKMswgw-wAw-wAw-wAwIwf6H1FYMD8ISwDQ6JMY0wDrA
NCTBNMAkwf7txFT_Z0kTEsAPwf4XeX0X-iC0s8ECF8kCPsEC-hZYVTEPwBLAMjX_jTvtxjI1wTI_
xjIeMRIxwAAVyS-AD8H_F3l9F-4gtLPAAhfLAj7AAv4WWFUxD8ASwf4XeX0XPsACF8sCPsAC-hZY
VTESwA-BDD-_UKMswgzBPww-wAw-wAwIwv6H1FYMD8ESwQw--lCjLMIMwT8MP8AMP8AMCML_h9RW
DBLBD8H_F3l9Fz7AAhfLAj7AAv4WWFUxD8ASwf4XeX0XPsACF8sCPsAC-hZYVTESwA-ANDokxDTA
OsA0OsA0wTo0JME0HDEPEsEMP-5QoyzCDME-DD-ADD-ADAjC-ofUVgwSwQ-AMjX_jTvtxjI1wTI_
xjIeMQ8SwAQZJsEEwhnEBBnBBCbBBBASwA-BDD-_UKMswgzBPww-wAw-wAwIwv6H1FYMD8ESwDQ6
JMQ0wDrANDrANME6NCTBNBwxEg-BDD-_UKMswgzBPww-wAw-wAwIwv6H1FYMD8ESwDQ6JMQ0wDrA
NDrANME6NCTBNBwxEg-B-hd5fRf_ILSzwAIXywI_wAL_FlhVMQ-AEsAyNf6NO_3GMjXBMj7GMh4x
EjHAABXJL8APwf4XeX0X-iC0swIXzQI_Av4WWFUxD8ASwf4XeX0XPgIXzQI_Av4WWFUxEsAPwAw-
-lCjLMIMP8AMPww-wAw-wAwIw-6H1FYMD8ASwAw--lCjLMIMP8AMPww-wAw-wAwIw-6H1FYMEsAP
wf4XeX0XPgIXzQI_Av4WWFUxD8ASwf4XeX0XPgIXzQI_Av4WWFUxEsAPwDQ6JMI0wDrANDrGNCTB
NBwxDxLADD-_UKMswgw-wAw-DD-ADD-ADAjD-ofUVgwSwA-AMjX_jTvtxDLANcMywD7EMh4xDxLA
BBkmwQQZwwTAGcAEGcEEJsEEEDESD8AMP-5QoyzCDD-ADD8MP8AMP8AMCMP_h9RWDA-AEsA0OiTC
NMA6wDQ6xjQkwTQcMRIPwAw--lCjLMIMP8AMPww-wAw-wAwIw-6H1FYMD8ASwDQ6JMI0wDrANDrG
NCTBNBwxEg-B-hd5fRf_ILSzAhfNAj4C-hZYVTEPwBLAMjX_jTvtxDLANcMywD7EMh4xEjHAABXJ
L8APwf4XeX0XAhfPAsD_FlhVMQ-AEsH_F3l9FwIXzwLA-hZYVTESwA8MCP5QoyzDDD-ADD-FDAjE
DP4tUyUPEgz_h9RW-lCjLMMMP8AMP8UMCMQMHhIPwf4XeX0XAhfPAsD_FlhVMQ-AEsH_F3l9FwIX
zwLA-hZYVTESwA-ANDokwTQ6wDQ6yDQkwTQcMQ8SDP6H1Fb_UKMswww-wAw-xQwIxAweEg-AMjU_
wjLANccywD7CMv5HIoYxDxLABBkmwQQZxAQZwATCJsIEEDESDwz_h9RW-lCjLMMMP8AMP8UMCMQM
-i1TJQ8SwDQ6JME0OsA0Osg0JME0HDESDwz_h9RW-lCjLMMMP8AMP8UMCMQMHg8SwDQ6JME0OsA0
Osg0JME0HDESD8H_F3l9FwIXzwLA-hZYVTEPwBLAMjU_wjLANccywD7CMv5HIoYxEjHAABXJL8AP
wf4XeX0X-iC0swIXwQIXxQIXwQI_Av4WWFUxD8ASwf4XeX0XPgIXwQIXxQIXwQI_Av4WWFUxEsAP
DD8Iwww-wAw-xQwIxAz_LVMlMRIMPwjDDD-ADD-FDAjEDB4xD8H_F3l9Fz4CF8ECF8UCF8ECPgL_
FlhVMQ-AEsH_F3l9Fz4CF8ECF8UCF8ECPgL_FlhVMRLAD8A0OiTANDrMNCTBNBwxDxIMPwjDDD-A
DD-FDAjEDB4xD8AyNf6NO_3AMsA1yzLAPsAy-kcihjEPEsAEOSbBBBnEBBnABBnBBCbBBBAxEg8M
PwjDDD-ADD-FDAjEDP4tUyUxEsA0OiTANDrMNCTBNBwxEg8MPwjDDD-ADD-FDAjEDB4xEsA0OiTA
NDrMNCTBNBwxEg-B-hd5fRf_ILSzAhfBAhfFAhfBAj4C-hZYVTEPwBLAMjX_jTvtwDLANcsywD7A
Mv5HIoYxEjHAABXJL8APwf4XeX0X-iC0s8ACFwLAF8UCwBcCPsAC-hZYVTEPwBLB-hd5fRc_wAIX
AsAXxQLAFwI_wAL_FlhVMRLADwz_h9RW-lCjLMMMP8gMCMQM-i1TJTESDP6H1Fb_UKMswww-yAwI
xAweMQ-B-hd5fRc_wAIXAsAXxQLAFwI_wAL_FlhVMQ-AEsH_F3l9Fz7AAhcCwBfFAsAXAj7AAv4W
WFUxEsAPwDT_7cRUJMA0Osw0JME0-mdJEzEPEgz_h9RW-lCjLMMMP8gMCMQMHjEPwDI1-o077cIy
wDXHMsA_wjL_RyKGMQ8SwAQZJsEEGcUEwRnBBCbBBBAxEg8M-ofUVv5QoyzDDD-IDAjEDP4tUyUx
EsA0-u3EVCTANDrMNCTBNP5nSRMxEg8M-ofUVv5QoyzDDD-IDAjEDB4xEsA0-u3EVCTANDrMNCTB
NP5nSRMxEg-B-hd5fRf_ILSzwAIXAsAXxQLAFwI_wAL_FlhVMQ-AEsAyNf6NO_3CMsA1xzLAPsIy
-kcihjESMcAAFckvwA-B-hd5fRf_ILSzwQI_AhfFAj4CPsEC-hZYVTEPwBLB-hd5fRc_wQI_AhfF
Aj4CPsEC-hZYVTESwA-A-i1TJQwIwgw-yAwIwwweMcASwB4MCMIMP8gMCMMMHjHAD8H_F3l9Fz7B
Aj4CF8UCPgI_wQL_FlhVMQ-AEsH_F3l9Fz7BAj4CF8UCPgI_wQL_FlhVMRLAD8A0OiTANDrMNCTB
NBwxDxLAHgwIwgw-yAwIwwweMcAPwDI1-o077cQywDXDMsA_xDL_RyKGMQ8SwAQ5JsEEGccEwibC
BBAxEg-A-i1TJQwIwgw-yAwIwwweMcASwDQ6JMA0Osw0JME0HDESD8AeDAjCDD-IDAjDDB4xwBLA
NDokwDQ6zDQkwTQcMRIPwf4XeX0X-iC0s8ECPgIXxQI_Aj7BAv4WWFUxD8ASwDI1-o077cQywDXD
MsA_xDL_RyKGMRIxwAAVyS-AD8H_F3l9F-4gtLPDAhfFAj7DAv4WWFUxD8ASwf4XeX0XPsMCF8UC
PsMC-hZYVTESwA-B-i1TJQwIwgw-xwwIwgweMcAPEsEeDAjCDD-HDAjCDB4xwBIPwf4XeX0XPsMC
F8UCPsMC-hZYVTEPwBLB-hd5fRc_wwIXxQI_wwL_FlhVMRLAD8A0-u3EVCTBNMwkwjT_Z0kTMQ8S
wR4MCMIMP8cMCMIMHjHAEg-AMhP_jTvtxjI1wTI_xjL_RyKGMQ8SwAQ5JsEEGcYEGcEEJsIEEDES
D8H_LVMlDAjCDD-HDAjCDB4xwA8SwDT_7cRUJME0zCTCNP5nSRMxEg-BHgwIwgw-xwwIwgweMcAP
EsA0-u3EVCTBNMwkwjT_Z0kTMRIPwf4XeX0X-iC0s8MCF8UCPsMC-hZYVTEPwBLAMhP_jTvtxjI1
wTI_xjL_RyKGMRIxwAAVyS-AD8H_F3l9F-4gtLPDAhfFAj7DAv4WWFUxD8ASwf4XeX0XPsMCF8UC
PsMC-hZYVTESwA-C-i1TJQwIwgw-xQwIwgweMcAPwBLCHgwIwgw-xQwIwgweMcASwA-B-hd5fRc_
wwIXxQI_wwL_FlhVMQ-AEsH_F3l9Fz7DAhfFAj7DAv4WWFUxEsAPwDT_7cRUJNM0-mdJEzEPEsIe
DAjCDD-FDAjCDB4xwBLAD8AyNf6NO_3GMjXBMj7GMv5HIoYxDxLBBDkmwATDGcIEGcEEJsEEEDHA
Eg-C-i1TJQwIwgw-xQwIwgweMcAPwBLANP7txFQk0zT_Z0kTMRIPwh4MCMIMP8UMCMIMHjHAD8AS
wDT_7cRUJNM0-mdJEzESD8H_F3l9F-4gtLPDAhfFAj7DAv4WWFUxD8ASwDI1-o077cYyNcEyPsYy
-kcihjESMcAAFckvwA-B-hd5ff5c2NL_ILSzwwIXxQI_wwL_FlhVMQ-AEsH_F3l9Pz7DAhfFAj7D
Av4WWFUxEsAPw-4tUyUMCMEM-r-ylcUMCMEMHjHAD8ESwx4MCMEMP8UMCMEMHjHAEsEPwf4XeX3_
XNjSPsMCF8UCPsMC-hZYVTEPwBLB-hd5fT8_wwIXxQI_wwL_FlhVMRLAD8EcNCTRNBwxwA8Swx4M
CMEM-r-ylcUMCMEMHjHAEsEPwDIT-o077ccyNTI_xzL_RyKGMQ8SwQQ5JsUExibCBBAxEsAPw-4t
UyUMCMEMP8UMCMEMHjHAD8ESwRw0JNE0HDHAEg-DHgwIwQw-xQwIwQweMcAPwRLBHDQk0TQcMcAS
D8H_F3l9-lzY0v4gtLPDAhfFAj7DAv4WWFUxD8ASwDIT-o077ccyNTI_xzL_RyKGMRIxwAAVyS-A
D8H_F3l9F-4gtLPDAsc_wwL_FlhVMQ-AEsH_F3l9Fz7DAsc_wwL_FlhVMRLAD8T_LVMlDAjADMcI
wAweMcAPwhLEHgwIwAzHCMAMHjHAEsIPwf4XeX0XPsMCxz7DAv4WWFUxD8ASwf4XeX0XPsMCxz7D
Av4WWFUxEsAPwhw0JM80HDHAD8ASxB4MCMAMxwjADB4xwBLCD8AyE-6NO_3HMjUyPscy-kcihjEP
EsIQOSbPBBAxwBLAD8T_LVMlDAjADMcIwAweMcAPwhLCHDQkzzQcMcASwA-EHgwIwAzHCMAMHjHA
D8ISwhw0JM80HDHAEsAPwf4XeX0X-iC0s8MCxz7DAv4WWFUxD8ASwDIT-o077ccyNTI_xzL_RyKG
MRIxwAAVyS-AD8H_F3l9P-4gtLPRAv4WWFUxD8ASwf4XeX0-PtEC-hZYVTESwA-F-i1TJQwIyQwe
McAPwxLFHgwIyQweMcASww-B-hd5fT8_0QL_FlhVMQ-AEsH_F3l9Pz7RAv4WWFUxEsAPwxw0JM00
HDHAD8ESxR4MCMkMHjHAEsMPwDL_jTvtMj7HMj7HMsD_RyKGMQ8SwhAEJs8EEDESwQ-F-i1TJQwI
yQweMcAPwxLDHDQkzTQcMcASwQ-FHgwIyQweMcAPwxLDHDQkzTQcMcASwQ-B-hd5fT-_ILSz0QL_
FlhVMQ-AEsAy-o077TI_xzI_xzLA-kcihjESMcAAFckvwA-B-hd5fT-_ILSz0QL_FlhVMQ-AEsH_
F3l9Pz7RAv4WWFUxEsAPxv4tUyUMCMcMHjHAD8QSxh4MCMcMHjHAEsQPwf4XeX0-PtEC-hZYVTEP
wBLB-hd5fT8_0QL_FlhVMRLAD8QcNCTLNBwxwA-CEsYeDAjHDB4xwBLED8H_RyKGwDLA-o077cUy
PsUywB7AMcAPEsMQBCbNBBAxwBLBD8b_LVMlDAjHDB4xwA-EEsQcNCTLNBwxwBLCD8YeDAjHDB4x
wA-EEsQcNCTLNBwxwBLCD8H_F3l9P-4gtLPRAv4WWFUxD8ASwf5HIobAMsD_jTvtxTI_xTLAHsAx
wBIxwAAVyS-AD8L_F3l9P-4gtLPPAv4WWFUxwA-AEsL_F3l9Pz7PAv4WWFUxwBLAD8f_LVMlDAjF
DB4xwA-FEsceDAjFDB4xwBLFD8L_F3l9Pz7PAv4WWFUxwA-AEsL_F3l9Pz7PAv4WWFUxwBLAD8Uc
NCTJNBwxwA-DEsceDAjFDB4xwBLFD8Ix-kcihsAywP6NO_3JMsAewDHBD8ASxBAEwCbJBMAQMcAS
wg-H-i1TJQwIxQweMcAPxRLFHDQkyTQcMcASww-HHgwIxQweMcAPxRLFHDQkyTQcMcASww-C-hd5
fT-_ILSzzwL_FlhVMcAPwBLCMf5HIobAMsD_jTvtyTLAHsAxwRLAMcAAFckvwA-DAv4XeX3P-hZY
VTHAD8ESwwL_F3l9z-4WWFUxwBLBD8j_LVMlDAjDDB4xwA-GEsgeDAjDDB4xwBLGD8MC-hd5fc-_
FlhVMcAPwRLDAv4XeX3P-hZYVTHAEsEPxhw0JMc0HDHAD8QSyB4MCMMMHjHAEsYPxDH_RyKGwDLA
PsUywB7AMcEPwhLFEMAEwCbFBMAQwDHAEsMPyP4tUyUMCMMMHjHAD8YSxhw0JMc0HDHAEsQPyB4M
CMMMHjHAD8YSxhw0JMc0HDHAEsQPwwL_F3l9z-4WWFUxwA-BEsQx-kcihsAywD7FMsAewDHBEsIx
wAAVyS-AD8QCzzHAD8ISxALPMcASwg-J-i1TJQwIwQweMcAPxxLJHgwIwQweMcASxw-EAs8xwA-C
EsQCzzHAEsIPxxw0xxwxwA-FEskeDAjBDB4xwBLHD8Yx-kcihsAywD7BMsAewDHBD8QSxjEQwATF
EMAxwRLED8n_LVMlDAjBDB4xwA-HEsccNMccMcASxQ-JHgwIwQweMcAPxxLHHDTHHDHAEsUPxALP
McAPwhLGMf5HIobAMsA_wTLAHsAxwRLEMcAAFckvwA-FMc8PwxLFMc8Sww-K-i1TJQzBHjHAD8gS
yh4MwR4xwBLID8Uxzw-DEsUxzxLDD8gcxzHAD8YSyh4MwR4xwBLID8gx-kcihsAywR7AMcEPxhLI
MRDFMcESxg-K-i1TJQzBHjHAD8gSyBzHMcASxg-KHgzBHjHAD8gSyBzHMcASxg-FMc8PwxLIMf5H
IobAMsEewDHBEsYxwAAVyS-AD9sS2w-L-i1TJcExwA-JEssewTHAEskP2xLbD8kxxw-HEssewTHA
EskPyjH_RyKGwTHBD8gSyjHFEsgPy-4tUyXBMcAPyRLJMccSxw-LHsExwA-JEskxxxLHD9sSyjH_
RyKGwTHBEsgxwAAVyS-AD9sS2w-MMcEPyhLMMcESyg-bEtsP2xLMMcESyg-MMcEPyhLbD8wxwQ-K
EtsPzDHBD8oS2w-bEswxwRLKMcAAFckvwBLbD9sS2w-bEtsP2xLbD9sS2w-bEtsP2xLbD9sS2w-b
McAAFckvwBLbD8sywQ-LEtsP2xLbD8sywQ-LEssywRLLD9sSyzLBEssP2xLbD9sS2w-bEtsPywzB
D8sxwAAVyS-AEskExRLJD8kywBM1EzLAD8kSyDTHEsgPyQTFD8kSyDTHEsgPyTLAEzUTMsAPyRLJ
MsATNRMywBLJD8kExQ-JEskywBM1EzLAEskPyDTHD8gS2w-JBMUPyRLbD9sSyDTHEsgPygz_h9RW
-r-ylQgMD8oxwAAVyS-AEscEwBnBORk5wATAEscPxzLANcA_wRPAMsAPxxLHNDrD-u3EVDocwDQS
xw-HBMAZwTkZOcAEwA-HEsc0OsMcOhzANBLHD8cywDXAPsETwDLAD8cSxzLANcA_wRPAMsASxw-H
BMAZwTkZOcAEwA-HEscywDXAPsETwDLAEscPxzQ6wxw6HMA0D8cSxP4XeX3PEsQPxwTAGcE5GTnA
BMAPxxLEAs8SxA-EAs8PxBLHNDrDHDocwDQSxw-JDD-_UKMswf6H1FYMD8kxwAAVyS-AEsUEwBnA
JsU5wBDAEsUPxTLANcA_xRPAMsAPxRLGNDokxxw0EsYPxQTAGcAmxTnAEMAPxRLGNDokxxw0EsYP
xTLANcA_xRPAMsAPxRLFMsA1wD7FE8AywBLFD8UEwBnAJsU5wBDAD8USxTLANcA_xRPAMsASxQ-G
NDokxxw0D8YSwwIXy-5c2NIXP8ACEsMPxQTAGcAmxTnAEMAPxRLDAhfLPxc-wAISww-DAhfLPxc-
wAIPwxLGNDokxxw0EsYPyAz_v-KV-lCjLMP_h9RWDA-IMcAAFckvwBLEBBnAJsk5BBASxA-DMsA1
wD7JE8AywA-DEsU0OiTJHDQSxQ-EBBnAJsk5BBAPxBLFNDokyRw0EsUPwzLANcA_yRPAMsAPwxLD
MsA1wD7DMj7DE8AywBLDD8QEGcAmyTkEEA-EEsMywDXAPskTwDLAEsMPxTQ6JMkcNA-FEsICF-4g
tLPP-lzY0v4WWFUSwg-EBBnAJsk5BBAPxBLC-hd5fRc_zz-_FlhVEsIPwv4XeX0XPs8--hZYVQ-C
EsU0OiTJHDQSxQ-HDP6-8pX_UKMsxf6H1FYMD8cxwAAVyS-AEsMEGSbNBBASww-BMsA1wP6NO_3F
Mj7FE8AywA-BEsQ0OiTLHDQSxA-DBBkmzQQQD8MSxDQ6JMscNBLED8EywDXAPsUyPsUTwDLAD8ES
wTLANcA_xDI1Mj7EE8AywBLBD8MEGSbNBBAPwxLBMsA1wD7FMj7FE8AywBLBD8Q0OiTLHDQPxBLB
-hd5fRf_ILSz0QL_FlhVEsEPwwQZJs0EEA-DEsH_F3l9Fz7RAv4WWFUSwQ-B-hd5fRc_0QL_FlhV
D8ESxDQ6JMscNBLED8YMP-5QoyzH-ofUVgwPxjHAABXJL8ASwgQZJs8EEBLCD8AyNcD_jTvtxzI_
xxM_Hg-AEsM0OiTNHDQSww-CBBkmzwQQD8ISwzQ6JM0cNBLDD8AyNcA_xzI_xxM_Hg-AEsAyNcA_
xjI1Mj7GEz4eEsAPwgQZJs8EEA-CEsAyNcA_xzI_xxM_HhLAD8M0OiTNHDQPwxLB-hd5fRf_ILSz
0QL_FlhVMRLAD8IEGSbPBBAPwhLB-hd5fRc_wwLBPsECwT7DAv4WWFUxEsAPwf4XeX0XPtEC-hZY
VTEPwBLDNDokzRw0EsMPxQw--lCjLMAMwAgMwAjC-ofUVgwPxTHAABXJL8ASwgQZJs8EEDESwQ-A
MjX_jTvtxzI1Mj7HMh4xDxLCNDokzxw0EsIPwgQZJsQEwybEBBAxD8ESwjQ6JM8cNBLCD8AyNT7H
MjUyPscyHjEPEsAyNT7GMjUyNTI_xjIeMRIPwgQZJs8EEDEPwRLAMjU_xzI1Mj7HMh4xEg-CNDok
xjTAJMUcNA-CEsH_F3l9F-4gtLPDAsE_wQLBPsMC-hZYVTESwA-CBBkmzwQQMQ-BEsH_F3l9Fz7C
AhfBAsEXwQI_wgL_FlhVMRLAD8H_F3l9Fz7DAsE_wQLBPsMC-hZYVTEPwBLCNDokzxw0EsIPxAw-
-lCjLMAMP8AMP8AMwQjA-ofUVgwPxDHAABXJL8ASwQQZJsUEwybFBBASwQ-AMjX_jTvtxzI1Mj7H
Mh4xDxLBNDokxzTAJMYcNBLBD8EEGSbEBBnDBMImwQQQD8ESwTQ6JMc0wCTGHDQSwQ-AMjU_xzI1
Mj7HMh4xDxLAMjU_xjI1MjUyPsYyHjESD8EEGSbFBMMmxQQQD8ESwDI1PscyNTI_xzIeMRIPwTQ6
JMU0wDrANCTBNMAkwBw0D8ESwf4XeX0X-iC0s8ICF8ECwRfBAj7CAv4WWFUxEsAPwQQZJsUEwybF
BBAPwRLB-hd5fRc_wQIXAsEXwQLBFwI_wQL_FlhVMRLAD8H_F3l9Fz7CAhfBAsEXwQI_wgL_FlhV
MQ-AEsE0OiTHNMAkxhw0EsEPwww--lCjLMEMP8AMP8AMP8AMCMD_h9RWDA-DMcAAFckvwBLBBBkm
xAQZwwTCJsEEEDESwA-AMjX_jTvtxjI1wTI_xjIeMQ8SwDQ6JMY0wDrANCTBNMAkwRz_Z0kTEsAP
wQQZJsAEwhkEwxnCBCbABBAxD8ASwDQ6JMY0wDrANCTBNMAkwf7txFT_Z0kTEsAPwDI1PsYyNcEy
PsYyHjEPEsAyNT7FMjUywTUyPsUyHjESD8EEGSbEBBnDBMImwQQQMQ-AEsAyNT7GMjXBMj7GMh4x
Eg-ANDokxDTAOsA0wDo0wTrANCTA-u3EVP5nSRMPwBLB-hd5fRf_ILSzwQIXyQI_wQL_FlhVMRLA
D8EEGSbEBBnDBMImwQQQMQ-AEsH_F3l9Fz7AAhcCyRcCPsAC-hZYVTESwA-B-hd5fRc_wQIXyQI_
wQL_FlhVMQ-AEsA0OiTGNMA6wDQkwTTAJMH_7cRU-mdJExLAD8IMP-5QoyzCDD-ADD-ADD-ADAjB
-ofUVgwPwjHAABXJL8ASwAQZJsEEwhnEBBnBBCbBBBASwA-AMjX_jTvtxjI1wTI_xjIeMQ8SwDQ6
JMQ0wDrANDrANME6NCTBNBwxEg-ABBkmwAQZwgTEGQTBGQQmwAQQD8ASwDQ6JMQ0wDrANDrANME6
NCTBNBwxEg-AMjU_xjI1wTI_xjIeMQ8SwDI1PsQywDUywTUywD7EMh4xEg-ABBkmwQTCGcQEGcEE
JsEEEA-AEsAyNT7GMjXBMj7GMh4xEg-ANDokwjTAOsA0wDo0wDrBNDo0JMA0HDEPEsH_F3l9F-4g
tLPAAhfLAj7AAv4WWFUxEsAPwAQZJsEEwhnEBBnBBCbBBBAPwBLB-hd5fRc_AhcCyxcCPgL_FlhV
MRLAD8H_F3l9Fz7AAhfLAj7AAv4WWFUxD8ASwDQ6JMQ0wDrANDrANME6NCTBNBwxEg-BDD-_UKMs
wgzBPww-wAw-wAwIwv6H1FYMD8ExwAAVyS-AEsAEGSbBBBnDBMAZwAQZwQQmwQQQMRIPwDI1-o07
7cQywDXDMsA_xDIeMQ8SwDQ6JMI0wDrANDrGNCTBNBwxEg-ABBkmwAQZBMMZwATAGQTBGQQmwAQQ
MQ8SwDQ6JMI0wDrANDrGNCTBNBwxEg-AMjU_xDLANcMywD7EMh4xDxLAMjU_wjLANcAywzXAMsA_
wjIeMRIPwAQZJsEEGcMEwBnABBnBBCbBBBAxDxLAMjU_xDLANcMywD7EMh4xEg-ANDokwTQ6wDTA
OjTGOjQkwDQcMQ8Swf4XeX0X-iC0swIXzQI_Av4WWFUxEsAPwAQZJsEEGcMEwBnABBnBBCbBBBAx
DxLB-hd5fRcCFwLNFwLA-hZYVTESwA-B-hd5fRc_AhfNAj4C-hZYVTEPwBLANDokwjTAOsA0OsY0
JME0HDESD8AMP-5QoyzCDD-ADD8MP8AMP8AMCMP_h9RWDA-AMcAAFckvwBLABBkmwQQZxAQZwATC
JsIEEDESD8AyNf6NO_3CMsA1xzLAPsIyHjEPEsA0OiTBNDrANDrINCTBNBwxEg-ABBkmwAQZBMQZ
BMAZwgQmwQQQMQ8SwDQ6JME0OsA0Osg0JME0HDESD8AyNT7CMsA1xzLAPsIyHjEPEsAyNT7AMsA1
wDLHNcAywD7AMh4xEg-ABBkmwQQZxAQZwATCJsIEEDEPEsAyNT7CMsA1xzLAPsIyHjESD8A0OiTA
NDo0wDo0yDo0JMA0HDEPEsH_F3l9FwIXzwLA-hZYVTESwA-ABBkmwQQZxAQZwATCJsIEEDEPEsH_
F3l9F8ACzxcC-hZYVTESwA-B-hd5fRcCF88CwP4WWFUxD8ASwDQ6JME0OsA0Osg0JME0HDESDwwI
-lCjLMMMP8AMP8UMCMQM-i1TJQ8xwAAVyS-AEsAEOSbBBBnEBBnABBnBBCbBBBAxEg-AMjU_wDLA
NcsywD7AMv5HIoYxDxLANDokwDQ6zDQkwTQcMRIPwAQ5JsAEGQTEGQTAGQTBGQQmwAQQMQ8SwDQ6
JMA0Osw0JME0HDESD8AyNT7AMsA1yzLAPsAyHjEPEsAyNT4yNcAyyzXAMj4yHjESD8AEOSbBBBnE
BBnABBnBBCbBBBAxDxLAMjU_wDLANcsywD7AMh4xEg-ANDokNDo0zDo0JMA0HDEPEsH_F3l9F-4g
tLMCF8ECF8UCF8ECPgL_FlhVMRLAD8AEOSbBBBnEBBnABBnBBCbBBBAxDxLB-hd5fRcCFwLBFwLF
FwLBFwLA-hZYVTESwA-B-hd5fRc_AhfBAhfFAhfBAj4C-hZYVTEPwBLANDokwDQ6zDQkwTQcMRIP
DD8Iwww-wAw-xQwIxAz_LVMlMcEAFckvwBLABBkmwQQZxQTBGcEEJsEEEDESD8AyNf6NO_3CMsA1
xzLAPsIy-kcihjEPEsA0-u3EVCTANDrMNCTBNP5nSRMxEg-ABBkmwAQZBMUZwQTBGQQmwAQQMQ8S
wDT_7cRUJMA0Osw0JME0-mdJEzESD8AyNT7CMsA1xzLAPsIyHjEPEsAyNT7AMsA1wDLHNcAywD7A
Mh4xEg-ABBkmwQQZxQTBGcEEJsEEEDEPEsAyNT7CMsA1xzLAPsIyHjESD8A0-u3EVCQ0OjTMOjQk
wDT_Z0kTMQ8Swf4XeX0X-iC0s8ACFwLAF8UCwBcCPsAC-hZYVTESwA-ABBkmwQQZxQTBGcEEJsEE
EDEPEsH_F3l9Fz4CFwIXwALFF8ACFwI_Av4WWFUxEsAPwf4XeX0XPsACFwLAF8UCwBcCPsAC-hZY
VTEPwBLANP7txFQkwDQ6zDQkwTT_Z0kTMRIPDP6H1Fb_UKMswww-yAwIxAz_LVMlMcEAFckvwBLA
BDkmwQQZxwTCJsIEEDESD8AyNf6NO_3EMsA1wzLAPsQy-kcihjEPEsA0OiTANDrMNCTBNBwxEg-A
BDkmwAQZBMcZwgQmwQQQMQ8SwDQ6JMA0Osw0JME0HDESD8AyNT7EMsA1wzLAPsQyHjEPEsAyNT7C
MsA1wDLDNcAywD7CMh4xEg-ABDkmwQQZxwTCJsIEEDEPEsAyNT7EMsA1wzLAPsQyHjESD8A0OiQ0
OjTMOjQkwDQcMQ8Swf4XeX0X-iC0s8ECPgIXxQI_Aj7BAv4WWFUxEsAPwAQ5JsEEGccEwibCBBAx
DxLB-hd5fRc_wAIXAhcCxRcCFwI_wAL_FlhVMRLAD8H_F3l9Fz7BAj4CF8UCPgI_wQL_FlhVMQ-A
EsA0OiTANDrMNCTBNBwxEg-A-i1TJQwIwgw-yAwIwwweMcIAFckvwBLABDkmwQQZxgQZwQQmwgQQ
MRIPwDIT-o077cYyNcEyPsYy-kcihjEPEsA0-u3EVCTBNMwkwjT_Z0kTMRIPwAQ5JsAEGQTGGQTB
GQQmwQQQMQ8SwDT_7cRUJME0zCTCNP5nSRMxEg-AMhM_xjI1wTI_xjIeMQ8SwDITPsQywDUywTUy
wD7EMh4xEg-ABDkmwQQZxgQZwQQmwgQQMQ8SwDITPsYyNcEyPsYyHjESD8A0-u3EVCTANDrMNCTB
NP5nSRMxDxLB-hd5fRf_ILSzwwIXxQI_wwL_FlhVMRLAD8AEOSbBBBnGBBnBBCbCBBAxDxLB-hd5
fRc_wQLAFwLFFwLAPsEC-hZYVTESwA-B-hd5fRc_wwIXxQI_wwL_FlhVMQ-AEsA0-u3EVCTBNMwk
wjT_Z0kTMRIPwf4tUyUMCMIMP8cMCMIMHjHADzHAABXJL8ASwQQ5JsAEwxnCBBnBBCbBBBAxwBIP
wDI1-o077cYyNcEyPsYy-kcihjEPEsA0-u3EVCTTNP5nSRMxEg-BBDkmBBnDBMIZBMEZBCbABBAx
wA8SwDT_7cRUJNM0-mdJEzESD8AyNT7GMjXBMj7GMh4xDxLAMjU_xTI1MsE1PsYyHjESD8EEOSbA
BMMZwgQZwQQmwQQQMcAPEsAyNT7GMjXBMj7GMh4xEg-ANP7txFQkwTTMJMI0-mdJEzEPEsH_F3l9
F-4gtLPDAhfFAj7DAv4WWFUxEsAPwQQ5JsAEwxnCBBnBBCbBBBAxwA8Swf4XeX0XPsICFwLFFwI_
wgL_FlhVMRLAD8H_F3l9Fz7DAhfFAj7DAv4WWFUxD8ASwDT_7cRUJNM0-mdJEzESD8L_LVMlDAjC
DD-FDAjCDB4xwA-AMcAAFckvwBLBBDkmxQTGJsIEEDESwA-AMhP_jTvtxzI1Mj7HMv5HIoYxDxLB
HDQk0TQcMcASD8EEOSbABMMZxgQmwQQQMQ-AEsEcNCTRNBwxwBIPwDITPscyNTI_xzIeMQ8SwDIT
PsYyNTI1Mj7GMh4xEg-BBDkmxQTGJsIEEDEPwBLAMhM_xzI1Mj7HMh4xEg-BHDQk0TQcMcAPEsH_
F3l9-lzY0v4gtLPDAhfFAj7DAv4WWFUxEsAPwQQ5JsUExibCBBAxD8ASwf4XeX0-PsICFwLFFwI_
wgL_FlhVMRLAD8H_F3l9Pz7DAhfFAj7DAv4WWFUxD8ASwRw0JNE0HDHAEg-D-i1TJQwIwQz_v-KV
xQwIwQweMcAPwTHAABXJL8ASwhA5Js8EEDHAEsAPwDIT-o077ccyNTI_xzL_RyKGMQ8Swhw0JM80
HDHAEsAPwhA5JsQExibBBBAxwA-AEsIcNCTPNBwxwBLAD8AyEz7HMjUyPscyHjEPEsAyEz7GMjUy
NTI_xjIeMRIPwhA5Js8EEDHAD8ASwDITPscyNTI_xzIeMRIPwhw0JM80HDHAD8ASwf4XeX0X-iC0
s8MCxz7DAv4WWFUxEsAPwhA5Js8EEDHAD8ASwf4XeX0XPsICF8cCPsIC-hZYVTESwA-B-hd5fRc_
wwLHPsMC-hZYVTEPwBLCHDQkzzQcMcASwA-E-i1TJQwIwAzHCMAMHjHAD8IxwAAVyS-AEsIQBCbP
BBAxEsEPwDL_jTvtMj7HMj7HMsD_RyKGMQ8Swxw0JM00HDHAEsEPwhAEJs8EEDEPwRLDHDQkzTQc
McASwQ-AMj4yPscyPscywB4xDxLAMj4yPsYyNTI_xjLAHjESD8IQBCbPBBAxD8ESwDI_Mj7HMj7H
MsAeMRIPwxw0JM00HDHAD8ESwf4XeX3_XNjS-iC0s9EC-hZYVTESwA-CEAQmzwQQMQ-BEsH_F3l9
Pz7DAsc_wwL_FlhVMRLAD8H_F3l9Pz7RAv4WWFUxD8ASwxw0JM00HDHAEsEPxf4tUyUMCMkMHjHA
D8MxwAAVyS-AEsMQBCbNBBAxwBLBD8H_RyKGwDLA-o077cUyPsUywB7AMcAPEsQcNCTLNBwxwBLC
D8MQBCbNBBAxwA-BEsQcNCTLNBwxwBLCD8EewDLAPsUyPsUywB7AMcAPEsEewDLAPsQyNTI_xDLA
HsAxwBIPwxAEJs0EEDHAD8ESwR7AMsA_xTI_xTLAHsAxwBIPxBw0JMs0HDHAD8ISwf4XeX0--iC0
s9EC-hZYVTESwA-DEAQmzQQQMcAPwRLB-hd5fT8_0QL_FlhVMRLAD8H_F3l9Pz7RAv4WWFUxD8AS
xBw0JMs0HDHAEsIPxv4tUyUMCMcMHjHAD8QxwAAVyS-AEsQQBMAmyQTAEDHAEsIPwjH_RyKGwDLA
-o077ckywB7AMcEPwBLFHDQkyTQcMcASww-EEATAJskEwBAxwA-CEsUcNCTJNBwxwBLDD8IxHsAy
wD7JMsAewDHBD8ASwjEewDLAPsMyPsMywB7AMcESwA-EEATAJskEwBAxwA-CEsIxHsAywD7JMsAe
wDHBEsAPxRw0JMk0HDHAD8MSwv4XeX0--iC0s88C-hZYVTHAEsAPxBAEwCbJBMAQMcAPwhLC-hd5
fT8_zwL_FlhVMcASwA-C-hd5fT8_zwL_FlhVMcAPwBLFHDQkyTQcMcASww-H-i1TJQwIxQweMcAP
xTHAABXJL8ASxRDABMAmxQTAEMAxwBLDD8Qx-kcihsAywP6NO_3FMsAewDHBD8ISxhw0JMc0HDHA
EsQPxRDABMAmxQTAEMAxwA-DEsYcNCTHNBwxwBLED8QxHsAywD7FMsAewDHBD8ISxDEewDLAPsUy
wB7AMcESwg-FEMAEwCbFBMAQwDHAD8MSxDEewDLAPsUywB7AMcESwg-GHDQkxzQcMcAPxBLDAv4X
eX3P-hZYVTHAEsEPxRDABMAmxQTAEMAxwA-DEsMC-hd5fc-_FlhVMcASwQ-DAv4XeX3P-hZYVTHA
D8ESxhw0JMc0HDHAEsQPyP4tUyUMCMMMHjHAD8YxwAAVyS-AEsYxEMAExRDAMcESxA-GMf5HIobA
MsA_wTLAHsAxwQ-EEsccNMccMcASxQ-GMRDABMUQwDHBD8QSxxw0xxwxwBLFD8YxHsAywD7BMsAe
wDHBD8QSxjEewDLAPsEywB7AMcESxA-GMRDABMUQwDHBD8QSxjEewDLAPsEywB7AMcESxA-HHDTH
HDHAD8USxALPMcASwg-GMRDABMUQwDHBD8QSxALPMcASwg-EAs8xwA-CEsccNMccMcASxQ-J-i1T
JQwIwQweMcAPxzHAABXJL8ASyDEQxTHBEsYPyDH_RyKGwDLBHsAxwQ-GEsgcxzHAEsYPyDEQxTHB
D8YSyBzHMcASxg-IMR7AMsEewDHBD8YSyDEewDLBHsAxwRLGD8gxEMUxwQ-GEsgxHsAywR7AMcES
xg-IHMcxwA-GEsUxzxLDD8gxEMUxwQ-GEsUxzxLDD8Uxzw-DEsgcxzHAEsYPyv4tUyUMwR4xwA-I
McAAFckvwBLKMcUSyA-KMf5HIobBMcEPyBLJMccSxw-KMcUPyBLJMccSxw-KMR7BMcEPyBLKMR7B
McESyA-KMcUPyBLKMR7BMcESyA-JMccPxxLbD8oxxQ-IEtsP2xLJMccSxw-L-i1TJcExwA-JMcAA
FckvwBLbD8wxwQ-KEtsP2xLbD8wxwQ-KEswxwRLKD9sSzDHBEsoP2xLbD9sS2w-bEtsPzDHBD8ox
wAAVyS-AD9sS2w-bEtsP2xLbD9sS2w-bEtsP2xLbD9sS2w-bEtsxwAAVyS-AD8sywQ-LEssMwRLL
D8sywQ-LEtsPyzLBD8sS2w-LDMEPyxLbD9sSywzBEssP2xLLDMESyw-LMsEPyxLLMsESyw-LDMEP
yxLLMsESyzHAABXJL8APyTLAEzUTMsAPyRLKDP6H1Fb_v-KVCAwSyg-JMsATNRMywA-JEtsPyTLA
EzUTMsAPyRLINMcSyA-KDAg-CAwPyhLINMcSyA-INMcPyBLKDAg-CAwSyg-INMcPyBLKDAg-CAwS
yg-JMsATNRMywA-JEskywBM1EzLAEskPygwIPwgMD8oSyTLAEzUTMsASyTHAABXJL8APxzLANcA_
wRPAMsAPxxLJDD-_UKMswf6H1FYMEskPxzLANcA_wRPAMsAPxxLE-hd5fc8SxA-HMsA1wD7BE8Ay
wA-HEsc0OsP_7cRUOhzANBLHD8kMP-5QoyzB-ofUVgwPyRLHNDrDHDocwDQSxw-HNDrDHDocwDQP
xxLJDD-_UKMswf6H1FYMEskPxzQ6wxw6HMA0D8cSyQw--lCjLMH_h9RWDBLJD8cywDXAPsETwDLA
D8cSxzLANcA_wRPAMsASxw-JDD-_UKMswf6H1FYMD8kSxzLANcA_wRPAMsASxzHAABXJL8APxTLA
NcA_xRPAMsAPxRLIDD-_UKMsw-6H1FYMEsgPxTLANcA_xRPAMsAPxRLDAhfL-lzY0hc-wAISww-F
MsA1wD7FE8AywA-FEsY0OiTHHDQSxg-IDP6-8pX_UKMsw-6H1FYMD8gSxjQ6JMccNBLGD8Y0OiTH
HDQPxhLIDD-_UKMsw-6H1FYMEsgPxjQ6JMccNA-GEsgMP-5QoyzD-ofUVgwSyA-FMsA1wD7FE8Ay
wA-FEsUywDXAPsUTwDLAEsUPyAw--lCjLMP_h9RWDA-IEsUywDXAPsUTwDLAEsUxwAAVyS-AD8My
wDXAPskTwDLAD8MSxww--lCjLMX_h9RWDBLHD8MywDXAPskTwDLAD8MSwgIX-iC0s8-_XNjS-hZY
VRLCD8MywDXA-o077ckTwDLAD8MSxTQ6JMkcNBLFD8cM-r-ylf5QoyzF-ofUVgwPxxLFNDokyRw0
EsUPxTQ6JMkcNA-FEscMP-5QoyzF-ofUVgwSxw-FNDokyRw0D8USxww--lCjLMX_h9RWDBLHD8My
wDXAPskTwDLAD8MSwzLANcA_yRPAMsASww-HDD-_UKMsxf6H1FYMD8cSwzLANcA_yRPAMsASwzHA
ABXJL8APwTLANcA_xTI_xRPAMsAPwRLGDD-_UKMsDMAIDMAIwf6H1FYMEsYPwTLANcA_xTI_xRPA
MsAPwRLB-hd5fRf_ILSz0QL_FlhVEsEPwTLANcD_jTvtxTI_xRPAMsAPwRLENDokyxw0EsQPxgw-
-lCjLMf_h9RWDA-GEsQ0OiTLHDQSxA-ENDokyxw0D8QSxgw--lCjLMf_h9RWDBLGD8Q0OiTLHDQP
xBLGDD-_UKMsDMAIDMAIwf6H1FYMEsYPwTLANcA_xTI_xRPAMsAPwRLBMsA1wD7FMj7FE8AywBLB
D8YMP-5QoyzH-ofUVgwPxhLBMsA1wD7FMj7FE8AywBLBMcAAFckvwA-AMjXAPscyPscTPv5HIoYP
wBLFDD-_UKMsDD-ADD-ADMEI-ofUVgwSxQ-AMjXAPscyPscTPh4PwBLB-hd5fRf_ILSzwwLBPsEC
wT7DAv4WWFUxEsAPwDI1wP6NO_3HMj7HEz4eD8ASwzQ6JM0cNBLDD8UMP-5QoyzADMAIDMAIwv6H
1FYMD8USwzQ6JM0cNBLDD8M0OiTNHDQPwxLFDD-_UKMswAzACAzACML_h9RWDBLFD8M0OiTNHDQP
wxLFDD-_UKMsDD-ADD-ADMEI-ofUVgwSxQ-AMjXAPscyPscTPh4PwBLAMjXAPscyPscTPh4SwA-F
DD-_UKMswAzACAzACML_h9RWDA-FEsAyNcA_xzI_xxM_HhLAMcAAFckvwA-AMjU_xzI1Mj7HMh4x
DxLEDD-_UKMsDD8MwD8MwD-BDAj_h9RWDBLED8AyNT7HMjUyPscyHjEPEsH_F3l9F-4gtLPCAhfB
AsEXwQI_wgL_FlhVMRLAD8AyNf6NO_3HMjUyPscyHjEPEsI0OiTPHDQSwg-EDD-_UKMswAw-wAw-
wAzBCMD_h9RWDA-EEsI0OiTPHDQSwg-CNDokzxw0D8ISxAw--lCjLMAMP8AMP8AMwQjA-ofUVgwS
xA-CNDokzxw0D8ISxAw--lCjLAw-DMA-DMA-wQwI-ofUVgwSxA-AMjU_xzI1Mj7HMh4xDxLAMjU_
xzI1Mj7HMh4xEg-EDD-_UKMswAw-wAw-wAzBCMD_h9RWDA-EEsAyNT7HMjUyPscyHjESMcAAFckv
wA-AMjU_xzI1Mj7HMh4xDxLDDD-_UKMswAw-DMA-DMA-DMA-DAj_h9RWDBLDD8AyNT7HMjUyPscy
HjEPEsH_F3l9F-4gtLPBAhcCwRfBAsEXAj7BAv4WWFUxEsAPwDI1-o077ccyNTI_xzIeMQ8SwTQ6
JMc0wCTGHDQSwQ-DDD-_UKMswQw-wAw-wAw-wAwIwP6H1FYMD8MSwTQ6JMc0wCTGHDQSwQ-BNDok
xzTAJMYcNA-BEsMMP-5QoyzBDD-ADD-ADD-ADAjA-ofUVgwSww-BNDokxzTAJMYcNA-BEsMMP-5Q
oyzADD8MwD8MwD8MwD8MCP6H1FYMEsMPwDI1PscyNTI_xzIeMQ8SwDI1PscyNTI_xzIeMRIPwww-
-lCjLMEMP8AMP8AMP8AMCMD_h9RWDA-DEsAyNT7HMjUyPscyHjESMcAAFckvwA-AMjU_xjI1wTI_
xjIeMQ8Swgw--lCjLMEMPwzAPwzAPwzAPwwIwP6H1FYMEsIPwDI1PsYyNcEyPsYyHjEPEsH_F3l9
F-4gtLPAAhcCyRcCPsAC-hZYVTESwA-AMjX_jTvtxjI1wTI_xjIeMQ8SwDQ6JMY0wDrANCTBNMAk
wRz_Z0kTEsAPwgw--lCjLMIMP8AMP8AMP8AMCMH_h9RWDA-CEsA0OiTGNMA6wDQkwTTAJMH_7cRU
-mdJExLAD8A0OiTGNMA6wDQkwTTAJMH_7cRU-mdJEw-AEsIMP-5QoyzCDD-ADD-ADD-ADAjB-ofU
VgwSwg-ANDokxjTAOsA0JME0wCTB-u3EVP5nSRMPwBLCDD-_UKMswQw-DMA-DMA-DMA-DAjA-ofU
VgwSwg-AMjU_xjI1wTI_xjIeMQ8SwDI1PsYyNcEyPsYyHjESD8IMP-5QoyzCDD-ADD-ADD-ADAjB
-ofUVgwPwhLAMjU_xjI1wTI_xjIeMRIxwAAVyS-AD8AyNT7GMjXBMj7GMh4xDxLBDD-_UKMswQw-
wQw-DMA-DMA-DAjB-ofUVgwSwQ-AMjU_xjI1wTI_xjIeMQ8Swf4XeX0X-iC0swIXAssXAj4C-hZY
VTESwA-AMjX_jTvtxjI1wTI_xjIeMQ8SwDQ6JMQ0wDrANDrANME6NCTBNBwxEg-BDD-_UKMswgzB
Pww-wAw-wAwIwv6H1FYMD8ESwDQ6JMQ0wDrANDrANME6NCTBNBwxEg-ANDokxDTAOsA0OsA0wTo0
JME0HDEPEsEMP-5QoyzCDME-DD-ADD-ADAjC-ofUVgwSwQ-ANDokxDTAOsA0OsA0wTo0JME0HDEP
EsEMP-5QoyzBDD-BDD8MwD8MwD8MCMH_h9RWDBLBD8AyNT7GMjXBMj7GMh4xDxLAMjU_xjI1wTI_
xjIeMRIPwQw--lCjLMIMwT8MP8AMP8AMCML_h9RWDA-BEsAyNT7GMjXBMj7GMh4xEjHAABXJL8AP
wDI1PsQywDXDMsA_xDIeMQ8SwAw--lCjLMEMPwzAPww-DMA-DMA-DAjC-ofUVgwSwA-AMjU_xDLA
NcMywD7EMh4xDxLB-hd5fRcCFwLNFwLA-hZYVTESwA-AMjU_xDLANcMywD7EMh4xDxLANDokwjTA
OsA0OsY0JME0HDESD8AMP-5QoyzCDD-ADD8MP8AMP8AMCMP_h9RWDA-AEsA0OiTCNMA6wDQ6xjQk
wTQcMRIPwDQ6JMI0wDrANDrGNCTBNBwxDxLADD-_UKMswgw-wAw-DD-ADD-ADAjD-ofUVgwSwA-A
NDokwjTAOsA0OsY0JME0HDEPEsAMP-5QoyzBDD8MwD8MPwzAPwzAPwwIwv6H1FYMEsAPwDI1PsQy
wDXDMsA_xDIeMQ8SwDI1PsQywDXDMsA_xDIeMRIPwAw--lCjLMIMP8AMPww-wAw-wAwIw-6H1FYM
D8ASwDI1PsQywDXDMsA_xDIeMRIxwAAVyS-AD8AyNT7CMsA1xzLAPsIyHjEPEgwI-lCjLMIMPwzA
PwzFPwwIwwz_LVMlEg-AMjU_wjLANccywD7CMv5HIoYxDxLB-hd5fRfAAs8XAv4WWFUxEsAPwDI1
PsIywDXHMsA_wjIeMQ8SwDQ6JME0OsA0Osg0JME0HDESDwz_h9RW-lCjLMMMP8AMP8UMCMQM-i1T
JQ8SwDQ6JME0OsA0Osg0JME0HDESD8A0OiTBNDrANDrINCTBNBwxDxIM-ofUVv5QoyzDDD-ADD-F
DAjEDB4SD8A0OiTBNDrANDrINCTBNBwxDxIM-ofUVv5QoyzCDD8MwD8MxT8MCMMMHhIPwDI1PsIy
wDXHMsA_wjL_RyKGMQ8SwDI1PsIywDXHMsA_wjIeMRIPDP6H1Fb_UKMswww-wAw-xQwIxAz_LVMl
DxLAMjU_wjLANccywD7CMv5HIoYxEjHAABXJL8APwDI1PsAywDXLMsA_wDIeMQ8SDD8Iwgw-DMA-
DMU-DAjDDP4tUyUxD8AyNT7AMsA1yzLAPsAy-kcihjEPEsH_F3l9FwIXAsEXAsUXAsEXAsD_FlhV
MRLAD8AyNT7AMsA1yzLAPsAyHjEPEsA0OiTANDrMNCTBNBwxEg8MPwjDDD-ADD-FDAjEDP4tUyUx
EsA0OiTANDrMNCTBNBwxEg-ANDokwDQ6zDQkwTQcMQ8SDD8Iwww-wAw-xQwIxAweMQ-ANDokwDQ6
zDQkwTQcMQ8SDD8Iwgw-DMA-DMU-DAjDDB4xD8AyNT7AMsA1yzLAPsAy-kcihjEPEsAyNT7AMsA1
yzLAPsAyHjESDww-CMMMP8AMP8UMCMQM-i1TJTESwDI1PsAywDXLMsA_wDL_RyKGMRIxwAAVyS-A
D8AyNT7CMsA1xzLAPsIyHjEPEgz_h9RW-lCjLMIMPwzIPwwIwwz_LVMlMQ-AMjU_wjLANccywD7C
Mv5HIoYxDxLB-hd5fRf_ILSzAhcCF8ACxRfAAhcCPgL_FlhVMRLAD8AyNf6NO_3CMsA1xzLAPsIy
HjEPEsA0-u3EVCTANDrMNCTBNP5nSRMxEg8M-ofUVv5QoyzDDD-IDAjEDP4tUyUxEsA0-u3EVCTA
NDrMNCTBNP5nSRMxEg-ANP7txFQkwDQ6zDQkwTT_Z0kTMQ8SDP6H1Fb_UKMswww-yAwIxAweMQ-A
NP7txFQkwDQ6zDQkwTT_Z0kTMQ8SDP6H1Fb_UKMswgw-DMg-DAjDDB4xD8AyNT7CMsA1xzLAPsIy
-kcihjEPEsAyNT7CMsA1xzLAPsIyHjESDwz_h9RW-lCjLMMMP8gMCMQM-i1TJTESwDI1PsIywDXH
MsA_wjL_RyKGMRIxwAAVyS-AD8AyNT7EMsA1wzLAPsQyHjEPEsD_LVMlDAjBDD8MyD8MCMIMHjHA
D8AyNT7EMsA1wzLAPsQy-kcihjEPEsH_F3l9F-4gtLPAAhcCFwLFFwIXAj7AAv4WWFUxEsAPwDI1
-o077cQywDXDMsA_xDIeMQ8SwDQ6JMA0Osw0JME0HDESD8D_LVMlDAjCDD-IDAjDDB4xwBLANDok
wDQ6zDQkwTQcMRIPwDQ6JMA0Osw0JME0HDEPEsAeDAjCDD-IDAjDDB4xwA-ANDokwDQ6zDQkwTQc
MQ8SwB4MCMEMPwzIPwwIwgweMcAPwDI1PsQywDXDMsA_xDL_RyKGMQ8SwDI1PsQywDXDMsA_xDIe
MRIPwP4tUyUMCMIMP8gMCMMMHjHAEsAyNT7EMsA1wzLAPsQy-kcihjESMcAAFckvwA-AMhM_xjI1
wTI_xjIeMQ8Swf4tUyUMCMEMPwzHPwwIwQweMcASD8AyEz7GMjXBMj7GMv5HIoYxDxLB-hd5fRf_
ILSzwQLAFwLFFwLAPsEC-hZYVTESwA-AMhP_jTvtxjI1wTI_xjIeMQ8SwDT_7cRUJME0zCTCNP5n
SRMxEg-B-i1TJQwIwgw-xwwIwgweMcAPEsA0-u3EVCTBNMwkwjT_Z0kTMRIPwDT_7cRUJME0zCTC
NP5nSRMxDxLBHgwIwgw-xwwIwgweMcASD8A0-u3EVCTBNMwkwjT_Z0kTMQ8SwR4MCMEMPwzHPwwI
wQweMcASD8AyEz7GMjXBMj7GMv5HIoYxDxLAMhM_xjI1wTI_xjIeMRIPwf4tUyUMCMIMP8cMCMIM
HjHADxLAMhM_xjI1wTI_xjL_RyKGMRIxwAAVyS-AD8AyNT7GMjXBMj7GMh4xDxLC-i1TJQwIwQw-
DMU-DAjBDB4xwBLAD8AyNT7GMjXBMj7GMv5HIoYxDxLB-hd5fRf_ILSzwgIXAsUXAj7CAv4WWFUx
EsAPwDI1-o077cYyNcEyPsYyHjEPEsA0-u3EVCTTNP5nSRMxEg-C-i1TJQwIwgw-xQwIwgweMcAP
wBLANP7txFQk0zT_Z0kTMRIPwDT_7cRUJNM0-mdJEzEPEsIeDAjCDD-FDAjCDB4xwBLAD8A0-u3E
VCTTNP5nSRMxDxLCHgwIwQw-DMU-DAjBDB4xwBLAD8AyNT7GMjXBMj7GMv5HIoYxDxLAMjU_xjI1
wTI_xjIeMRIPwv4tUyUMCMIMP8UMCMIMHjHAD8ASwDI1PsYyNcEyPsYy-kcihjESMcAAFckvwA-A
MhM_xzI1Mj7HMh4xDxLD-i1TJQwIwAw-DMU-DAjADB4xwBLBD8AyEz7HMjUyPscy-kcihjEPEsH_
F3l9-lzY0v4gtLPCAhcCxRcCPsIC-hZYVTESwA-AMhP_jTvtxzI1Mj7HMh4xDxLBHDQk0TQcMcAS
D8P_LVMlDAjBDP6-8pXFDAjBDB4xwA-BEsEcNCTRNBwxwBIPwRw0JNE0HDHADxLDHgwIwQw-xQwI
wQweMcASwQ-BHDQk0TQcMcAPEsMeDAjADD8MxT8MCMAMHjHAEsEPwDITPscyNTI_xzL_RyKGMQ8S
wDITPscyNTI_xzIeMRIPw-4tUyUMCMEMP8UMCMEMHjHAD8ESwDITPscyNTI_xzL_RyKGMRIxwAAV
yS-AD8AyEz7HMjUyPscyHjEPEsT_LVMlDAgMP8cMCAweMcASwg-AMhM_xzI1Mj7HMv5HIoYxDxLB
-hd5fRf_ILSzwgIXxwI_wgL_FlhVMRLAD8AyE-6NO_3HMjUyPscyHjEPEsIcNCTPNBwxwBLAD8T_
LVMlDAjADMcIwAweMcAPwhLCHDQkzzQcMcASwA-CHDQkzzQcMcAPwBLEHgwIwAzHCMAMHjHAEsIP
whw0JM80HDHAD8ASxB4MCAw-xwwIDB4xwBLCD8AyEz7HMjUyPscy-kcihjEPEsAyEz7HMjUyPscy
HjESD8T_LVMlDAjADMcIwAweMcAPwhLAMhM_xzI1Mj7HMv5HIoYxEjHAABXJL8APwDI_Mj7HMj7H
MsAeMQ8Sxf4tUyUMCAzHCAweMcASww-AMj4yPscyPscywP5HIoYxDxLB-hd5ff5c2NL_ILSzwwLH
PsMC-hZYVTESwA-AMv6NO_0yPscyPscywB4xDxLDHDQkzTQcMcASwQ-F-i1TJQwIyQweMcAPwxLD
HDQkzTQcMcASwQ-DHDQkzTQcMcAPwRLFHgwIyQweMcASww-DHDQkzTQcMcAPwRLFHgwIDMcIDB4x
wBLDD8AyPjI_xzI_xzLA-kcihjEPEsAyPjI_xzI_xzLAHjESD8X_LVMlDAjJDB4xwA-DEsAyPjI_
xzI_xzLA-kcihjESMcAAFckvwA-BHsAywD7FMj7FMsAewDHADxLG-i1TJQwIxwweMcASxA-B-kci
hsAywD7FMj7FMsAewDHADxLB-hd5fT-_ILSz0QL_FlhVMRLAD8EewDLA-o077cUyPsUywB7AMcAP
EsQcNCTLNBwxwBLCD8b_LVMlDAjHDB4xwA-EEsQcNCTLNBwxwBLCD8QcNCTLNBwxwA-CEsYeDAjH
DB4xwBLED8QcNCTLNBwxwA-CEsYeDAjHDB4xwBLED8H_RyKGwDLAPsUyPsUywB7AMcAPEsEewDLA
PsUyPsUywB7AMcASD8b_LVMlDAjHDB4xwA-EEsH_RyKGwDLAPsUyPsUywB7AMcASMcAAFckvwA-C
MR7AMsA_yTLAHsAxwQ-AEsf_LVMlDAjFDB4xwBLFD8Ix-kcihsAywD7JMsAewDHBD8ASwv4XeX0-
-iC0s88C-hZYVTHAEsAPwjEewDLA-o077ckywB7AMcEPwBLFHDQkyTQcMcASww-H-i1TJQwIxQwe
McAPxRLFHDQkyTQcMcASww-FHDQkyTQcMcAPwxLHHgwIxQweMcASxQ-FHDQkyTQcMcAPwxLHHgwI
xQweMcASxQ-CMf5HIobAMsA_yTLAHsAxwQ-AEsIxHsAywD7JMsAewDHBEsAPx-4tUyUMCMUMHjHA
D8USwjH_RyKGwDLAPskywB7AMcESwDHAABXJL8APxDEewDLAPsUywB7AMcEPwhLI-i1TJQwIwwwe
McASxg-EMf5HIobAMsA_xTLAHsAxwQ-CEsMC-hd5fc-_FlhVMcASwQ-EMR7AMsA_xTLAHsAxwQ-C
EsYcNCTHNBwxwBLED8j_LVMlDAjDDB4xwA-GEsYcNCTHNBwxwBLED8YcNCTHNBwxwA-EEsgeDAjD
DB4xwBLGD8YcNCTHNBwxwA-EEsgeDAjDDB4xwBLGD8Qx-kcihsAywD7FMsAewDHBD8ISxDEewDLA
PsUywB7AMcESwg-I-i1TJQwIwwweMcAPxhLEMf5HIobAMsA_xTLAHsAxwRLCMcAAFckvwA-GMR7A
MsA_wTLAHsAxwQ-EEsn_LVMlDAjBDB4xwBLHD8Yx-kcihsAywD7BMsAewDHBD8QSxALPMcASwg-G
MR7AMsA_wTLAHsAxwQ-EEsccNMccMcASxQ-J-i1TJQwIwQweMcAPxxLHHDTHHDHAEsUPxxw0xxwx
wA-FEskeDAjBDB4xwBLHD8ccNMccMcAPxRLJHgwIwQweMcASxw-GMf5HIobAMsA_wTLAHsAxwQ-E
EsYxHsAywD7BMsAewDHBEsQPyf4tUyUMCMEMHjHAD8cSxjH_RyKGwDLAPsEywB7AMcESxDHAABXJ
L8APyDEewDLBHsAxwQ-GEsr_LVMlDMEeMcASyA-IMf5HIobAMsEewDHBD8YSxTHPEsMPyDEewDLB
HsAxwQ-GEsgcxzHAEsYPyv4tUyUMwR4xwA-IEsgcxzHAEsYPyBzHMcAPxhLKHgzBHjHAEsgPyBzH
McAPxhLKHgzBHjHAEsgPyDH_RyKGwDLBHsAxwQ-GEsgxHsAywR7AMcESxg-K-i1TJQzBHjHAD8gS
yDH_RyKGwDLBHsAxwRLGMcAAFckvwA-KMR7BMcEPyBLL-i1TJcExwBLJD8ox-kcihsExwQ-IEtsP
yjEewTHBD8gSyTHHEscPy-4tUyXBMcAPyRLJMccSxw-JMccPxxLLHsExwBLJD8kxxw-HEssewTHA
EskPyjH_RyKGwTHBD8gSyjEewTHBEsgPy-4tUyXBMcAPyRLKMf5HIobBMcESyDHAABXJL8APzDHB
D8oSzDHBEsoPzDHBD8oS2w-MMcEPyhLbD8wxwQ-KEtsP2xLMMcESyg-bEswxwRLKD8wxwQ-KEswx
wRLKD8wxwQ-KEswxwRLKMcAAFckvwBLbD9sS2w-bEtsP2xLbD9sS2w-bEtsP2xLbD9sS2w-bMcAA
FckvwBLbD9sS2w-LMsEPyxLLDMESyw-LDMEPyxLbD9sS2w-LMsEPyxLLMsESyw-bEtsPywzBD8sS
2w-bMcAAFckvwBLINMcSyA-INMcPyBLJBMUSyQ-JMsATNRMywA-JEsoM-ofUVv6-8pUIDBLKD8oM
CD8IDA-KEskExRLJD9sS2w-JMsATNRMywA-JEskywBM1EzLAEskP2xLJBMUSyQ-KDAg-CAwPyhLJ
BMUSyQ-JBMUPyTHAABXJL8ASxzQ6w-7txFQ6HMA0EscPxzQ6wxw6HMA0D8cSxwTAGcE5GTnABMAS
xw-HMsA1wD7BE8AywA-HEskMP-5QoyzB-ofUVgwSyQ-JDD-_UKMswf6H1FYMD8kSxwTAGcE5GTnA
BMASxw-E-hd5fc8PxBLEAs8SxA-HMsA1wD7BE8AywA-HEscywDXAPsETwDLAEscPxALPD8QSxwTA
GcE5GTnABMASxw-JDD-_UKMswf6H1FYMD8kSxwTAGcE5GTnABMASxw-HBMAZwTkZOcAEwA-HMcAA
FckvwBLGNDokxxw0EsYPxjQ6JMccNA-GEsUEwBnAJsU5wBDAEsUPxTLANcA_xRPAMsAPxRLIDD-_
UKMsw-6H1FYMEsgPyAw--lCjLMP_h9RWDA-IEsUEwBnAJsU5wBDAEsUPwwIXy-5c2NIXP8ACD8MS
wwIXyz8XP8ACEsMPxTLANcA_xRPAMsAPxRLFMsA1wD7FE8AywBLFD8MCF8s-Fz-AAg-DEsUEwBnA
JsU5wBDAEsUPyAz_v-KV-lCjLMP_h9RWDA-IEsUEwBnAJsU5wBDAEsUPxQTAGcAmxTnAEMAPxTHA
ABXJL8ASxTQ6JMkcNBLFD8U0OiTJHDQPxRLEBBnAJsk5BBASxA-DMsA1wD7JE8AywA-DEscMP-5Q
oyzF-ofUVgwSxw-HDD-_UKMsxf6H1FYMD8cSxAQZwCbJOQQQEsQPwgIX-iC0s8-_XNjS-hZYVQ-C
EsL_F3l9Fz7PP-4WWFUSwg-DMsA1wP6NO_3JE8AywA-DEsMywDXAPskTwDLAEsMPwv4XeX0X-iC0
s88--hZYVQ-CEsQEGcAmyTkEEBLED8cM-r-ylf5QoyzF-ofUVgwPxxLEBBnAJsk5BBASxA-EBBnA
Jsk5BBAPxDHAABXJL8ASxDQ6JMscNBLED8Q0OiTLHDQPxBLDBBkmzQQQEsMPwTLANcD_jTvtxTI_
xRPAMsAPwRLGDD-_UKMsx-6H1FYMEsYPxgw--lCjLMf_h9RWDA-GEsMEGSbNBBASww-B-hd5fRf_
ILSz0QL_FlhVD8ESwf4XeX0XPtEC-hZYVRLBD8EywDXA-o077cUyPsUTwDLAD8ESwTLANcA_xTI_
xRPAMsASwQ-B-hd5fRf_ILSz0QL_FlhVD8ESwwQZJs0EEBLDD8YMP-5QoyzH-ofUVgwPxhLDBBkm
zQQQEsMPwwQZJs0EEA-DMcAAFckvwBLDNDokzRw0EsMPwzQ6JM0cNA-DEsIEGSbPBBASwg-AMjXA
-o077ccyPscTPh4PwBLFDD-_UKMswAzACAzACML_h9RWDBLFD8UMP-5QoyzADMAIDMAIwv6H1FYM
D8USwgQZJs8EEBLCD8H_F3l9F-4gtLPRAv4WWFUxD8ASwf4XeX0XPtEC-hZYVTESwA-AMjXA-o07
7ccyPscTPh4PwBLAMjXAPscyPscTPh4SwA-B-hd5fRf_ILSz0QL_FlhVMQ-AEsIEGSbPBBASwg-F
DD-_UKMswAzACAzACML_h9RWDA-FEsIEGSbPBBASwg-CBBkmzwQQD8IxwAAVyS-AEsI0OiTPHDQS
wg-CNDokzxw0D8ISwgQZJs8EEDESwQ-AMjX_jTvtxzI1Mj7HMh4xDxLEDD-_UKMswAw-wAw-wAzB
CMD_h9RWDBLED8QMP-5QoyzADD-ADD-ADMEIwP6H1FYMD8QSwgQZJs8EEDESwQ-B-hd5fRf_ILSz
wwLBPsECwT7DAv4WWFUxD8ASwf4XeX0XPsMCwT7BAsE_wwL_FlhVMRLAD8AyNf6NO_3HMjUyPscy
HjEPEsAyNT7HMjUyPscyHjESD8H_F3l9F-4gtLPDAsE_wQLBPsMC-hZYVTEPwBLCBBkmzwQQMRLB
D8QMP-5QoyzADD-ADD-ADMEIwP6H1FYMD8QSwgQZJs8EEDESwQ-CBBkmzwQQMQ-BMcAAFckvwBLB
NDokxzTAJMYcNBLBD8E0OiTHNMAkxhw0D8ESwQQZJsUEwybFBBASwQ-AMjX_jTvtxzI1Mj7HMh4x
DxLDDD-_UKMswQw-wAw-wAw-wAwIwP6H1FYMEsMPwww--lCjLMEMP8AMP8AMP8AMCMD_h9RWDA-D
EsEEGSbFBMMmxQQQEsEPwf4XeX0X-iC0s8ICF8ECwRfBAj7CAv4WWFUxD8ASwf4XeX0XPsICF8EC
wRfBAj7CAv4WWFUxEsAPwDI1-o077ccyNTI_xzIeMQ8SwDI1PscyNTI_xzIeMRIPwf4XeX0X-iC0
s8ICF8ECwRfBAj7CAv4WWFUxD8ASwQQZJsUEwybFBBASwQ-DDD-_UKMswQw-wAw-wAw-wAwIwP6H
1FYMD8MSwQQZJsUEwybFBBASwQ-BBBkmxQTDJsUEEA-BMcAAFckvwBLANDokxjTAOsA0JME0wCTB
HP5nSRMSwA-ANDokxjTAOsA0JME0wCTB-u3EVP5nSRMPwBLBBBkmxAQZwwTCJsEEEDESwA-AMjX_
jTvtxjI1wTI_xjIeMQ8Swgw--lCjLMIMP8AMP8AMP8AMCMH_h9RWDBLCD8IMP-5QoyzCDD-ADD-A
DD-ADAjB-ofUVgwPwhLBBBkmxAQZwwTCJsEEEDESwA-B-hd5fRf_ILSzwQIXyQI_wQL_FlhVMQ-A
EsH_F3l9Fz7BAhfJAj7BAv4WWFUxEsAPwDI1-o077cYyNcEyPsYyHjEPEsAyNT7GMjXBMj7GMh4x
Eg-B-hd5fRf_ILSzwQIXyQI_wQL_FlhVMQ-AEsEEGSbEBBnDBMImwQQQMRLAD8IMP-5QoyzCDD-A
DD-ADD-ADAjB-ofUVgwPwhLBBBkmxAQZwwTCJsEEEDESwA-BBBkmxAQZwwTCJsEEEDEPwDHAABXJ
L8ASwDQ6JMQ0wDrANDrANME6NCTBNBwxEg-ANDokxDTAOsA0OsA0wTo0JME0HDEPEsAEGSbBBMIZ
xAQZwQQmwQQQEsAPwDI1-o077cYyNcEyPsYyHjEPEsEMP-5QoyzCDME-DD-ADD-ADAjC-ofUVgwS
wQ-BDD-_UKMswgzBPww-wAw-wAwIwv6H1FYMD8ESwAQZJsEEwhnEBBnBBCbBBBASwA-B-hd5fRf_
ILSzwAIXywI_wAL_FlhVMQ-AEsH_F3l9Fz7AAhfLAj7AAv4WWFUxEsAPwDI1-o077cYyNcEyPsYy
HjEPEsAyNT7GMjXBMj7GMh4xEg-B-hd5fRf_ILSzwAIXywI_wAL_FlhVMQ-AEsAEGSbBBMIZxAQZ
wQQmwQQQEsAPwQw--lCjLMIMwT8MP8AMP8AMCML_h9RWDA-BEsAEGSbBBMIZxAQZwQQmwQQQEsAP
wAQZJsEEwhnEBBnBBCbBBBAPwDHAABXJL8ASwDQ6JMI0wDrANDrGNCTBNBwxEg-ANDokwjTAOsA0
OsY0JME0HDEPEsAEGSbBBBnDBMAZwAQZwQQmwQQQMRIPwDI1-o077cQywDXDMsA_xDIeMQ8SwAw-
-lCjLMIMP8AMPww-wAw-wAwIw-6H1FYMEsAPwAw--lCjLMIMP8AMPww-wAw-wAwIw-6H1FYMD8AS
wAQZJsEEGcMEwBnABBnBBCbBBBAxEg-B-hd5fRf_ILSzAhfNAj4C-hZYVTEPwBLB-hd5fRc_AhfN
Aj4C-hZYVTESwA-AMjX_jTvtxDLANcMywD7EMh4xDxLAMjU_xDLANcMywD7EMh4xEg-B-hd5fRf_
ILSzAhfNAj4C-hZYVTEPwBLABBkmwQQZwwTAGcAEGcEEJsEEEDESD8AMP-5QoyzCDD-ADD8MP8AM
P8AMCMP_h9RWDA-AEsAEGSbBBBnDBMAZwAQZwQQmwQQQMRIPwAQZJsEEGcMEwBnABBnBBCbBBBAx
DzHAABXJL8ASwDQ6JME0OsA0Osg0JME0HDESD8A0OiTBNDrANDrINCTBNBwxDxLABBkmwQQZxAQZ
wATCJsIEEDESD8AyNf6NO_3CMsA1xzLAPsIyHjEPEgwI-lCjLMMMP8AMP8UMCMQM-i1TJRIPDP6H
1Fb_UKMswww-wAw-xQwIxAweDxLABBkmwQQZxAQZwATCJsIEEDESD8H_F3l9FwIXzwLA-hZYVTEP
wBLB-hd5fRcCF88CwP4WWFUxEsAPwDI1PsIywDXHMsA_wjL_RyKGMQ8SwDI1PsIywDXHMsA_wjIe
MRIPwf4XeX0XAhfPAsD_FlhVMQ-AEsAEGSbBBBnEBBnABMImwgQQMRIPDP6H1Fb_UKMswww-wAw-
xQwIxAz_LVMlDxLABBkmwQQZxAQZwATCJsIEEDESD8AEGSbBBBnEBBnABMImwgQQMQ8xwAAVyS-A
EsA0OiTANDrMNCTBNBwxEg-ANDokwDQ6zDQkwTQcMQ8SwAQ5JsEEGcQEGcAEGcEEJsEEEDESD8Ay
NT7AMsA1yzLAPsAy-kcihjEPEgw-CMMMP8AMP8UMCMQM-i1TJTEPDD8Iwww-wAw-xQwIxAweMRLA
BDkmwQQZxAQZwAQZwQQmwQQQMRIPwf4XeX0X-iC0swIXwQIXxQIXwQI_Av4WWFUxD8ASwf4XeX0X
PgIXwQIXxQIXwQI_Av4WWFUxEsAPwDI1-o077cAywDXLMsA_wDL_RyKGMQ8SwDI1PsAywDXLMsA_
wDIeMRIPwf4XeX0X-iC0swIXwQIXxQIXwQI_Av4WWFUxD8ASwAQ5JsEEGcQEGcAEGcEEJsEEEDES
Dww-CMMMP8AMP8UMCMQM-i1TJTESwAQ5JsEEGcQEGcAEGcEEJsEEEDESD8AEOSbBBBnEBBnABBnB
BCbBBBAxDzHAABXJL8ASwDT_7cRUJMA0Osw0JME0-mdJEzESD8A0-u3EVCTANDrMNCTBNP5nSRMx
DxLABBkmwQQZxQTBGcEEJsEEEDESD8AyNf6NO_3CMsA1xzLAPsIy-kcihjEPEgz_h9RW-lCjLMMM
P8gMCMQM-i1TJTEPDP6H1Fb_UKMswww-yAwIxAweMRLABBkmwQQZxQTBGcEEJsEEEDESD8H_F3l9
F-4gtLPAAhcCwBfFAsAXAj7AAv4WWFUxD8ASwf4XeX0XPsACFwLAF8UCwBcCPsAC-hZYVTESwA-A
MjX_jTvtwjLANccywD7CMv5HIoYxDxLAMjU_wjLANccywD7CMh4xEg-B-hd5fRf_ILSzwAIXAsAX
xQLAFwI_wAL_FlhVMQ-AEsAEGSbBBBnFBMEZwQQmwQQQMRIPDP6H1Fb_UKMswww-yAwIxAz_LVMl
MRLABBkmwQQZxQTBGcEEJsEEEDESD8AEGSbBBBnFBMEZwQQmwQQQMQ8xwAAVyS-AEsA0OiTANDrM
NCTBNBwxEg-ANDokwDQ6zDQkwTQcMQ8SwAQ5JsEEGccEwibCBBAxEg-AMjX_jTvtxDLANcMywD7E
Mv5HIoYxDxLA-i1TJQwIwgw-yAwIwwweMcAPwB4MCMIMP8gMCMMMHjHAEsAEOSbBBBnHBMImwgQQ
MRIPwf4XeX0X-iC0s8ECPgIXxQI_Aj7BAv4WWFUxD8ASwf4XeX0XPsECPgIXxQI_Aj7BAv4WWFUx
EsAPwDI1-o077cQywDXDMsA_xDL_RyKGMQ8SwDI1PsQywDXDMsA_xDIeMRIPwf4XeX0X-iC0s8EC
PgIXxQI_Aj7BAv4WWFUxD8ASwAQ5JsEEGccEwibCBBAxEg-A-i1TJQwIwgw-yAwIwwweMcASwAQ5
JsEEGccEwibCBBAxEg-ABDkmwQQZxwTCJsIEEDEPMcAAFckvwBLANP7txFQkwTTMJMI0-mdJEzES
D8A0-u3EVCTBNMwkwjT_Z0kTMQ8SwAQ5JsEEGcYEGcEEJsIEEDESD8AyE-6NO_3GMjXBMj7GMv5H
IoYxDxLB-i1TJQwIwgw-xwwIwgweMcASD8EeDAjCDD-HDAjCDB4xwA8SwAQ5JsEEGcYEGcEEJsIE
EDESD8H_F3l9F-4gtLPDAhfFAj7DAv4WWFUxD8ASwf4XeX0XPsMCF8UCPsMC-hZYVTESwA-AMhP_
jTvtxjI1wTI_xjL_RyKGMQ8SwDITPsYyNcEyPsYyHjESD8H_F3l9F-4gtLPDAhfFAj7DAv4WWFUx
D8ASwAQ5JsEEGcYEGcEEJsIEEDESD8H_LVMlDAjCDD-HDAjCDB4xwA8SwAQ5JsEEGcYEGcEEJsIE
EDESD8AEOSbBBBnGBBnBBCbCBBAxDzHAABXJL8ASwDT_7cRUJNM0-mdJEzESD8A0-u3EVCTTNP5n
SRMxDxLBBDkmwATDGcIEGcEEJsEEEDHAEg-AMjX_jTvtxjI1wTI_xjL_RyKGMQ8Swv4tUyUMCMIM
P8UMCMIMHjHAEsAPwh4MCMIMP8UMCMIMHjHAD8ASwQQ5JsAEwxnCBBnBBCbBBBAxwBIPwf4XeX0X
-iC0s8MCF8UCPsMC-hZYVTEPwBLB-hd5fRc_wwIXxQI_wwL_FlhVMRLAD8AyNf6NO_3GMjXBMj7G
Mv5HIoYxDxLAMjU_xjI1wTI_xjIeMRIPwf4XeX0X-iC0s8MCF8UCPsMC-hZYVTEPwBLBBDkmwATD
GcIEGcEEJsEEEDHAEg-C-i1TJQwIwgw-xQwIwgweMcAPwBLBBDkmwATDGcIEGcEEJsEEEDHAEg-B
BDkmwATDGcIEGcEEJsEEEDHADzHAABXJL8ASwRw0JNE0HDHAEg-BHDQk0TQcMcAPEsEEOSbFBMYm
wgQQMRLAD8AyE-6NO_3HMjUyPscy-kcihjEPEsP_LVMlDAjBDD-FDAjBDB4xwBLBD8MeDAjBDD-F
DAjBDB4xwA-BEsEEOSbFBMYmwgQQMRLAD8H_F3l9-lzY0v4gtLPDAhfFAj7DAv4WWFUxD8ASwf4X
eX0-PsMCF8UCPsMC-hZYVTESwA-AMhP_jTvtxzI1Mj7HMv5HIoYxDxLAMhM_xzI1Mj7HMh4xEg-B
-hd5fT-_ILSzwwIXxQI_wwL_FlhVMQ-AEsEEOSbFBMYmwgQQMRLAD8P_LVMlDAjBDP6-8pXFDAjB
DB4xwA-BEsEEOSbFBMYmwgQQMRLAD8EEOSbFBMYmwgQQMQ-AMcAAFckvwBLCHDQkzzQcMcASwA-C
HDQkzzQcMcAPwBLCEDkmzwQQMcASwA-AMhP_jTvtxzI1Mj7HMv5HIoYxDxLE-i1TJQwIwAzHCMAM
HjHAEsIPxB4MCMAMxwjADB4xwA-CEsIQOSbPBBAxwBLAD8H_F3l9F-4gtLPDAsc_wwL_FlhVMQ-A
EsH_F3l9Fz7DAsc_wwL_FlhVMRLAD8AyE-6NO_3HMjUyPscy-kcihjEPEsAyEz7HMjUyPscyHjES
D8H_F3l9F-4gtLPDAsc_wwL_FlhVMQ-AEsIQOSbPBBAxwBLAD8T_LVMlDAjADMcIwAweMcAPwhLC
EDkmzwQQMcASwA-CEDkmzwQQMcAPwDHAABXJL8ASwxw0JM00HDHAEsEPwxw0JM00HDHAD8ESwhAE
Js8EEDESwQ-AMv6NO_0yPscyPscywP5HIoYxDxLF-i1TJQwIyQweMcASww-FHgwIyQweMcAPwxLC
EAQmzwQQMRLBD8H_F3l9-lzY0v4gtLPRAv4WWFUxD8ASwf4XeX0-PtEC-hZYVTESwA-AMv6NO_0y
PscyPscywP5HIoYxDxLAMj4yPscyPscywB4xEg-B-hd5fT-_ILSz0QL_FlhVMQ-AEsIQBCbPBBAx
EsEPxf4tUyUMCMkMHjHAD8MSwhAEJs8EEDESwQ-CEAQmzwQQMQ-BMcAAFckvwBLEHDQkyzQcMcAS
wg-EHDQkyzQcMcAPwhLDEAQmzQQQMcASwQ-B-kcihsAywP6NO_3FMj7FMsAewDHADxLG-i1TJQwI
xwweMcASxA-GHgwIxwweMcAPxBLDEAQmzQQQMcASwQ-B-hd5fT-_ILSz0QL_FlhVMQ-AEsH_F3l9
Pz7RAv4WWFUxEsAPwf5HIobAMsD_jTvtxTI_xTLAHsAxwA8SwR7AMsA_xTI_xTLAHsAxwBIPwf4X
eX0--iC0s9EC-hZYVTEPwBLDEAQmzQQQMcASwQ-G-i1TJQwIxwweMcAPxBLDEAQmzQQQMcASwQ-D
EAQmzQQQMcAPwTHAABXJL8ASxRw0JMk0HDHAEsMPxRw0JMk0HDHAD8MSxBAEwCbJBMAQMcASwg-C
Mf5HIobAMsD_jTvtyTLAHsAxwQ-AEsf_LVMlDAjFDB4xwBLFD8ceDAjFDB4xwA-FEsQQBMAmyQTA
EDHAEsIPwv4XeX0--iC0s88C-hZYVTHAD8ASwv4XeX0-Ps8C-hZYVTHAEsAPwjH_RyKGwDLA-o07
7ckywB7AMcEPwBLCMR7AMsA_yTLAHsAxwRLAD8L_F3l9P-4gtLPPAv4WWFUxwA-AEsQQBMAmyQTA
EDHAEsIPx-4tUyUMCMUMHjHAD8USxBAEwCbJBMAQMcASwg-EEATAJskEwBAxwA-CMcAAFckvwBLG
HDQkxzQcMcASxA-GHDQkxzQcMcAPxBLFEMAEwCbFBMAQwDHAEsMPxDH_RyKGwDLA-o077cUywB7A
McEPwhLI-i1TJQwIwwweMcASxg-IHgwIwwweMcAPxhLFEMAEwCbFBMAQwDHAEsMPwwL_F3l9z-4W
WFUxwA-BEsMC-hd5fc-_FlhVMcASwQ-EMf5HIobAMsA_xTLAHsAxwQ-CEsQxHsAywD7FMsAewDHB
EsIPwwL_F3l9z-4WWFUxwA-BEsUQwATAJsUEwBDAMcASww-I-i1TJQwIwwweMcAPxhLFEMAEwCbF
BMAQwDHAEsMPxRDABMAmxQTAEMAxwA-DMcAAFckvwBLHHDTHHDHAEsUPxxw0xxwxwA-FEsYxEMAE
xRDAMcESxA-GMf5HIobAMsA_wTLAHsAxwQ-EEsn_LVMlDAjBDB4xwBLHD8keDAjBDB4xwA-HEsYx
EMAExRDAMcESxA-EAs8xwA-CEsQCzzHAEsIPxjH_RyKGwDLAPsEywB7AMcEPxBLGMR7AMsA_wTLA
HsAxwRLED8QCzzHAD8ISxjEQwATFEMAxwRLED8n_LVMlDAjBDB4xwA-HEsYxEMAExRDAMcESxA-G
MRDABMUQwDHBD8QxwAAVyS-AEsgcxzHAEsYPyBzHMcAPxhLIMRDFMcESxg-IMf5HIobAMsEewDHB
D8YSyv4tUyUMwR4xwBLID8oeDMEeMcAPyBLIMRDFMcESxg-FMc8PwxLFMc8Sww-IMf5HIobAMsEe
wDHBD8YSyDEewDLBHsAxwRLGD8Uxzw-DEsgxEMUxwRLGD8r_LVMlDMEeMcAPyBLIMRDFMcESxg-I
MRDFMcEPxjHAABXJL8ASyTHHEscPyTHHD8cSyjHFEsgPyjH_RyKGwTHBD8gSy-4tUyXBMcASyQ-L
HsExwA-JEsoxxRLID9sS2w-KMf5HIobBMcEPyBLKMR7BMcESyA-bEsoxxRLID8v_LVMlwTHAD8kS
yjHFEsgPyjHFD8gxwAAVyS-AEtsP2xLbD8wxwQ-KEswxwRLKD8wxwQ-KEtsP2xLbD8wxwQ-KEswx
wRLKD9sS2w-MMcEPyhLbD9sxwAAVyS-AD9sS2w-bEtsP2xLbD9sS2w-bEtsP2xLbD9sS2w-bEtsx
wAAVyS-AD8sMwQ-LEtsP2xLbD9sS2w-bEssMwRLLD9sS2w-bEssywRLLD9sS2w-bEtsxwAAVyS-A
D8oM-ofUVv6-8pUIDA-KEskExRLJD9sSyDTHEsgPyQTFD8kSyQTFEskP2xLKDAg-CAwSyg-JBMUP
yRLbD8kExQ-JEskywBM1EzLAEskPyDTHD8gSyQTFEskPyDTHD8gS2zHAABXJL8APyQw--lCjLMH_
h9RWDA-JEscEwBnBORk5wATAEscPxP4XeX3PD8QSxzQ6w-7txFQ6HMA0EscPxwTAGcE5GTnABMAP
xxLHBMAZwTkZOcAEwBLHD8QCzw-EEskMP-5QoyzB-ofUVgwSyQ-HBMAZwTkZOcAEwA-HEsQCzxLE
D8cEwBnBORk5wATAD8cSxzLANcA_wRPAMsASxw-HNDrDHDocwDQPxxLHBMAZwTkZOcAEwBLHD8c0
OsMcOhzANA-HEsQCzxLEMcAAFckvwA-IDD-_UKMsw-6H1FYMD8gSxQTAGcAmxTnAEMASxQ-DAhfL
-lzY0hc-wAIPwxLGNDokxxw0EsYPxQTAGcAmxTnAEMAPxRLFBMAZwCbFOcAQwBLFD8MCF8s-Fz-A
Ag-DEsgM-r-ylf5QoyzD-ofUVgwSyA-FBMAZwCbFOcAQwA-FEsMCF8v_XNjSFz-AAhLDD8UEwBnA
JsU5wBDAD8USxTLANcA_xRPAMsASxQ-GNDokxxw0D8YSxQTAGcAmxTnAEMASxQ-GNDokxxw0D8YS
wwIXyz8XP8ACEsMxwAAVyS-AD8cM-r-ylf5QoyzF-ofUVgwPxxLEBBnAJsk5BBASxA-CAhf_ILSz
z-5c2NL_FlhVD8ISxTQ6JMkcNBLFD8QEGcAmyTkEEA-EEsQEGcAmyTkEEBLED8L_F3l9Fz7PP-4W
WFUPwhLHDP6-8pX_UKMsxf6H1FYMEscPxAQZwCbJOQQQD8QSwv4XeX0XPs-_XNjS-hZYVRLCD8QE
GcAmyTkEEA-EEsMywDXA-o077ckTwDLAEsMPxTQ6JMkcNA-FEsQEGcAmyTkEEBLED8U0OiTJHDQP
xRLC-hd5fRf_ILSzzz-_FlhVEsIxwAAVyS-AD8YM-r-ylf5QoyzH-ofUVgwPxhLDBBkmzQQQEsMP
wf4XeX0XPtEC-hZYVQ-BEsQ0OiTLHDQSxA-DBBkmzQQQD8MSwwQZJs0EEBLDD8H_F3l9Fz7RAv4W
WFUPwRLGDD-_UKMsx-6H1FYMEsYPwwQZJs0EEA-DEsH_F3l9Fz7RAv4WWFUSwQ-DBBkmzQQQD8MS
wTLANcD_jTvtxTI_xRPAMsASwQ-ENDokyxw0D8QSwwQZJs0EEBLDD8Q0OiTLHDQPxBLB-hd5fRf_
ILSz0QL_FlhVEsExwAAVyS-AD8UMP-5QoyzADMAIDMAIwv6H1FYMD8USwgQZJs8EEBLCD8H_F3l9
Fz7RAv4WWFUxD8ASwzQ6JM0cNBLDD8IEGSbPBBAPwhLCBBkmzwQQEsIPwf4XeX0XPtEC-hZYVTEP
wBLFDD-_UKMswAzACAzACML_h9RWDBLFD8IEGSbPBBAPwhLB-hd5fRc_0QL_FlhVMRLAD8IEGSbP
BBAPwhLAMjXA-o077ccyPscTPv5HIoYSwA-DNDokzRw0D8MSwgQZJs8EEBLCD8M0OiTNHDQPwxLB
-hd5fRf_ILSz0QL_FlhVMRLAMcAAFckvwA-EDD-_UKMswAw-wAw-wAzBCMD_h9RWDA-EEsIEGSbP
BBAxEsEPwf4XeX0XPsMCwT7BAsE_wwL_FlhVMQ-AEsI0OiTPHDQSwg-CBBkmzwQQMQ-BEsIEGSbP
BBAxEsEPwf4XeX0XPsMCwT7BAsE_wwL_FlhVMQ-AEsQMP-5QoyzADD-ADD-ADMEIwP6H1FYMEsQP
wgQZJs8EEDEPwRLB-hd5fRc_wwLBPsECwT7DAv4WWFUxEsAPwgQZJs8EEDEPwRLAMjX_jTvtxzI1
Mj7HMh4xEg-CNDokzxw0D8ISwgQZJsQEwybEBBAxEsEPwjQ6JM8cNA-CEsH_F3l9F-4gtLPDAsE_
wQLBPsMC-hZYVTESwDHAABXJL8APwww--lCjLMEMP8AMP8AMP8AMCMD_h9RWDA-DEsEEGSbFBMMm
xQQQEsEPwf4XeX0XPsICF8ECwRfBAj7CAv4WWFUxD8ASwTQ6JMc0wCTGHDQSwQ-BBBkmxQTDJsUE
EA-BEsEEGSbFBMMmxQQQEsEPwf4XeX0XPsICF8ECwRfBAj7CAv4WWFUxD8ASwww--lCjLMEMP8AM
P8AMP8AMCMD_h9RWDBLDD8EEGSbFBMMmxQQQD8ESwf4XeX0XPsICF8ECwRfBAj7CAv4WWFUxEsAP
wQQZJsUEwybFBBAPwRLAMjX_jTvtxzI1Mj7HMh4xEg-BNDokxzTAJMYcNA-BEsEEGSbEBBnDBMIm
wQQQEsEPwTQ6JMc0wCTGHDQPwRLB-hd5fRf_ILSzwgIXwQLBF8ECPsIC-hZYVTESwDHAABXJL8AP
wgw--lCjLMIMP8AMP8AMP8AMCMH_h9RWDA-CEsEEGSbEBBnDBMImwQQQMRLAD8H_F3l9Fz7BAhfJ
Aj7BAv4WWFUxD8ASwDQ6JMY0wDrANCTBNMAkwRz_Z0kTEsAPwQQZJsQEGcMEwibBBBAxD8ASwQQZ
JsQEGcMEwibBBBAxEsAPwf4XeX0XPsECF8kCPsEC-hZYVTEPwBLCDD-_UKMswgw-wAw-wAw-wAwI
wf6H1FYMEsIPwQQZJsQEGcMEwibBBBAxD8ASwf4XeX0XPsECF8kCPsEC-hZYVTESwA-BBBkmxAQZ
wwTCJsEEEDEPwBLAMjX_jTvtxjI1wTI_xjIeMRIPwDQ6JMY0wDrANCTBNMAkwf7txFT_Z0kTD8AS
wQQZJsAEwhkEwxnCBCbABBAxEsAPwDQ6JMY0wDrANCTBNMAkwf7txFT_Z0kTD8ASwf4XeX0X-iC0
s8ECF8kCPsEC-hZYVTESwDHAABXJL8APwQw--lCjLMIMwT8MP8AMP8AMCML_h9RWDA-BEsAEGSbB
BMIZxAQZwQQmwQQQEsAPwf4XeX0XPsACF8sCPsAC-hZYVTEPwBLANDokxDTAOsA0OsA0wTo0JME0
HDESD8AEGSbBBMIZxAQZwQQmwQQQD8ASwAQZJsEEwhnEBBnBBCbBBBASwA-B-hd5fRc_wAIXywI_
wAL_FlhVMQ-AEsEMP-5QoyzCDME-DD-ADD-ADAjC-ofUVgwSwQ-ABBkmwQTCGcQEGcEEJsEEEA-A
EsH_F3l9Fz7AAhfLAj7AAv4WWFUxEsAPwAQZJsEEwhnEBBnBBCbBBBAPwBLAMjX_jTvtxjI1wTI_
xjIeMRIPwDQ6JMQ0wDrANDrANME6NCTBNBwxDxLABBkmwAQZwgTEGQTBGQQmwAQQEsAPwDQ6JMQ0
wDrANDrANME6NCTBNBwxDxLB-hd5fRf_ILSzwAIXywI_wAL_FlhVMRLAMcAAFckvwA-ADD-_UKMs
wgw-wAw-DD-ADD-ADAjD-ofUVgwPwBLABBkmwQQZwwTAGcAEGcEEJsEEEDESD8H_F3l9Fz4CF80C
PgL_FlhVMQ-AEsA0OiTCNMA6wDQ6xjQkwTQcMRIPwAQZJsEEGcMEwBnABBnBBCbBBBAxDxLABBkm
wQQZwwTAGcAEGcEEJsEEEDESD8H_F3l9Fz4CF80CPgL_FlhVMQ-AEsAMP-5QoyzCDD-ADD8MP8AM
P8AMCMP_h9RWDBLAD8AEGSbBBBnDBMAZwAQZwQQmwQQQMQ8Swf4XeX0XPgIXzQI_Av4WWFUxEsAP
wAQZJsEEGcMEwBnABBnBBCbBBBAxDxLAMjX_jTvtxDLANcMywD7EMh4xEg-ANDokwjTAOsA0OsY0
JME0HDEPEsAEGSbABBkEwxnABMAZBMEZBCbABBAxEg-ANDokwjTAOsA0OsY0JME0HDEPEsH_F3l9
F-4gtLMCF80CPgL_FlhVMRLAMcAAFckvwA8MCP5QoyzDDD-ADD-FDAjEDP4tUyUPEsAEGSbBBBnE
BBnABMImwgQQMRIPwf4XeX0XAhfPAsD_FlhVMQ-AEsA0OiTBNDrANDrINCTBNBwxEg-ABBkmwQQZ
xAQZwATCJsIEEDEPEsAEGSbBBBnEBBnABMImwgQQMRIPwf4XeX0XAhfPAsD_FlhVMQ-AEgz_h9RW
-lCjLMMMP8AMP8UMCMQMHhIPwAQZJsEEGcQEGcAEwibCBBAxDxLB-hd5fRcCF88CwP4WWFUxEsAP
wAQZJsEEGcQEGcAEwibCBBAxDxLAMjX_jTvtwjLANccywD7CMv5HIoYxEg-ANDokwTQ6wDQ6yDQk
wTQcMQ8SwAQZJsAEGQTEGQTAGcIEJsEEEDESD8A0OiTBNDrANDrINCTBNBwxDxLB-hd5fRcCF88C
wP4WWFUxEsAxwAAVyS-ADww-CMMMP8AMP8UMCMQM-i1TJTESwAQ5JsEEGcQEGcAEGcEEJsEEEDES
D8H_F3l9F-4gtLMCF8ECF8UCF8ECPgL_FlhVMQ-AEsA0OiTANDrMNCTBNBwxEg-ABDkmwQQZxAQZ
wAQZwQQmwQQQMQ8SwAQ5JsEEGcQEGcAEGcEEJsEEEDESD8H_F3l9Fz4CF8ECF8UCF8ECPgL_FlhV
MQ-AEgw-CMMMP8AMP8UMCMQMHjEPwAQ5JsEEGcQEGcAEGcEEJsEEEDEPEsH_F3l9Fz4CF8ECF8UC
F8ECPgL_FlhVMRLAD8AEOSbBBBnEBBnABBnBBCbBBBAxDxLAMjX_jTvtwDLANcsywD7AMv5HIoYx
Eg-ANDokwDQ6zDQkwTQcMQ8SwAQ5JsAEGQTEGQTAGQTBGQQmwAQQMRIPwDQ6JMA0Osw0JME0HDEP
EsH_F3l9F-4gtLMCF8ECF8UCF8ECPgL_FlhVMRLAMcAAFckvwA8M-ofUVv5QoyzDDD-IDAjEDP4t
UyUxEsAEGSbBBBnFBMEZwQQmwQQQMRIPwf4XeX0XPsACFwLAF8UCwBcCPsAC-hZYVTEPwBLANP7t
xFQkwDQ6zDQkwTT_Z0kTMRIPwAQZJsEEGcUEwRnBBCbBBBAxDxLABBkmwQQZxQTBGcEEJsEEEDES
D8H_F3l9Fz7AAhcCwBfFAsAXAj7AAv4WWFUxD8ASDP6H1Fb_UKMswww-yAwIxAweMQ-ABBkmwQQZ
xQTBGcEEJsEEEDEPEsH_F3l9Fz7AAhcCwBfFAsAXAj7AAv4WWFUxEsAPwAQZJsEEGcUEwRnBBCbB
BBAxDxLAMjX_jTvtwjLANccywD7CMv5HIoYxEg-ANP7txFQkwDQ6zDQkwTT_Z0kTMQ8SwAQZJsAE
GQTFGcEEwRkEJsAEEDESD8A0-u3EVCTANDrMNCTBNP5nSRMxDxLB-hd5fRf_ILSzwAIXAsAXxQLA
FwI_wAL_FlhVMRLAMcAAFckvwA-A-i1TJQwIwgw-yAwIwwweMcASwAQ5JsEEGccEwibCBBAxEg-B
-hd5fRc_wQI_AhfFAj4CPsEC-hZYVTEPwBLANDokwDQ6zDQkwTQcMRIPwAQ5JsEEGccEwibCBBAx
DxLABDkmwQQZxwTCJsIEEDESD8H_F3l9Fz7BAj4CF8UCPgI_wQL_FlhVMQ-AEsAeDAjCDD-IDAjD
DB4xwA-ABDkmwQQZxwTCJsIEEDEPEsH_F3l9Fz7BAj4CF8UCPgI_wQL_FlhVMRLAD8AEOSbBBBnH
BMImwgQQMQ8SwDI1-o077cQywDXDMsA_xDL_RyKGMRIPwDQ6JMA0Osw0JME0HDEPEsAEOSbABBkE
xxnCBCbBBBAxEg-ANDokwDQ6zDQkwTQcMQ8Swf4XeX0X-iC0s8ECPgIXxQI_Aj7BAv4WWFUxEsAx
wAAVyS-AD8H_LVMlDAjCDD-HDAjCDB4xwA8SwAQ5JsEEGcYEGcEEJsIEEDESD8H_F3l9Fz7DAhfF
Aj7DAv4WWFUxD8ASwDT_7cRUJME0zCTCNP5nSRMxEg-ABDkmwQQZxgQZwQQmwgQQMQ8SwAQ5JsEE
GcYEGcEEJsIEEDESD8H_F3l9Fz7DAhfFAj7DAv4WWFUxD8ASwR4MCMIMP8cMCMIMHjHAEg-ABDkm
wQQZxgQZwQQmwgQQMQ8Swf4XeX0XPsMCF8UCPsMC-hZYVTESwA-ABDkmwQQZxgQZwQQmwgQQMQ8S
wDIT-o077cYyNcEyPsYy-kcihjESD8A0-u3EVCTBNMwkwjT_Z0kTMQ8SwAQ5JsAEGQTGGQTBGQQm
wQQQMRIPwDT_7cRUJME0zCTCNP5nSRMxDxLB-hd5fRf_ILSzwwIXxQI_wwL_FlhVMRLAMcAAFckv
wA-C-i1TJQwIwgw-xQwIwgweMcAPwBLBBDkmwATDGcIEGcEEJsEEEDHAEg-B-hd5fRc_wwIXxQI_
wwL_FlhVMQ-AEsA0-u3EVCTTNP5nSRMxEg-BBDkmwATDGcIEGcEEJsEEEDHADxLBBDkmwATDGcIE
GcEEJsEEEDHAEg-B-hd5fRc_wwIXxQI_wwL_FlhVMQ-AEsIeDAjCDD-FDAjCDB4xwBLAD8EEOSbA
BMMZwgQZwQQmwQQQMcAPEsH_F3l9Fz7DAhfFAj7DAv4WWFUxEsAPwQQ5JsAEwxnCBBnBBCbBBBAx
wA8SwDI1-o077cYyNcEyPsYy-kcihjESD8A0-u3EVCTTNP5nSRMxDxLBBDkmBBnDBMIZBMEZBCbA
BBAxwBIPwDT_7cRUJNM0-mdJEzEPEsH_F3l9F-4gtLPDAhfFAj7DAv4WWFUxEsAxwAAVyS-AD8P_
LVMlDAjBDD-FDAjBDB4xwA-BEsEEOSbFBMYmwgQQMRLAD8H_F3l9-lzY0j7DAhfFAj7DAv4WWFUx
D8ASwRw0JNE0HDHAEg-BBDkmxQTGJsIEEDEPwBLBBDkmxQTGJsIEEDESwA-B-hd5fT8_wwIXxQI_
wwL_FlhVMQ-AEsMeDAjBDP6-8pXFDAjBDB4xwBLBD8EEOSbFBMYmwgQQMQ-AEsH_F3l9-lzY0j7D
AhfFAj7DAv4WWFUxEsAPwQQ5JsUExibCBBAxD8ASwDIT-o077ccyNTI_xzL_RyKGMRIPwRw0JNE0
HDHADxLBBDkmwATDGcYEJsEEEDESwA-BHDQk0TQcMcAPEsH_F3l9P-4gtLPDAhfFAj7DAv4WWFUx
EsAxwAAVyS-AD8T_LVMlDAjADMcIwAweMcAPwhLCEDkmzwQQMcASwA-B-hd5fRc_wwLHPsMC-hZY
VTEPwBLCHDQkzzQcMcASwA-CEDkmzwQQMcAPwBLCEDkmzwQQMcASwA-B-hd5fRc_wwLHPsMC-hZY
VTEPwBLEHgwIwAzHCMAMHjHAEsIPwhA5Js8EEDHAD8ASwf4XeX0XPsMCxz7DAv4WWFUxEsAPwhA5
Js8EEDHAD8ASwDIT-o077ccyNTI_xzL_RyKGMRIPwhw0JM80HDHAD8ASwhA5JsQExibBBBAxwBLA
D8IcNCTPNBwxwA-AEsH_F3l9F-4gtLPDAsc_wwL_FlhVMRLAMcAAFckvwA-F-i1TJQwIyQweMcAP
wxLCEAQmzwQQMRLBD8H_F3l9Pz7RAv4WWFUxD8ASwxw0JM00HDHAEsEPwhAEJs8EEDEPwRLCEAQm
zwQQMRLBD8H_F3l9Pz7RAv4WWFUxD8ASxR4MCMkMHjHAEsMPwhAEJs8EEDEPwRLB-hd5fT8_0QL_
FlhVMRLAD8IQBCbPBBAxD8ESwDL_jTvtMj7HMj7HMsD_RyKGMRIPwxw0JM00HDHAD8ESwhAEJs8E
EDESwQ-DHDQkzTQcMcAPwRLB-hd5fT-_ILSz0QL_FlhVMRLAMcAAFckvwA-G-i1TJQwIxwweMcAP
xBLDEAQmzQQQMcASwQ-B-hd5fT8_0QL_FlhVMQ-AEsQcNCTLNBwxwBLCD8MQBCbNBBAxwA-BEsMQ
BCbNBBAxwBLBD8H_F3l9Pz7RAv4WWFUxD8ASxh4MCMcMHjHAEsQPwxAEJs0EEDHAD8ESwf4XeX0-
PtEC-hZYVTESwA-DEAQmzQQQMcAPwRLB-kcihsAywP6NO_3FMj7FMsAewDHAEg-EHDQkyzQcMcAP
whLDEAQmzQQQMcASwQ-EHDQkyzQcMcAPwhLB-hd5fT-_ILSz0QL_FlhVMRLAMcAAFckvwA-H-i1T
JQwIxQweMcAPxRLEEATAJskEwBAxwBLCD8L_F3l9Pz7PAv4WWFUxwA-AEsUcNCTJNBwxwBLDD8QQ
BMAmyQTAEDHAD8ISxBAEwCbJBMAQMcASwg-C-hd5fT8_zwL_FlhVMcAPwBLHHgwIxQweMcASxQ-E
EATAJskEwBAxwA-CEsL_F3l9Pz7PAv4WWFUxwBLAD8QQBMAmyQTAEDHAD8ISwjH_RyKGwDLA-o07
7ckywB7AMcESwA-FHDQkyTQcMcAPwxLEEATAJskEwBAxwBLCD8UcNCTJNBwxwA-DEsL_F3l9P-4g
tLPPAv4WWFUxwBLAMcAAFckvwA-I-i1TJQwIwwweMcAPxhLFEMAEwCbFBMAQwDHAEsMPwwL_F3l9
z-4WWFUxwA-BEsYcNCTHNBwxwBLED8UQwATAJsUEwBDAMcAPwxLFEMAEwCbFBMAQwDHAEsMPwwL_
F3l9z-4WWFUxwA-BEsgeDAjDDB4xwBLGD8UQwATAJsUEwBDAMcAPwxLDAv4XeX3P-hZYVTHAEsEP
xRDABMAmxQTAEMAxwA-DEsQx-kcihsAywP6NO_3FMsAewDHBEsIPxhw0JMc0HDHAD8QSxRDABMAm
xQTAEMAxwBLDD8YcNCTHNBwxwA-EEsMC-hd5fc-_FlhVMcASwTHAABXJL8APyf4tUyUMCMEMHjHA
D8cSxjEQwATFEMAxwRLED8QCzzHAD8ISxxw0xxwxwBLFD8YxEMAExRDAMcEPxBLGMRDABMUQwDHB
EsQPxALPMcAPwhLJHgwIwQweMcASxw-GMRDABMUQwDHBD8QSxALPMcASwg-GMRDABMUQwDHBD8QS
xjH_RyKGwDLAPsEywB7AMcESxA-HHDTHHDHAD8USxjEQwATFEMAxwRLED8ccNMccMcAPxRLEAs8x
wBLCMcAAFckvwA-K-i1TJQzBHjHAD8gSyDEQxTHBEsYPxTHPD8MSyBzHMcASxg-IMRDFMcEPxhLI
MRDFMcESxg-FMc8PwxLKHgzBHjHAEsgPyDEQxTHBD8YSxTHPEsMPyDEQxTHBD8YSyDH_RyKGwDLB
HsAxwRLGD8gcxzHAD8YSyDEQxTHBEsYPyBzHMcAPxhLFMc8SwzHAABXJL8APy-4tUyXBMcAPyRLK
McUSyA-bEskxxxLHD8oxxQ-IEsoxxRLID9sSyx7BMcASyQ-KMcUPyBLbD8oxxQ-IEsox-kcihsEx
wRLID8kxxw-HEsoxxRLID8kxxw-HEtsxwAAVyS-AD8wxwQ-KEtsP2xLbD9sS2w-bEswxwRLKD9sS
2w-bEswxwRLKD9sS2w-bEtsxwAAVyS-AMf39-f39-f3eABXJLzH9-f39-f393wAVygD9-f39-f39
4BX9-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39
-f39-f39-QAAAAAAAAAB
:: main.lua
--[[pod_format="raw",created="2024-03-30 05:39:34",modified="2025-05-16 20:12:49",revision=8684]]
include "drakma.lua"
include "src/constants.lua"
include "src/sgrid.lua"
include "src/hgrid.lua"
include "src/logic/combat.lua"
include "src/logic/creation.lua"
include "src/logic/matching.lua"
include "src/logic/mechanics.lua"
include "src/gfx.lua"
include "src/in_game.lua"
include "src/in_menu.lua"
--include "debug.lua"


local state = in_game
local next_state = false


function _init()
	window { cursor = "" }
	fetch("pal/0.pal"):poke(0x5000)
	state:enter()
end


function _update()
	if next_state then
		state:exit()
		state = next_state
		state:enter()
	end
	next_state = state:update()
end


function _draw()
	state:draw()
	if key("shift") then
		print(string.format("\014% 3.0f", math.floor(0.5 + stat(1) * 100.0)) .. "%", 460, 90, 7)
	end
end
:: .info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA4LTIzIDE4OjQ1OjEzIixtb2RpZmllZD0iMjAyNS0w
NS0xNiAyMDoxMjo0OSIscnVudGltZT0xOCxzdG9yZWQ9IjIwMjQtMDMtMzAgMDY6NTQ6MjQiLHdv
cmtzcGFjZXM9e3tsb2NhdGlvbj0iZ2Z4LzAuZ2Z4Iix3b3Jrc3BhY2VfaW5kZXg9Mn0se2xvY2F0
aW9uPSJzZngvMC5zZngiLHdvcmtzcGFjZV9pbmRleD00fSx7bG9jYXRpb249Im1haW4ubHVhIix3
b3Jrc3BhY2VfaW5kZXg9N30se2xvY2F0aW9uPSJwYWwvMC5wYWwiLHdvcmtzcGFjZV9pbmRleD04
fX1dXQ==
:: [eoc]
