picotron cartridge // www.picotron.net
version 2

:: gfx/
:: gfx/0.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTAzLTMwIDA1OjM5OjM0Iixtb2RpZmllZD0iMjAyNC0w
OC0yNSAyMDo1MjoxOSIscmV2aXNpb249MTA3NF1dbHo0AO4KAAD8QQAA8xd7WzBdPXtibXA9cHh1
AEMgHR0E8P---zwsZmxhZ3M9MCxwYW5feAgAy3k9MCx6b29tPTZ9LDQA8CQ1bPAEHGob8AAcugnA
DNoJCKAMKh8qqgkIgAwqLqoZCHAMKh4cShw6CQgPNVAMSgwZDCoEAPAMGQhQDDoMOQwKDDkMGhkI
DTAMSgxJDEkMGikICwAQqQkAgQ0gDFoMiQwqCgBVagxpDDoUACwaOQoAEDlNAMBJCA0wC1oMGQwK
DBkaAP8oHTALahwqHBpJCA1Q6kkIHVAZqmkIDXAIGWp5CB2ACOkIHaAYqRgdwA0YaRgt8AANaC3w
BG3wFwQBHvEQbxHwBB5vDx8Q8AAevw8PDsAO3w8PDg8NoA4vDx8qrwwA0YAOLw8vKq8PHw4PDXAY
AEAfDy59GgDwFw81UA59Dh8ODm0cDw1QDo0OHA5dHAsPNTAOnQ4sDk0sCzAOjQ48CQAnCiAKADV9
DkwKAEw8Dk08CgDALA5NTAsKMA8QfQ4cFQAwGjAJWwD-IS1MCwpQnS4dTAsaUBytbAsKcAscbXwL
GoAL7AsaoBusGxrAChtsGyrwAAprKvAEag8BIRAWDwEwFB8VDwHxAxQPE8AO3xQPEw8SoA4vFB8q
rwwA0YAOLxQvKq8UHxMPEnAYABHPGAAADQEw-xQDFwBxUA6PFC5tHxUAAAMBhC8TDl0sDxIw_gCR
DzUgDm0ObA49BQEKCgAkLTwjASI9PDcBMSwOPQ8BMhWNLg0BIP0ACgEf7QgBSRAbCAEwGR8aCAHx
AxkPGMAO3xkPGA8XoA4vGR8qrwwA0YAOLxkvKq8ZHxgPF3AYAEAvGS5tGgACFwKgLxgOXRwPF1AO
bfUAAhcCAwABYjAObR5MHvQAUV0OjA4tCgBVTQ6sDh0KACoNPAoAkV0OLA4MDiwODQwBYxpdPgw_
HRsCEQwhAU9QjS4tEwFJECATATAeHx8TAfEDHg8dwA7fHg8dDxygDi8eHyqvDADwB4AOLx4vKi8e
Dm0fHQ8ccA4tHyo9Dn0aAAATATCdDn0XAAAoAyAPHTMDEhwqA2QMDm0sDxwKAAEdAgD1ARFdCwEG
CgAGEwIKCgARLREBEB9mAREtEQEAQQMfLREBUBAlEQEwIx8kEQHxAyMPIsAO3yMPIg8hoA4vIx8q
rwwA0YAOLyMvKq8jHyIPIXAYABHPGAAADwFAfyM_bRgAACECIC8iEAEQIRABkW0OLA59LA8hMPIB
Eo0QAQALAEQ9Hi0sCQJELQ4MDg4AZDwuHA4dPEsCJB08SQMRHRgBFyQYAS9OLTgDThAqFAEwKB8p
FAHwBSgPNMAO3ygPNA85oA4vKB4dLw9dDQDyA4AOLS4NTw9NHzQPOXAOLR4dTxgAABUBkD0qDU8P
DS8UHR0AwVAOLUoNLw8NTxQNHyAANDAOPREA0i80DzkwDj1aDQ8PDV8PAAApAWRNSi1PFB0OACX9
BBgAc08jLU8ZDT8PAJU9XyMNDx4NXxkRAHNPIw0vHg1PEQBEMA8pLRIAAEMAEB8SAIM9LyMNTx4N
LyQAYVB9Tx4dTx0AcVAfNF1PHm8XAHFwDzkfNE0vDgBhHzWADznvCQD-C6AfOa80HzkfNcAMHzlv
NB85LPAADGss8ARsZwEf8A1PPxJAPuAODxYfKg8VDiAOHyofFg7QDg8qPxUuBQBADg81wB4ApBQf
FS8WHxUfFA8TANUPFQ8UDxNPFQ8TDxQfKAABFQARLxUAEC8VADGQPyw_AFATLxUfEz4A-AYeHytg
Dyw-LS8VXy0-LB8VHywPK1ARAD8PNUATACXzAFBPLC8TTywvKx8TLysfNVsANU8tLyIAH2ATAITv
cD8rLn0eHR81gPwD8C7JAR3yPDkvKxAPD-AGDysgHvAFTyzwBw0-LQ0O8AYNDD0ODzXwAx1sHfAB
DawN4A28HcANLB8qjA0OoA0sK4wdDpANLBucHQ4PNXAN-AAtDgYAKwpgBwAm7D0GAP8a3E0OCnAN
vE0OGnANrF0OCpAdbG0OGqAOzQ4awA6tDhrgHm0eGvABCm79AyPwBU0PLOAOoA4PLQ7ADg0OkA4d
DqAOoABAgA4tDgQA0QyADg0PKx0OYA4dCw0OAFIbHW4dGwsAMyuNKxQAEq0SACr9AQYAkHAOLS5t
Li0OcFQA8QkaDyoLDk0OCgsPGg4dDgxgDh0OCRsJDi0GAAERADMtDikEAIAMYA49Lk0uPQkAIP0D
SQD-Im0vCW0OHEBbXQhdW3AOPQ4dDh0OPQ4cgDstHg0eLTtwGyAOrQ4cABuwHm0eHPABDG6mAyPw
AosPK2AO8AQeQB7wBA4PLE4NDQBATR7QLp8F8CkgLg81QB4tHgAODR8PDRwNDgAeLR4gDm0eDA8q
DgwLDgwebQ4QDn0ODB4MHgwOfQ4PNQAOfQ4NHCsA8Al9DgoADo0OTQ6NDgoAPm0OLQ5tPgoADhrf
APAGGg4KEAoAPs0_ChAKMA4aDi0OTQ4tFgDwBnAKAE5NTgoQCpAOKg5NDioOCtAKIBsA-wIgCvAD
Dg0OGvAJDhrwCwrwcegAGV8QEATw8DEA----v18dHQT-N1EQDx0xNQAfODUAIR87NQAhHzw1AB0O
BQEPMQCf8SYjIARw-zYD4P4F0P4FwP4HsP4HoP4JkP4JgP4LcP4LYP4NUP4NQP4PMP4PIP4REP4R
AP42AAkAESAVABFAIQARYC0AEYA5ABGgRQARwFEAT_D_A3COAB4fN44Aeh84jgB6HzuOAHofPI4A
eh89jgBJD7YDewAKCvASFb80DzHQ3zQvMaDfNE8xgF80XzIPMQ8wDzRfMWBPNH8yCwDwCS8yTzFA
TzSPMg8xTzJPMTA-NP8yAT8xIAgAQQM-MRAIAL8fMR8wEC80-zIFLwgAGXEvMg8x-zIBDAByHzEP
MP8yAgwAMjAPNAwAEB8YAAAMAFA-MBA-MXIAIDAgCADxDgE-MDBPMX8yDzFfMk8wQE8xbzIfMT8y
TzBgXzE-xQD-Bi8yXzCATzHfMKAvMd8w0A8xvzDwFXAGHAMiAVCfNA8yLyYBAA4AHw8qARBCMA80
PywBEZ8NACFPMjEBYb8yDzBfMjQBEa8-ABA-HgATMj0BYA8yDzGPMvsAAL0AAV4AJDIvGQASfxEA
YDQfMg8wLwoAEjEpAQH4AAJ9ABAvdgABFQAQMloAAFYAABcAIA8wEgACLgAjMh9vAEUfNJ8yggFU
LzAfNL8iAABnAEEfNC8wEQAhDzQPABIxxABFDzCvMp8BFF8PAAKiAaFvMg8wTzIPMT8yqQExfzIf
xAAhTzKwAQAgARMvHgARMKwBEjD-AAG7AQBLAVIfMB8xH78BPw8yP78BRFZvNA8xP8MBAO0AAJYA
A8cBYB80DzIfND0CEx8VAAHRAQBlASRfMgYBEz_sAEEwPzQP1QAyLzEvFwARMOMBER8qAEQ-MC80
3gEB7wEAgQEBHQAdMfUBXx8wLzRP9wECAXEAH2-5AQEgHzSGAA37AQGvAQEqAAT-AREfXwAP-wEA
ABgCAs4ACQcCET_iAgMVAAYNAgGYAANXAA8XAgAC0gA0LzFPHQIRTzoAAF4ANj8wHyUCMz8yLxcA
AFcAADQAAS0CYh8yHzFfMG4AAXUBADMCVy8wTzQPFQABOQISHyoBBSgAAz0CLz8wOwIuD34FHg8x
AP---------------------------------------------------x1QbT0xfX0=
:: gfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTAzLTMwIDA1OjM5OjM0Iixtb2RpZmllZD0iMjAyNC0w
OC0yNSAyMDo1MjoxOSIsc3RvcmVkPSIyMDI0LTAzLTMwIDA1OjM5OjM0Il1d
:: map/
:: map/0.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTAzLTMwIDA1OjM5OjM0Iixtb2RpZmllZD0iMjAyNC0w
OC0yNSAyMDo1MjoxOSIscmV2aXNpb249OTkxXV1sejQAwQAAAFkQAADwCHt7Ym1wPXVzZXJkYXRh
KCJpMTYiLDMyAwAvIjABAP-------7HTMjAwMDMwMDA0MDAwNgwALzUwgABbEzEIABM1gAAvNjAB
AFsXNvwAEzEMAA8BAFUEfAEAAAETMAwAD4ABWRMxdAATMHgAFzGMAA8AAVUTNoQABAwALzUwAQD-
------_e8QkiKSxoaWRkZW49ZmFsc2UscGFuX3g9NDcJANJ5PTAsdGlsZV9oPTI5CgAQdwoAgHpv
b209MX19
:: map/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTAzLTMwIDA1OjM5OjM0Iixtb2RpZmllZD0iMjAyNC0w
OC0yNSAyMDo1MjoxOSIsc3RvcmVkPSIyMDI0LTAzLTMwIDA1OjM5OjM0Il1d
:: pal/
:: pal/0.pal
b64$LS1bW3BvZCxiZ19jb2xvcj0wLGJsYWNrZXN0X2NvbG9yPTAsY3JlYXRlZD0iMjAyNC0wOC0y
MyAxODo1OTowOSIsaGlkZGVuPXtbMF09ZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFs
c2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2Us
ZmFsc2UsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0
cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1
ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLGZhbHNl
LGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZh
bHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlfSxoaWRkZW5fdG9nZ2xlcz17WzBdPWZh
bHNlLHRydWUsdHJ1ZSxmYWxzZX0saWNvbj11c2VyZGF0YSgidTgiLDE2LDE2LCIwMDAxMDEwMTAx
MDEwMTAxMDEwMTAxMDAwMDAwMDAwMDAwMDEwNzA3MDcwNzA3MDcwNzA3MDYwMTAwMDAwMDAwMDAw
MTA3MDcwNzA3MDcwNzA3MDcwNjA2MDEwMDAwMDAwMDAxMDcwNzA3MDcwNzA3MDcwNzA2MDYwNjAx
MDAwMDAwMDEwNzA3MDcwNzA3MDcwNzA3MDYwNjA2MDYwMTAwMDAwMTA3MDcwNzA3MDcwNzA3MDcw
NzA3MDcwNzAxMDAwMDAxMDcwNzA3MDcwNzA3MDcwNzA3MDcwNzA3MDEwMDAwMDEwNzA3MDYwNjAx
MDEwZDBkMDEwMTA3MDcwMTAwMDAwMTA3MDcwNjA2MDEwMTBkMGQwMTAxMDcwNzAxMDAwMDAxMDcw
NzAxMDEwNzA3MDYwNjBkMGQwNzA3MDEwMDAwMDEwNzA3MDEwMTA3MDcwNjA2MGQwZDA3MDcwMTAw
MDAwMTA3MDcwZDBkMDEwMTBkMGQwNjA2MDcwNzAxMDAwMDAxMDcwNzBkMGQwMTAxMGQwZDA2MDYw
NzA3MDEwMDAwMDEwNzA3MDcwNzA3MDcwNzA3MDcwNzA3MDcwMTAwMDAwMTA3MDcwNzA3MDcwNzA3
MDcwNzA3MDcwNzAxMDAwMDAxMDEwMTAxMDEwMTAxMDEwMTAxMDEwMTAxMDEwMCIpLGxvY2tlZD17
WzBdPWZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNl
LGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZh
bHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNl
LGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZh
bHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNl
LGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZh
bHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlfSxtb2RpZmllZD0i
MjAyNC0wOC0yNSAyMDo1MjoxOSIsb2twYWxfdmVyc2lvbj0iMS4wLjMiLHJldmlzaW9uPTg5OCx0
ZXN0X2N1YmVfY29sb3JzPXtbMF09ezE1LDMxLDR9LHszMSw0LDIwfSx7NCwyMCwyMX0sezEwLDks
MjV9LHs5LDI1LDI0fSx7OCwyNCwyfSx7MjYsMTEsMjd9LHsxMSwyNywzfSx7MjcsMywxOX0sezI4
LDE3LDE5fSx7MjgsMTIsMTZ9LHsxMiwxNiwxfSx7NiwyOSwxM30sezI5LDEzLDE4fSx7MTMsMTgs
MX0sezcsMjMsMTR9LHsyMywxNCwxM30sezE0LDMwLDE4fSx7Nyw2LDIyfSx7NiwyMiw1fSx7MjIs
NSwyMX0sezEsMSwxfSx7MSwxLDF9LHsxLDEsMX19LHdoaXRlc3RfY29sb3I9N11dbHo0AO4BAAAV
AgAA-QV1c2VyZGF0YSgiaTMyIiw2NCwiMAEA8Ro0YzQ1MzMwMDczNGI0NjAwODM1NTRmMDBlN2Ex
M2QwMGVlYzU3MTAwZgEA8DAwMDc0MWY2NTAwYTgyNTkyMDBlMjQ5YmEwMGVmODNjNTAwZjhiYmQ5
MDA3NzJjMTYwMGEyMzIxOTAwZDU0ZjJIAPAsMzgyNTcwMGZjYmM5YzAwNjc0OTEzMDA5YzcxMWEw
MGQ2YTIyNTAwZWRjNDU0MDBmYmUxOTkwMDJkNTMYAPAWMzE2ZTMyMDA1MGEzMmMwMDg3ZDQ1NjAw
YmZmMjk1MDAxNjU4NQgA8A03Nzk3ZDAwMjBiNGIzMDA1Y2Q4ZDIwMGFjZjZm_ACwNzIyODYwMDVl
MjYgANA4ZDNiZWQwMGFlODFmsABAOGM0ZqAAEGUCAEAwMGI3AgBAMDBlMwIAQDAwZjQCAADIAAAC
AEAwMDFkAgBAMDAyZQIAQDAwNDYCAEAwMDliAgBAMDBjMQIAYDAwNTc1NRgAYTc4NzE1YSAAMDA3
NFAB8Ak5ZTg1MDBiZWI1YTQwMDU4NTk1ZDAwNjgCAFEwMDZmNrkAETcBAHEwMDg2ODM4yABAMzQz
NTAAsDQyNDIwMDYwNDg0MAAQOaEA8AMwMDg4NmQ2ZDAwMzIyMjNjIik=
:: pal/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA4LTIzIDE4OjU0OjE5Iixtb2RpZmllZD0iMjAyNC0w
OC0yNSAyMDo1MjoxOSJdXQ==
:: sfx/
:: sfx/0.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTAzLTMwIDA1OjM5OjM1Iixtb2RpZmllZD0iMjAyNC0w
OC0yNSAyMDo1MjoxOSIscmV2aXNpb249OTg4XV1sejQAGgEAAFIIAADwJ3B4dQADKAAABAAED0AQ
Ag4AAaABIAKgDgAPEAAN8MoBAgMEBQYHAA--kAgJCgsPDA8NDw4PDxAA8AANDxEPEg8TDxQPFQ8W
DxcTAPEBDxgPGQ8aDxsPHA8dDx4PHxQA8QAgDyEPIg8jDyQPJQ8mDycUAPEAKA8pDyoPKw8sDy0P
Lg8vFADxADAPMQ8yDzMPNA81DzYPNxQA-wU4DzkPOg87DzwPPQ8_Dz8AD--w-wEA6-8nWgEQBg8g
EAEgASAB8AACEAIMEAEgDyEgATAPQPDDDygP--DGD-gKD-8PgA-3Dw0B8AkBEAYMMAACH0QwABwf
QDAA8h--AQDcv-gPQAANQP--sPBwCgD--2Qf-wEA-5lQ-----yA=
:: sfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTAzLTMwIDA1OjM5OjM0Iixtb2RpZmllZD0iMjAyNC0w
OC0yNSAyMDo1MjoxOSIsc3RvcmVkPSIyMDI0LTAzLTMwIDA1OjM5OjM0Il1d
:: src/
:: src/constants.lua
--[[pod_format="raw",created="2024-08-24 15:17:10",modified="2024-08-25 20:52:19",revision=837]]
--- Match3 Global Constants


-- Color gems
gem_air = 0x01
gem_fire = 0x02
gem_day = 0x03
gem_earth = 0x04
gem_water = 0x05
gem_night = 0x06
gem_rainbow = 0x07

gem_color_first = gem_air
gem_color_last = gem_rainbow

-- Black gems
gem_gift = 0x08
gem_bomb = 0x09
gem_cat = 0x0a
gem_bat = 0x0b

-- Cells
cell_good = 0x01
cell_bad = 0x02

cell_mask = 0x0f

-- Rocks
rock_full = 0x10
rock_cracked = 0x20
rock_broken = 0x30

rock_mask = 0xf0

:: src/gfx.lua
--[[pod_format="raw",created="2024-08-24 12:06:13",modified="2024-08-25 20:52:19",revision=999]]
--- Graphics


local cell_width = 29
local cell_height = 29



function gfx_draw_cells(cells)
	local function draw_cell(p, cell)
		local x, y = cells:coords_cell(p)
		local sprite
		if cells.is_square then
			if cell & cell_mask == cell_good then
				sprite = 32
			elseif cell & cell_mask == cell_bad then
				sprite = 34
			end
			sprite += (p.x + p.y) % 2
		elseif cells.is_hex then
			if cell & cell_mask == cell_good then
				sprite = 40
			elseif cell & cell_mask == cell_bad then
				sprite = 43
			end
			sprite += (p.y + (p.x * 3)) % 3
		end
		spr(sprite, x, y)
		x, y = cells:coords_gem(p)
		if cell and cell & cell_mask == cell_bad then
			pal(53, 58)
		end
		if cell & rock_mask == rock_full then
			spr(48, x, y)
		elseif cell & rock_mask == rock_cracked then
			spr(49, x, y)
		elseif cell & rock_mask == rock_broken then
			spr(50, x, y)
		end	
		pal(53, 53)
	end
	cells:foreachpos(draw_cell)
end


function gfx_draw_gems(cells, gems)
	local function draw_gem(p, gem)
		local x, y = gems:coords_gem(p)
		local sprite = 0 + gem
		local cell = cells:get(p)
		if cell and cell & cell_mask == cell_bad then
			pal(53, 58)
		end
		spr(sprite, x, y)
		pal(53, 53)	
	end
	gems:foreachpos(draw_gem)
end

:: src/hgrid.lua
--[[pod_format="raw",created="2024-08-25 08:16:09",modified="2024-08-25 20:52:19",revision=810]]
--- Hex Grids

--- Hex grids use the "double height" coordinate system:
---
---     (0,0)         (2,0)         (4,0)
---            (1,1)         (3,1)
---     (0,2)         (2,2)         (4,2)
---            (1,3)         (3,3)
---     (0,4)         (2,4)         (4,4)
---
--- The origin of the grid, `pos(0, 0)`, is at the top left.


-- Local Constants --------------------------------------------------------


local max_width <const> = 13
local max_height <const> = 8


-- Constructors -----------------------------------------------------------


local metatable = {}


function hgrid_new()
	local grid = { is_hex = true }
	setmetatable(grid, { __index = metatable })
	return grid
end


function metatable:new_grid()
	return hgrid_new()
end


function hgrid_new_cells(size)
	local grid = hgrid_new()
	local p = pos(0, 0)
	while p.x < size.x do
		while p.y < size.y * 2 do
			local cell = cell_good
			if rnd() < 0.33 then
				cell = cell_bad
			end
			if rnd() < 0.03 then
				if rnd() < 0.60 then
					cell |= rock_full
				elseif rnd() < 0.75 then
					cell |= rock_cracked
				else
					cell |= rock_broken
				end
			end
			grid:set(p, cell)
			p.y += 2
		end
		p.x += 1
		p.y = p.x % 2
	end
	grid:set(pos(size.x // 2, size.y - 2), nil)
	grid:set(pos(size.x // 2, size.y), nil)
	return grid
end


-- Indexing ------------------------------------------------------------


function metatable:get(p)
	if p.x < 0 or p.y < 0 or p.x >= max_width or p.y >= 2 * max_height then
		return nil
	end
	return self[p.x + ((p.y // 2) * max_width)]
end


function metatable:set(p, value)
	if p.x < 0 or p.y < 0 or p.x >= max_width or p.y >= 2 * max_height then
		return nil
	end
	self[p.x + ((p.y // 2) * max_width)] = value
end


function metatable:flag(p, flag)
	if p.x < 0 or p.y < 0 or p.x >= max_width or p.y >= 2 * max_height then
		return nil
	end
	local index = p.x + ((p.y // 2) * max_width)
	if self[index] then
		self[index] |= flag
	else
		self[index] = flag
	end
end


function metatable:del(p)
	if p.x < 0 or p.y < 0 or p.x >= max_width or p.y >= 2 * max_height then
		return nil
	end
	self[p.x + ((p.y // 2) * max_width)] = nil
end


-- Screen Coordinates ---------------------------------------------------------


function metatable:coords_origin()
	return 119, 7
end


function metatable:coords_cell(p)
	local ox, oy = self:coords_origin()
	return ox + p.x * 27, oy + p.y * 16
end


function metatable:coords_gem(p)
	local ox, oy = self:coords_origin()
	return ox + (p.x * 27) + 3, oy + (p.y * 16) + 1
end


function metatable:pos(x, y)
	local ox, oy = self:coords_origin()
	x -= ox
	y -= oy + 1
	local px, py = x // 27, y // 16
	local dx, dy = x - (px * 27), y - (py * 16)
	if dx < 8 then
		if (px + py) % 2 == 0 and dy < 14 + (-2 * dx) then
			px -= 1
			py -= 1
		elseif (px + py) % 2 != 0 and dy > -1 + (2 * dx) then
			px -= 1
		end
	end
	py = (2 * ((py - (px % 2)) // 2)) + (px % 2)
	return pos(px, py)
end


-- Iterating ----------------------------------------------------------


function metatable:foreachpos(func)
local s = ""
	local p = pos(0, 0)
	while p.x < max_width do
		while p.y < max_height * 2 - 1 do
			local item = self:get(p)
			if item then
				func(p, item)
			end
			p.y += 2
		end
		p.x += 1
		p.y = p.x % 2
	end
end	

:: src/logic.lua
--[[pod_format="raw",created="2024-08-24 08:12:55",modified="2024-08-25 20:52:19",revision=1103]]
--- Match-3 Logic

local function random_gem()
	if rnd() < 0.05 then
		return gem_rainbow + flr(rnd(5))
	end
	return gem_color_first + flr(rnd(gem_color_last - gem_color_first))
end


function logic_fill_gems(cells, gems)
	local function fill_gem(p, cell)
		if cell & cell_mask == 0 or cell & rock_mask != 0 then
			return
		end
		local gem = gems:get(p)
		if not gem then
			gem = random_gem()
		end
		gems:set(p, gem)
	end

	cells:foreachpos(fill_gem)
end


-- Matching -------------------------------------------------------------------


local function logic_is_matching(gem1, gem2)
	if (not gem1) or (not gem2) then
		return false
	end
	
	-- Only colored gems can match.
	if (gem1 < gem_color_first) or (gem1 > gem_color_last) then
		return false
	end
	if (gem2 < gem_color_first) or (gem2 > gem_color_last) then
		return false
	end

	return (gem1 == gem2) or (gem1 == gem_rainbow)
		or (gem2 == gem_rainbow)
end


local function check_3_and_flag(gems, p0, p1, p2, flag, match_grid)
	local gem0 = gems:get(p0)
	local gem1 = gems:get(p1)
	local gem2 = gems:get(p2)
	if logic_is_matching(gem0, gem1)
		and logic_is_matching(gem0, gem2)
		and logic_is_matching(gem1, gem2)
	then
		match_grid:flag(p0, flag)
		match_grid:flag(p1, flag)
		match_grid:flag(p2, flag)
	end
end


local function check_4_and_flag(gems, p0, p1, p2, p3, flag, match_grid)
	local gem0 = gems:get(p0)
	local gem1 = gems:get(p1)
	local gem2 = gems:get(p2)
	local gem3 = gems:get(p3)
	if logic_is_matching(gem0, gem1)
		and logic_is_matching(gem0, gem2)
		and logic_is_matching(gem0, gem3)
		and logic_is_matching(gem1, gem2)
		and logic_is_matching(gem1, gem3)
		and logic_is_matching(gem2, gem3)
	then
		match_grid:flag(p0, flag)
		match_grid:flag(p1, flag)
		match_grid:flag(p2, flag)
		match_grid:flag(p3, flag)
	end
end


local function logic_square_mark_matches_at(gems, p0, match_grid)
	-- Check for vertical match
	check_3_and_flag(gems, p0, p0 + pos(0, 1), p0 + pos(0, 2), 0x01, match_grid)
	-- Check for horizontal match
	check_3_and_flag(gems, p0, p0 + pos(1, 0), p0 + pos(2, 0), 0x02, match_grid)
	-- Check for square match
	check_4_and_flag(gems, p0, p0 + pos(1, 0), p0 + pos(0, 1), p0 + pos(1, 1), 0x10, match_grid)
end


local function logic_hex_mark_matches_at(gems, p0, match_grid)
	-- Check for vertical match
	check_3_and_flag(gems, p0, p0 + pos(0, 2), p0 + pos(0, 4), 0x01, match_grid)
	-- Check for SE match
	check_3_and_flag(gems, p0, p0 + pos(1, 1), p0 + pos(2, 2), 0x02, match_grid)
	-- Check for NE match
	check_3_and_flag(gems, p0, p0 + pos(1, -1), p0 + pos(2, -2), 0x04, match_grid)
	-- Check for square match
	check_4_and_flag(gems, p0, p0 + pos(1, 1), p0 + pos(1, -1), p0 + pos(2, 0), 0x10, match_grid)
end


function logic_mark_matches(gems)
	local match_grid = gems:new_grid()
	if gems.is_square then
		gems:foreachpos(
			function(p, _gem)
				logic_square_mark_matches_at(gems, p, match_grid)
			end
		)
	elseif gems.is_hex then
		gems:foreachpos(
			function(p, _gem)
				logic_hex_mark_matches_at(gems, p, match_grid)
			end
		)
	end
	return match_grid
end
:: src/sgrid.lua
--[[pod_format="raw",created="2024-08-24 07:17:45",modified="2024-08-25 20:52:19",revision=1181]]
--- Square Grids

--- The origin of the grid, `pos(0, 0)`, is at the top left.


-- Local Constants --------------------------------------------------------


local max_width <const> = 12
local max_height <const> = 9


-- Constructors -----------------------------------------------------------


local metatable = {}


function metatable:new_grid()
	return sgrid_new()
end


function sgrid_new()
	local grid = { is_square = true }
	setmetatable(grid, { __index = metatable })
	return grid
end


function sgrid_new_cells(size)
	local grid = sgrid_new()
	local p = pos(0, 0)
	while p.x < size.x do
		while p.y < size.y do
			local cell = cell_good
			if rnd() < 0.33 then
				cell = cell_bad
			end
			if rnd() < 0.03 then
				if rnd() < 0.60 then
					cell |= rock_full
				elseif rnd() < 0.75 then
					cell |= rock_cracked
				else
					cell |= rock_broken
				end
			end
			grid:set(p, cell)
			p.y += 1
		end
		p.y = 0
		p.x += 1
	end
	grid:set(pos(size.x // 2 - 1, size.y // 2), nil)
	grid:set(pos(size.x // 2, size.y // 2), nil)
	return grid
end


-- Indexing --------------------------------------------------------------------


function metatable:get(p)
	if p.x < 0 or p.y < 0 or p.x >= max_width or p.y >= max_height then
		return nil
	end
	return self[p.x + (p.y * max_width)]
end


function metatable:set(p, value)
	if p.x < 0 or p.y < 0 or p.x >= max_width or p.y >= max_height then
		return nil
	end
	self[p.x + (p.y * max_width)] = value
end


function metatable:flag(p, flag)
	if p.x < 0 or p.y < 0 or p.x >= max_width or p.y >= max_height then
		return nil
	end
	local index = p.x + (p.y * max_width)
	if self[index] then
		self[index] |= flag
	else
		self[index] = flag
	end
end


function metatable:del(pos)
	if p.x < 0 or p.y < 0 or p.x >= max_width or p.y >= max_height then
		return nil
	end
	self[p.x + (p.y * max_width)] = nil
end


-- Screen Coordinates ---------------------------------------------------------


function metatable:coords_origin()
	return 124, 4
end


function metatable:coords_cell(p)
	local ox, oy = self:coords_origin()
	return ox + p.x * 29, oy + p.y * 29
end


function metatable:coords_gem(p)
	local ox, oy = self:coords_origin()
	return ox + p.x * 29, oy + p.y * 29
end


function metatable:pos(x, y)
	local ox, oy = self:coords_origin()
	return pos((x - ox) // 29, (y - oy) // 29)
end


-- Iterating -------------------------------------------------------


function metatable:foreachpos(func)
local s = ""
	local p = pos(0, 0)
	while p.x < max_width do
		while p.y < max_height do
			local item = self:get(p)
			if item then
				func(p, item)
			end
			p.y += 1
		end
		p.y = 0
		p.x += 1
	end
end	

:: src/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA4LTI0IDA3OjE3OjA5Iixtb2RpZmllZD0iMjAyNC0w
OC0yNSAyMDo1MjoxOSJdXQ==
:: debug.lua
--[[pod_format="raw",created="2024-08-24 12:45:09",modified="2024-08-25 08:41:10",revision=71]]
-- Detect uninitialized globals and typos
-- from @snowkittykira from the BBS


-- if you're using include(), include this after including everything else,
-- since most included modules will need to assign global variables on load

-- these globals are needed by picotron
_init = _init or false
_draw = _draw or false
_update = _update or false
-- these are used by the picotron terminal
cproj_draw = cproj_draw or false
cproj_update = cproj_update or false
_ = _ or false
_is_terminal_command = _is_terminal_command or false
k = k or false
res = res or false
-- gui needs these
drag_t = drag_t or false

local function unknown_variable (t, k)
  error (debug.traceback ('unknown variable ' .. tostring (k), 2))
end

setmetatable (_G, {
  __index = unknown_variable,
  __newindex = unknown_variable,
})
:: drakma.lua
--[[pod_format="raw",created="2024-04-07 07:42:45",modified="2024-08-24 12:51:02",revision=1288]]
_modules = {}

-- A 'require' function similar to standard Lua.
-- Idea from elgopher on the BBS
function require(name)
	local cached = _modules[name]
	if (cached) return cached

	local filename = fullpath(name .. '.lua')
	local src = fetch(filename) 

	if (type(src) != "string") panic("could not include " .. filename)

	-- https://www.lua.org/manual/5.4/manual.html#pdf-load
	-- chunk name (for error reporting)
	-- mode ("t" for text only -- no binary chunk loading)
	-- _ENV upvalue
	-- @ is a special character that tells debugger the string is a filename
	local func, err = load(src, "@" .. filename, "t", _ENV)
	if (not func) panic("Syntax error:", tostr(err))

	local module = func()
	_modules[name] = module

	return module
end


function panic(...)
	local args = { ... }
	foreach(
		args,
		function(str)
			send_message(3, { event = "report_error", content = str })
		end
	)
	stop()
end


-- Table utility functions --------------------------------------------------------


function table_deep_copy(t, already)
	if (not already) already = {}
	if type(t) == "table" then
		if already and already[t] then
			return already[t]
		end
		local new = {}
		already[t] = new
		for k, v in pairs(t) do
			new[k] = table_deep_copy(v, already)
		end
		return new
	else
		return t
	end
end


function tostrrec(t)
	if type(t) != "table" then
		return tostr(t)
	end
	
	local s = nil
	for k, v in pairs(t) do
		if not(s) then
			s = "{ "
		else
			s ..= ", "
		end
		s ..= tostr(k) .. " = " .. tostrrec(v)
	end
	s ..= " }"

	return s
end


-- Pos --------------------------------------------------------------------------


function pos(x, y)
	local p = userdata("i16", 2)
	p.x = x
	p.y = y
	return p
end


-- Drawing -------------------------------------------------------------------------


-- From Sophie on the discord
function get_drawspace()
    return {
        cam_x=peek4(0x5510),
        cam_y=peek4(0x5514),
        clip_l=peek2(0x5528),
        clip_t=peek2(0x552a),
        clip_r=peek2(0x552c),
        clip_b=peek2(0x552e),
    }
end


function set_drawspace(drawspace)
    poke4(0x5510,drawspace.cam_x)
    poke4(0x5514,drawspace.cam_y)
    poke2(0x5528,drawspace.clip_l)
    poke2(0x552a,drawspace.clip_t)
    poke2(0x552c,drawspace.clip_r)
    poke2(0x552e,drawspace.clip_b)
end

:: main.lua
--[[pod_format="raw",created="2024-03-30 05:39:34",modified="2024-08-25 20:52:19",revision=1279]]
include "drakma.lua"
include "src/constants.lua"
include "src/sgrid.lua"
include "src/hgrid.lua"
include "src/gfx.lua"
include "src/logic.lua"
include "debug.lua"


local cells = nil
local gems = nil
local match_grid = nil


function _init()
	cells = sgrid_new_cells(pos(12, 9))
	gems = cells:new_grid()
	logic_fill_gems(cells, gems)
	match_grid = nil
	window { cursor = "" }
end


function _update()
	if keyp("s") then
		cells = sgrid_new_cells(pos(12, 9))
		gems = cells:new_grid()
		logic_fill_gems(cells, gems)
		match_grid = nil
	end
	if keyp("h") then
		cells = hgrid_new_cells(pos(13, 8))
		gems = cells:new_grid()
		logic_fill_gems(cells, gems)
		match_grid = nil
	end
	if keyp("del") then
		local mx, my = mouse()
		local p = cells:pos(mx, my)
		gems:set(p, nil)
		match_grid = nil
	end
	if keyp("m") then
		match_grid = logic_mark_matches(gems)
	end
end


function _draw()
	fetch("pal/0.pal"):poke(0x5000)
	cls(63)
	rectfill(0, 0, 116, 269, 55)
	--
	gfx_draw_cells(cells)
	gfx_draw_gems(cells, gems)
	if match_grid then
		match_grid:foreachpos(
			function(p, flag)
				if flag and flag != 0 then
					local x, y = match_grid:coords_gem(p)
					line(x + 4, y + 29 - 5, x + 29 - 5, y + 4, 7)
					line(x + 4, y + 29 - 4, x + 29 - 4, y + 4, 7)
					line(x + 5, y + 29 - 4, x + 29 - 4, y + 5, 7)
				end
			end
		)
	end
	--
	local mx, my = mouse()
	local cursor_pos = cells:pos(mx, my)
	if gems:get(cursor_pos) then
		window { cursor = "grab" }
		local matching = match_grid and match_grid:get(cursor_pos) or nil
		if matching and matching != 0 then
			rectfill(mx - 10, my - 16, mx + 12, my - 8, 7)
			print(string.format("%02x", matching), mx - 4, my - 15, 0)
		end
	else
		window { cursor = "" }
	end
	if false then
		rectfill(mx + 4 - 10, my + 10, mx + 36, my + 20, 7)
		print(tostr(cursor_pos.x)..","..tostr(cursor_pos.y), mx + 6 - 10, my + 12, 0)
	end
end
:: .info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA4LTIzIDE4OjQ1OjEzIixtb2RpZmllZD0iMjAyNC0w
OC0yNSAyMDo1MjoxOSIscnVudGltZT0xMCxzdG9yZWQ9IjIwMjQtMDMtMzAgMDY6NTQ6MjQiLHdv
cmtzcGFjZXM9e3tsb2NhdGlvbj0ibWFpbi5sdWEjNTEiLHdvcmtzcGFjZV9pbmRleD0xfSx7bG9j
YXRpb249InNyYy9sb2dpYy5sdWEjMTUiLHdvcmtzcGFjZV9pbmRleD0xfSx7bG9jYXRpb249InNy
Yy9nZngubHVhIzMwIix3b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJzcmMvc2dyaWQubHVh
IzM3Iix3b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJzcmMvaGdyaWQubHVhIzQ4Iix3b3Jr
c3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJzcmMvY29uc3RhbnRzLmx1YSMzNCIsd29ya3NwYWNl
X2luZGV4PTF9LHtsb2NhdGlvbj0iZ2Z4LzAuZ2Z4Iix3b3Jrc3BhY2VfaW5kZXg9Mn0se2xvY2F0
aW9uPSJtYXAvMC5tYXAiLHdvcmtzcGFjZV9pbmRleD0zfSx7bG9jYXRpb249InNmeC8wLnNmeCIs
d29ya3NwYWNlX2luZGV4PTR9LHtsb2NhdGlvbj0icGFsLzAucGFsIix3b3Jrc3BhY2VfaW5kZXg9
N319XV0=
:: [eoc]
