picotron cartridge // www.picotron.net
version 2

:: gfx/
:: gfx/0.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTAzLTMwIDA1OjM5OjM0Iixtb2RpZmllZD0iMjAyNC0w
OC0yNSAxNDo0NTozNiIscmV2aXNpb249ODc1XV1sejQAlwQAAFQ3AADzF3tbMF09e2JtcD1weHUA
QyAdHQTw----PCxmbGFncz0wLHBhbl94CADLeT0wLHpvb209NH0sNADwJDVs8AQcahvwABy6CcAM
2gkIoAwqHyqqCQiADCouqhkIcAwqHhxKHDoJCA81UAxKDBkMKgQA8AwZCFAMOgw5DAoMOQwaGQgN
MAxKDEkMSQwaKQgLABCpCQCBDSAMWgyJDCoKAFVqDGkMOhQALBo5CgAQOU0AwEkIDTALWgwZDAoM
GRoA-ygdMAtqHCocGkkIDVDqSQgdUBmqaQgNcAgZankIHYAI6QgdoBipGB3ADRhpGC3wAA1oLfAE
bfAXBAEe8RBvEfAEHm8PHxDwAB6-Dw8OwA7fDw8ODw2gDi8PHyqvDADRgA4vDy8qrw8fDg8NcBgA
QB8PLn0aAPAXDzVQDn0OHw4ObRwPDVAOjQ4cDl0cCw81MA6dDiwOTSwLMA6NDjwJACcKIAoANX0O
TAoATDwOTTwKAMAsDk1MCwowDxB9DhwVADAaMAlbAP8hLUwLClCdLh1MCxpQHK1sCwpwCxxtfAsa
gAvsCxqgG6wbGsAKG2wbKvAACmsq8ARqDwEhEBYPATAUHxUPAfEDFA8TwA7fFA8TDxKgDi8UHyqv
DADRgA4vFC8qrxQfEw8ScBgAEc8YAAANATD-FAMXAHFQDo8ULm0fFQAAAwGELxMOXSwPEjD6AJEP
NSAObQ5sDj0FAQoKACQtPCMBIj08NwExLA49DwEyFY0uDQEg-QAKAR-tCAFJEBsIATAZHxoIAfED
GQ8YwA7fGQ8YDxegDi8ZHyqvDADRgA4vGS8qrxkfGA8XcBgAQC8ZLm0aAAIXAqAvGA5dHA8XUA5t
9QACFwIDAAFiMA5tHkwe9ABRXQ6MDi0KAFVNDqwOHQoAKg08CgCRXQ4sDgwOLA4NDAFjGl0_DD4d
GwIRDCEBT1CNLi0TAUkQIBMBMB4fHxMB8QMeDx3ADt8eDx0PHKAOLx4fKq8MAPAHgA4vHi8qLx4O
bR8dDxxwDi0fKj0OfRoAABMBMJ0OfRcAACgDIA8dMwMSHCoDZAwObSwPHAoAAR0CAPUBEV0LAQYK
AAYTAgoKABEtEQEQH2YBES0RAQBBAx8tEQFQECURATAjHyQRAfEDIw8iwA7fIw8iDyGgDi8jHyqv
DADRgA4vIy8qryMfIg8hcBgAEc8YAAAPAUB-Iz5tGAAAIQIgLyIQARAhEAGRbQ4sDn0sDyEw8gES
jRABAAsARD0eLSwJAkQtDgwODgBkPC4cDh08SwIkHTxJAxEdGAEXJBgBL04tOANIXxAQBPDwMQAL
HzExAP----_WXh0dBP83UQsPNQAPHjg1AA-MABAPMQD-D-EmIyAEcP82A_D_BdD_BcD_B7D_B6D_
CZD_CYD_C3D_C2D_DVD_DUD_DzD_DyD_ERD_EQD_NgAJABEgFQARQCEAEWAtABGAOQARoEUAEcBR
AE-g-gNw5wYZAY4AHzeOAHofOI4AdQ8MAhEPMQD-------------------------------------
----------------plBtPTF9fQ==
:: gfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTAzLTMwIDA1OjM5OjM0Iixtb2RpZmllZD0iMjAyNC0w
OC0yNSAxNDo0NTozNyIsc3RvcmVkPSIyMDI0LTAzLTMwIDA1OjM5OjM0Il1d
:: map/
:: map/0.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTAzLTMwIDA1OjM5OjM0Iixtb2RpZmllZD0iMjAyNC0w
OC0yNSAxNDo0NTozNiIscmV2aXNpb249ODMxXV1sejQAwQAAAFkQAADwCHt7Ym1wPXVzZXJkYXRh
KCJpMTYiLDMyAwAvIjABAP-------7HTMjAwMDMwMDA0MDAwNgwALzUwgABbEzEIABM1gAAvNjAB
AFsXNvwAEzEMAA8BAFUEfAEAAAETMAwAD4ABWRMxdAATMHgAFzGMAA8AAVUTNoQABAwALzUwAQD-
------_e8QkiKSxoaWRkZW49ZmFsc2UscGFuX3g9NDcJANJ5PTAsdGlsZV9oPTI5CgAQdwoAgHpv
b209MX19
:: map/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTAzLTMwIDA1OjM5OjM0Iixtb2RpZmllZD0iMjAyNC0w
OC0yNSAxNDo0NTozNyIsc3RvcmVkPSIyMDI0LTAzLTMwIDA1OjM5OjM0Il1d
:: pal/
:: pal/0.pal
b64$LS1bW3BvZCxiZ19jb2xvcj0wLGJsYWNrZXN0X2NvbG9yPTAsY3JlYXRlZD0iMjAyNC0wOC0y
MyAxODo1OTowOSIsaGlkZGVuPXtbMF09dHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1
ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUs
dHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRy
dWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVl
LHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0
cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1
ZX0saGlkZGVuX3RvZ2dsZXM9e1swXT10cnVlLHRydWUsdHJ1ZSx0cnVlfSxpY29uPXVzZXJkYXRh
KCJ1OCIsMTYsMTYsIjAwMDEwMTAxMDEwMTAxMDEwMTAxMDEwMDAwMDAwMDAwMDAwMTA3MDcwNzA3
MDcwNzA3MDcwNjAxMDAwMDAwMDAwMDAxMDcwNzA3MDcwNzA3MDcwNzA2MDYwMTAwMDAwMDAwMDEw
NzA3MDcwNzA3MDcwNzA3MDYwNjA2MDEwMDAwMDAwMTA3MDcwNzA3MDcwNzA3MDcwNjA2MDYwNjAx
MDAwMDAxMDcwNzA3MDcwNzA3MDcwNzA3MDcwNzA3MDEwMDAwMDEwNzA3MDcwNzA3MDcwNzA3MDcw
NzA3MDcwMTAwMDAwMTA3MDcwNjA2MDEwMTBkMGQwMTAxMDcwNzAxMDAwMDAxMDcwNzA2MDYwMTAx
MGQwZDAxMDEwNzA3MDEwMDAwMDEwNzA3MDEwMTA3MDcwNjA2MGQwZDA3MDcwMTAwMDAwMTA3MDcw
MTAxMDcwNzA2MDYwZDBkMDcwNzAxMDAwMDAxMDcwNzBkMGQwMTAxMGQwZDA2MDYwNzA3MDEwMDAw
MDEwNzA3MGQwZDAxMDEwZDBkMDYwNjA3MDcwMTAwMDAwMTA3MDcwNzA3MDcwNzA3MDcwNzA3MDcw
NzAxMDAwMDAxMDcwNzA3MDcwNzA3MDcwNzA3MDcwNzA3MDEwMDAwMDEwMTAxMDEwMTAxMDEwMTAx
MDEwMTAxMDEwMTAwIiksbG9ja2VkPXtbMF09ZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2Us
ZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFs
c2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2Us
ZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFs
c2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2Us
ZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFs
c2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2Us
ZmFsc2UsZmFsc2V9LG1vZGlmaWVkPSIyMDI0LTA4LTI1IDE0OjQ1OjM2Iixva3BhbF92ZXJzaW9u
PSIxLjAuMyIscmV2aXNpb249NzE0LHRlc3RfY3ViZV9jb2xvcnM9e1swXT17MTUsMzEsNH0sezMx
LDQsMjB9LHs0LDIwLDIxfSx7MTAsOSwyNX0sezksMjUsMjR9LHs4LDI0LDJ9LHsyNiwxMSwyN30s
ezExLDI3LDN9LHsyNywzLDE5fSx7MjgsMTcsMTl9LHsyOCwxMiwxNn0sezEyLDE2LDF9LHs2LDI5
LDEzfSx7MjksMTMsMTh9LHsxMywxOCwxfSx7NywyMywxNH0sezIzLDE0LDEzfSx7MTQsMzAsMTh9
LHs3LDYsMjJ9LHs2LDIyLDV9LHsyMiw1LDIxfSx7MSwxLDF9LHsxLDEsMX0sezEsMSwxfX0sd2hp
dGVzdF9jb2xvcj03XV1sejQA9QEAABUCAAD1BXVzZXJkYXRhKCJpMzIiLDY0LCIwAQDxIjQ4MzM1
NTAwNGM0NTMzMDA3MzRiNDYwMDgzNTU0ZjAwZTdhMTNkMDBlZWM1NzEwMGYBAPAwMDA3NDFmNjUw
MGE4MjU5MjAwZTI0OWJhMDBlZjgzYzUwMGY4YmJkOTAwNzcyYzE2MDBhMjMyMTkwMGQ1NGYySADw
LDM4MjU3MDBmY2JjOWMwMDY3NDkxMzAwOWM3MTFhMDBkNmEyMjUwMGVkYzQ1NDAwZmJlMTk5MDAy
ZDUzGADwFTMxNmUzMjAwNTBhMzJjMDA4N2Q0NTYwMGJmZjI5NTAwMTY1ONgA8A4xNzc5N2QwMDIw
YjRiMzAwNWNkOGQyMDBhY2Y2ZgABsDcyMjg2MDA1ZTI2IADQOGQzYmVkMDBhZTgxZrAAQDhjNGag
ABBlAgBAMDBiNwIAQDAwZTMCAEAwMGY0AgAAyAAAAgBAMDAxZAIAQDAwMmUCAEAwMDQ2AgBAMDA5
YgIAQDAwYzECAHAwMDZkNmE2aAHQMjdkN2EwMDk0OTA4YygBIDllKABQYjliNWLgAJA4NTk1ZDAw
NjgCAFEwMDZmNrkAETcBAHEwMDg2ODM4yABAMzQzNTAAsDQyNDIwMDYwNDg0MAAQOaEA8AMwMDg4
NmQ2ZDAwMDAwMDAwIik=
:: pal/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA4LTIzIDE4OjU0OjE5Iixtb2RpZmllZD0iMjAyNC0w
OC0yNSAxNDo0NTozNyJdXQ==
:: sfx/
:: sfx/0.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTAzLTMwIDA1OjM5OjM1Iixtb2RpZmllZD0iMjAyNC0w
OC0yNSAxNDo0NTozNiIscmV2aXNpb249ODI4XV1sejQAGgEAAFIIAADwJ3B4dQADKAAABAAED0AQ
Ag4AAaABIAKgDgAPEAAN8MoBAgMEBQYHAA--kAgJCgsPDA8NDw4PDxAA8AANDxEPEg8TDxQPFQ8W
DxcTAPEBDxgPGQ8aDxsPHA8dDx4PHxQA8QAgDyEPIg8jDyQPJQ8mDycUAPEAKA8pDyoPKw8sDy0P
Lg8vFADxADAPMQ8yDzMPNA81DzYPNxQA-wU4DzkPOg87DzwPPQ8_Dz8AD--w-wEA6-8nWgEQBg8g
EAEgASAB8AACEAIMEAEgDyEgATAPQPDDDygP--DGD-gKD-8PgA-3Dw0B8AkBEAYMMAACH0QwABwf
QDAA8h--AQDcv-gPQAANQP--sPBwCgD--2Qf-wEA-5lQ-----yA=
:: sfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTAzLTMwIDA1OjM5OjM0Iixtb2RpZmllZD0iMjAyNC0w
OC0yNSAxNDo0NTozNyIsc3RvcmVkPSIyMDI0LTAzLTMwIDA1OjM5OjM0Il1d
:: src/
:: src/constants.lua
--[[pod_format="raw",created="2024-08-24 15:17:10",modified="2024-08-25 14:45:36",revision=674]]
--- Match3 Global Constants


-- Color gems
gem_air = 0x01
gem_fire = 0x02
gem_day = 0x03
gem_earth = 0x04
gem_water = 0x05
gem_night = 0x06
gem_rainbow = 0x07

-- Black gems
gem_bomb = 0x08
gem_cat = 0x09
gem_gift = 0x0a

-- Masks
gem_color_first = gem_air
gem_color_last = gem_rainbow
gem_mask = 0x0f

-- Rocks
rock_full = 0x10
rock_cracked = 0x20
rock_broken = 0x30

rock_mask = 0xf0

-- Cells
cell_good = 0x01
cell_bad = 0x02

:: src/gfx.lua
--[[pod_format="raw",created="2024-08-24 12:06:13",modified="2024-08-25 14:45:36",revision=819]]
--- Graphics


local cell_width = 29
local cell_height = 29



function gfx_draw_cells(cells)
	local function draw_cell(p, cell)
		local x, y = cells:coords_cell(p)
		local sprite
		if cells.is_square then
			sprite = 32 + ((p.x + p.y) % 2)
		elseif cells.is_hex then
			sprite = 40 + ((p.y + (p.x * 3)) % 3)
		end
		spr(sprite, x, y)	
	end
	cells:foreachpos(draw_cell)
end


function gfx_draw_gems(cells, gems)
	local function draw_gem(p, gem)
		local x, y = gems:coords_gem(p)
		local sprite = 0 + gem
		spr(sprite, x, y)	
	end
	gems:foreachpos(draw_gem)
end

:: src/hgrid.lua
--[[pod_format="raw",created="2024-08-25 08:16:09",modified="2024-08-25 14:45:36",revision=635]]
--- Hex Grids

--- Hex grids use the "double height" coordinate system:
---
---     (0,0)         (2,0)         (4,0)
---            (1,1)         (3,1)
---     (0,2)         (2,2)         (4,2)
---            (1,3)         (3,3)
---     (0,4)         (2,4)         (4,4)
---
--- The origin of the grid, `pos(0, 0)`, is at the top left.


-- Local Constants --------------------------------------------------------


local max_width <const> = 13
local max_height <const> = 8


-- Constructors -----------------------------------------------------------


local metatable = {}


function hgrid_new()
	local grid = { is_hex = true }
	setmetatable(grid, { __index = metatable })
	return grid
end


function metatable:new_grid()
	return hgrid_new()
end


function hgrid_new_cells(size)
	local grid = hgrid_new()
	local p = pos(0, 0)
	while p.x < size.x do
		while p.y < size.y * 2 do
			grid:set(p, 33)
			p.y += 2
		end
		p.x += 1
		p.y = p.x % 2
	end
	grid:set(pos(size.x // 2, size.y - 2), nil)
	grid:set(pos(size.x // 2, size.y), nil)
	return grid
end


-- Indexing ------------------------------------------------------------


function metatable:get(p)
	if p.x < 0 or p.y < 0 or p.x >= max_width or p.y >= 2 * max_height then
		return nil
	end
	return self[p.x + ((p.y // 2) * max_width)]
end


function metatable:set(p, value)
	if p.x < 0 or p.y < 0 or p.x >= max_width or p.y >= 2 * max_height then
		return nil
	end
	self[p.x + ((p.y // 2) * max_width)] = value
end


function metatable:flag(p, flag)
	if p.x < 0 or p.y < 0 or p.x >= max_width or p.y >= 2 * max_height then
		return nil
	end
	local index = p.x + ((p.y // 2) * max_width)
	if self[index] then
		self[index] |= flag
	else
		self[index] = flag
	end
end


function metatable:del(p)
	if p.x < 0 or p.y < 0 or p.x >= max_width or p.y >= 2 * max_height then
		return nil
	end
	self[p.x + ((p.y // 2) * max_width)] = nil
end


-- Screen Coordinates ---------------------------------------------------------


function metatable:coords_origin()
	return 119, 7
end


function metatable:coords_cell(p)
	local ox, oy = self:coords_origin()
	return ox + p.x * 27, oy + p.y * 16
end


function metatable:coords_gem(p)
	local ox, oy = self:coords_origin()
	return ox + (p.x * 27) + 3, oy + (p.y * 16) + 1
end


function metatable:pos(x, y)
	local ox, oy = self:coords_origin()
	x -= ox
	y -= oy + 1
	local px, py = x // 27, y // 16
	local dx, dy = x - (px * 27), y - (py * 16)
	if dx < 8 then
		if (px + py) % 2 == 0 and dy < 14 + (-2 * dx) then
			px -= 1
			py -= 1
		elseif (px + py) % 2 != 0 and dy > -1 + (2 * dx) then
			px -= 1
		end
	end
	py = (2 * ((py - (px % 2)) // 2)) + (px % 2)
	return pos(px, py)
end


-- Iterating ----------------------------------------------------------


function metatable:foreachpos(func)
local s = ""
	local p = pos(0, 0)
	while p.x < max_width do
		while p.y < max_height * 2 - 1 do
			local item = self:get(p)
			if item then
				func(p, item)
			end
			p.y += 2
		end
		p.x += 1
		p.y = p.x % 2
	end
end	

:: src/logic.lua
--[[pod_format="raw",created="2024-08-24 08:12:55",modified="2024-08-25 14:45:36",revision=911]]
--- Match-3 Logic

local function random_gem()
	return gem_color_first + flr(rnd(gem_color_last - gem_color_first))
end


function logic_fill_gems(cells, gems)
	local function fill_gem(p, _cell)
		local gem = gems:get(p)
		if not gem then
			gem = random_gem()
		end
		gems:set(p, gem)
	end

	cells:foreachpos(fill_gem)
end


-- Matching -------------------------------------------------------------------


local function logic_is_match(gem1, gem2)
	if (not gem1) or (not gem2) then
		return false
	end

	-- Gems encased in rock behave like regular gems
	-- when matching.
	gem1 &= gem_mask
	gem2 &= gem_mask
	
	-- Only colored gems can match.
	if (gem1 < gem_color_first) or (gem1 > gem_color_last) then
		return false
	end
	if (gem2 < gem_color_first) or (gem2 > gem_color_last) then
		return false
	end

	return (gem1 == gem2) or (gem1 == gem_rainbow)
		or (gem2 == gem_rainbow)
end


local function check_3_and_flag(gems, p0, p1, p2, flag, match_grid)
	local gem0 = gems:get(p0)
	local gem1 = gems:get(p1)
	local gem2 = gems:get(p2)
	if logic_is_match(gem0, gem1) and logic_is_match(gem0, gem2) then
		match_grid:flag(p0, flag)
		match_grid:flag(p1, flag)
		match_grid:flag(p2, flag)
	end
end


local function check_4_and_flag(gems, p0, p1, p2, p3, flag, match_grid)
	local gem0 = gems:get(p0)
	local gem1 = gems:get(p1)
	local gem2 = gems:get(p2)
	local gem3 = gems:get(p3)
	if logic_is_match(gem0, gem1)
		and logic_is_match(gem0, gem2)
		and logic_is_match(gem0, gem3)
	then
		match_grid:flag(p0, flag)
		match_grid:flag(p1, flag)
		match_grid:flag(p2, flag)
		match_grid:flag(p3, flag)
	end
end


local function logic_square_mark_matches_at(gems, p0, match_grid)
	-- Check for vertical match
	check_3_and_flag(gems, p0, p0 + pos(0, 1), p0 + pos(0, 2), 0x01, match_grid)
	-- Check for horizontal match
	check_3_and_flag(gems, p0, p0 + pos(1, 0), p0 + pos(2, 0), 0x02, match_grid)
	-- Check for square match
	check_4_and_flag(gems, p0, p0 + pos(1, 0), p0 + pos(0, 1), p0 + pos(1, 1), 0x10, match_grid)
end


local function logic_hex_mark_matches_at(gems, p0, match_grid)
	-- Check for vertical match
	check_3_and_flag(gems, p0, p0 + pos(0, 2), p0 + pos(0, 4), 0x01, match_grid)
	-- Check for SE match
	check_3_and_flag(gems, p0, p0 + pos(1, 1), p0 + pos(2, 2), 0x02, match_grid)
	-- Check for NE match
	check_3_and_flag(gems, p0, p0 + pos(1, -1), p0 + pos(2, -2), 0x04, match_grid)
	-- Check for square match
	check_4_and_flag(gems, p0, p0 + pos(1, 1), p0 + pos(1, -1), p0 + pos(2, 0), 0x10, match_grid)
end


function logic_mark_matches(gems)
	local match_grid = gems:new_grid()
	if gems.is_square then
		gems:foreachpos(
			function(p, _gem)
				logic_square_mark_matches_at(gems, p, match_grid)
			end
		)
	elseif gems.is_hex then
		gems:foreachpos(
			function(p, _gem)
				logic_hex_mark_matches_at(gems, p, match_grid)
			end
		)
	end
	return match_grid
end
:: src/sgrid.lua
--[[pod_format="raw",created="2024-08-24 07:17:45",modified="2024-08-25 14:45:36",revision=985]]
--- Square Grids

--- The origin of the grid, `pos(0, 0)`, is at the top left.


-- Local Constants --------------------------------------------------------


local max_width <const> = 12
local max_height <const> = 9


-- Constructors -----------------------------------------------------------


local metatable = {}


function metatable:new_grid()
	return sgrid_new()
end


function sgrid_new()
	local grid = { is_square = true }
	setmetatable(grid, { __index = metatable })
	return grid
end


function sgrid_new_cells(size)
	local grid = sgrid_new()
	local p = pos(0, 0)
	while p.x < size.x do
		while p.y < size.y do
			grid:set(p, 33)
			p.y += 1
		end
		p.y = 0
		p.x += 1
	end
	grid:set(pos(size.x // 2 - 1, size.y // 2), nil)
	grid:set(pos(size.x // 2, size.y // 2), nil)
	return grid
end


-- Indexing --------------------------------------------------------------------


function metatable:get(p)
	if p.x < 0 or p.y < 0 or p.x >= max_width or p.y >= max_height then
		return nil
	end
	return self[p.x + (p.y * max_width)]
end


function metatable:set(p, value)
	if p.x < 0 or p.y < 0 or p.x >= max_width or p.y >= max_height then
		return nil
	end
	self[p.x + (p.y * max_width)] = value
end


function metatable:flag(p, flag)
	if p.x < 0 or p.y < 0 or p.x >= max_width or p.y >= max_height then
		return nil
	end
	local index = p.x + (p.y * max_width)
	if self[index] then
		self[index] |= flag
	else
		self[index] = flag
	end
end


function metatable:del(pos)
	if p.x < 0 or p.y < 0 or p.x >= max_width or p.y >= max_height then
		return nil
	end
	self[p.x + (p.y * max_width)] = nil
end


-- Screen Coordinates ---------------------------------------------------------


function metatable:coords_origin()
	return 124, 4
end


function metatable:coords_cell(p)
	local ox, oy = self:coords_origin()
	return ox + p.x * 29, oy + p.y * 29
end


function metatable:coords_gem(p)
	local ox, oy = self:coords_origin()
	return ox + p.x * 29, oy + p.y * 29
end


function metatable:pos(x, y)
	local ox, oy = self:coords_origin()
	return pos((x - ox) // 29, (y - oy) // 29)
end


-- Iterating -------------------------------------------------------


function metatable:foreachpos(func)
local s = ""
	local p = pos(0, 0)
	while p.x < max_width do
		while p.y < max_height do
			local item = self:get(p)
			if item then
				func(p, item)
			end
			p.y += 1
		end
		p.y = 0
		p.x += 1
	end
end	

:: src/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA4LTI0IDA3OjE3OjA5Iixtb2RpZmllZD0iMjAyNC0w
OC0yNSAxNDo0NTozNyJdXQ==
:: debug.lua
--[[pod_format="raw",created="2024-08-24 12:45:09",modified="2024-08-25 08:41:10",revision=71]]
-- Detect uninitialized globals and typos
-- from @snowkittykira from the BBS


-- if you're using include(), include this after including everything else,
-- since most included modules will need to assign global variables on load

-- these globals are needed by picotron
_init = _init or false
_draw = _draw or false
_update = _update or false
-- these are used by the picotron terminal
cproj_draw = cproj_draw or false
cproj_update = cproj_update or false
_ = _ or false
_is_terminal_command = _is_terminal_command or false
k = k or false
res = res or false
-- gui needs these
drag_t = drag_t or false

local function unknown_variable (t, k)
  error (debug.traceback ('unknown variable ' .. tostring (k), 2))
end

setmetatable (_G, {
  __index = unknown_variable,
  __newindex = unknown_variable,
})
:: drakma.lua
--[[pod_format="raw",created="2024-04-07 07:42:45",modified="2024-08-24 12:51:02",revision=1288]]
_modules = {}

-- A 'require' function similar to standard Lua.
-- Idea from elgopher on the BBS
function require(name)
	local cached = _modules[name]
	if (cached) return cached

	local filename = fullpath(name .. '.lua')
	local src = fetch(filename) 

	if (type(src) != "string") panic("could not include " .. filename)

	-- https://www.lua.org/manual/5.4/manual.html#pdf-load
	-- chunk name (for error reporting)
	-- mode ("t" for text only -- no binary chunk loading)
	-- _ENV upvalue
	-- @ is a special character that tells debugger the string is a filename
	local func, err = load(src, "@" .. filename, "t", _ENV)
	if (not func) panic("Syntax error:", tostr(err))

	local module = func()
	_modules[name] = module

	return module
end


function panic(...)
	local args = { ... }
	foreach(
		args,
		function(str)
			send_message(3, { event = "report_error", content = str })
		end
	)
	stop()
end


-- Table utility functions --------------------------------------------------------


function table_deep_copy(t, already)
	if (not already) already = {}
	if type(t) == "table" then
		if already and already[t] then
			return already[t]
		end
		local new = {}
		already[t] = new
		for k, v in pairs(t) do
			new[k] = table_deep_copy(v, already)
		end
		return new
	else
		return t
	end
end


function tostrrec(t)
	if type(t) != "table" then
		return tostr(t)
	end
	
	local s = nil
	for k, v in pairs(t) do
		if not(s) then
			s = "{ "
		else
			s ..= ", "
		end
		s ..= tostr(k) .. " = " .. tostrrec(v)
	end
	s ..= " }"

	return s
end


-- Pos --------------------------------------------------------------------------


function pos(x, y)
	local p = userdata("i16", 2)
	p.x = x
	p.y = y
	return p
end


-- Drawing -------------------------------------------------------------------------


-- From Sophie on the discord
function get_drawspace()
    return {
        cam_x=peek4(0x5510),
        cam_y=peek4(0x5514),
        clip_l=peek2(0x5528),
        clip_t=peek2(0x552a),
        clip_r=peek2(0x552c),
        clip_b=peek2(0x552e),
    }
end


function set_drawspace(drawspace)
    poke4(0x5510,drawspace.cam_x)
    poke4(0x5514,drawspace.cam_y)
    poke2(0x5528,drawspace.clip_l)
    poke2(0x552a,drawspace.clip_t)
    poke2(0x552c,drawspace.clip_r)
    poke2(0x552e,drawspace.clip_b)
end

:: main.lua
--[[pod_format="raw",created="2024-03-30 05:39:34",modified="2024-08-25 14:45:36",revision=1089]]
include "drakma.lua"
include "src/constants.lua"
include "src/sgrid.lua"
include "src/hgrid.lua"
include "src/gfx.lua"
include "src/logic.lua"
include "debug.lua"


local cells = nil
local gems = nil
local match_grid = nil


function _init()
	cells = sgrid_new_cells(pos(12, 9))
	gems = cells:new_grid()
	logic_fill_gems(cells, gems)
	match_grid = logic_mark_matches(gems)
	window { cursor = "" }
end


function _update()
	if keyp("s") then
		cells = sgrid_new_cells(pos(12, 9))
		gems = cells:new_grid()
		logic_fill_gems(cells, gems)
		match_grid = logic_mark_matches(gems)
	end
	if keyp("h") then
		cells = hgrid_new_cells(pos(13, 8))
		gems = cells:new_grid()
		logic_fill_gems(cells, gems)
		match_grid = logic_mark_matches(gems)
	end
	if keyp("del") then
		local mx, my = mouse()
		local p = cells:pos(mx, my)
		gems:set(p, nil)
	end
end


function _draw()
	fetch("pal/0.pal"):poke(0x5000)
	cls(1)
	rectfill(0, 0, 116, 269, 50)
	--
	gfx_draw_cells(cells)
	gfx_draw_gems(cells, gems)
	--
	local mx, my = mouse()
	local cursor_pos = cells:pos(mx, my)
	local matching = match_grid:get(cursor_pos)
	if gems:get(cursor_pos) then
		window { cursor = "grab" }
		if matching and matching != 0 then
			rectfill(mx - 10, my - 16, mx + 12, my - 8, 7)
			print(string.format("%02x", matching), mx - 4, my - 15, 0)
		end
	else
		window { cursor = "" }
	end
	if false then
		rectfill(mx + 4 - 10, my + 10, mx + 36, my + 20, 7)
		print(tostr(cursor_pos.x)..","..tostr(cursor_pos.y), mx + 6 - 10, my + 12, 0)
	end
end
:: .info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA4LTIzIDE4OjQ1OjEzIixtb2RpZmllZD0iMjAyNC0w
OC0yNSAxNDo0NTozNyIscnVudGltZT0xMCxzdG9yZWQ9IjIwMjQtMDMtMzAgMDY6NTQ6MjQiLHdv
cmtzcGFjZXM9e3tsb2NhdGlvbj0ibWFpbi5sdWEjNjUiLHdvcmtzcGFjZV9pbmRleD0xfSx7bG9j
YXRpb249InNyYy9sb2dpYy5sdWEjOTIiLHdvcmtzcGFjZV9pbmRleD0xfSx7bG9jYXRpb249InNy
Yy9nZngubHVhIzI4Iix3b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJzcmMvc2dyaWQubHVh
IzcwIix3b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJzcmMvaGdyaWQubHVhIzc2Iix3b3Jr
c3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJzcmMvY29uc3RhbnRzLmx1YSMzMyIsd29ya3NwYWNl
X2luZGV4PTF9LHtsb2NhdGlvbj0iZ2Z4LzAuZ2Z4Iix3b3Jrc3BhY2VfaW5kZXg9Mn0se2xvY2F0
aW9uPSJtYXAvMC5tYXAiLHdvcmtzcGFjZV9pbmRleD0zfSx7bG9jYXRpb249InNmeC8wLnNmeCIs
d29ya3NwYWNlX2luZGV4PTR9LHtsb2NhdGlvbj0icGFsLzAucGFsIix3b3Jrc3BhY2VfaW5kZXg9
N319XV0=
:: [eoc]
