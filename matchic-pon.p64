picotron cartridge // www.picotron.net
version 2

:: docs/
:: docs/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA4LTI2IDE0OjAzOjI1Iixtb2RpZmllZD0iMjAyNC0w
OS0xOCAxMDoyMToyMyJdXQ==
:: gfx/
:: gfx/0.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTAzLTMwIDA1OjM5OjM0Iixtb2RpZmllZD0iMjAyNC0w
OS0xOCAxMDoyMToyMyIscmV2aXNpb249NjQ5OV1dbHo0AO9UAAAmAAEA8xR7WzBdPXtibXA9cHh1
AEMgEBAE8PAsZmxhZ3M9MCxwYW5feAgAz3k9MCx6b29tPTZ9LDEA-1DwER0dBPBPPxJAPuAODxYf
Kg8VDiAOHyofFg7QDg8qPxUuBQBADg81wB4ApBQfFS8WHxUfFA8TANUPFQ8UDxNPFQ8TDxQfKAAB
FQARLxUAEC8VADGQPyw_AFATLxUfEz4A-AYeHytgDyw-LS8VXy0-LB8VHywPK1ARAD8PNUATACXz
AFBPLC8TTywvKx8TLysfNVsANU8tLyIAH2ATAITvcD8rLn0eHR81gPwD8C7JAR3yPDkvKxAPD-AG
DysgHvAFTyzwBw0-LQ0O8AYNDD0ODzXwAx1sHfABDawN4A28HcANLB8qjA0OoA0sK4wdDpANLBuc
HQ4PNXAN-AAtDgYAKwpgBwAm7D0GAP8g3E0OCnANvE0OGnANrF0OCpAdbG0OGqAOzQ4awA6tDhrg
Hm0eGvABCm4q8ARq8BfNAB3wBU0PLOAOoA4PLQ7ADg0OkA4dDqAOoABAgA4tDgQA0QyADg0PKx0O
YA4dCw0OAFIbHW4dGwsAMyuNKxQAEq0SACr9AQYAkHAOLS5tLi0OcFQA8QkaDyoLDk0OCgsPGg4d
DgxgDh0OCRsJDi0GAAERADMtDikEAIAMYA49Lk0uPQkAIP0DSQD-Jm0vCW0OHEBbXQhdW3AOPQ4d
Dh0OPQ4cgDstHg0eLTtwGyAOrQ4cABuwHm0eHPABDG4s8ARsEAEf8AKLDytgDvAEHkAe8AQODyxO
DQ0A8DFNHtAuIA5tDiAuDzVAHi0eAA4NHw8NHA0OAB4tHiAObR4MDyoODAsODB5tDhAOfQ4MHgwe
DA59Dg81AA59Dg0cKwDwCX0OCgAOjQ5NDo0OCgA_bQ4tDm0_CgAOGt8A8AYaDgoQCgA_zT4KEAow
DhoOLQ5NDi0WAPAGcAoATk1OChAKkA4qDk0OKg4K0AogGwD-AiAK8AMODQ4a8AkOGvALCvBx6AAd
IBoPCgNwLPAKDysPFhQDIvAJEgAgDzUUABEfBgBBDzXwCwYA8AQE7yvADu8tDqAODf8sAA6QDg38
BgDwDhw_TD4cDg81YC4MDg8NHw8PDQ4sDgsfDwsODC5A0wHwBQ4KHxAKDiwOChkKDgwOHQ4wDg0M
FgAWGRUAAEAAsSAOHA4MDgsaCw4sBgAAFgAQCBUAAmEA8AIcDggwLvwBLhhACA78AQ4oYAYAYAiA
DjyOPAcAUiwOjQ4sCQBVDQ5MDgwNABB8CgAwkA4cCgCvHA4YoO4YwOjwMCoBKR8SKgEWULAODd8s
lgUFMgEXDC0BVTwOLA48JQEDDgAFIAEwXixeAgESCxcBYA8cHx0PHDABIh8dMQEYCxsBEQsbATAb
QAsVARErGwESCxsBFAsbARgLGwEVCxsBFQsbAW8boO4bwOsbAR-wGS8fK6AusA4fLR5wDi0ekA4f
LB0eQA48HR5gDkwdHhAOHA8NDw8PDRwWAPIEbB0eLA8PDxAPDzwdDiAOnB0eDB4AoVwOIA4sHmwd
HnwwA-ECHB4LDiwePB0eXA4LAC4rDgwQAKMMHR48DgsQKxAeEgByHS4MDgtwGxAA8QUMDi0eC8Ab
EB4bDjwNDgvwAhsADhwB4PABHhAOTA4LsB4gDg0e-wAhG2ALAHIADkwuGxAuCwCSDB0eLB47IA4d
DABAXB4rYAgA-xiMHiuADrweK7AOjB4r0A5sHivwAQ48HivwAw4cHivwBh4r8Akb8CI1AR3xCBYf
K2Ae8AAeDy0ODzVQDg8tHrAeHQ8sDQDwEA0fLB5wHh0cDh81YA48HkAOHTwOC3AOXA4wDkwOG4DL
ANAwDjw_QD48DhswDkwdDwBQHUwOC1AfABBABQAjUA4PACELcO4AAAUAYXAOLD4gPvEB8AMsHQ4L
EA4dLA4bkA48DhsgDjwWAAG3AxAwKwAQgIECEBxMABAcKgKADSwODD4APgxEABMNsAFxDhwdDgsO
HSAAEhzSAQEzAABzASQbgPQBABMAIAsQBQBgoA5cDhwuZQJADlwODNwFoA4LwA5cDg08DhsIAAGp
ATDgDky0ADDgDlyGAI-wAJ4b8AKbsFsBHdAyLyugHqAeLy0OcB4dBABAPywOQE8BALcFFB2OAqIO
EB4dTA4wDh08vgBBLB4dbIUEE1y7ALAeHZwOIA58Hh1sHpcB8QQQDlweHTweLA4LHhwOEA48Hh0M
DQDFDA4LAAsuCwAODC4dEACVHgsgKwAeLQ4MDwAhG2DrAAAKABGw7QDxCiAb8AEOTA4QHvADDiwO
DB4NDiAe4C5MDgAKAHKgGx4sHh0MDgBSLnALHlwOAHAdDguACx6MDQCwG6ALHrwOC9ALHowsAeAL
HmwOC-ADCx48DhvwBaUAvwvwCAseG-AKG-ARQwEd8gYanyvwAg4vLQ5dDvAADg0-LA5MDvBOAyBc
DqYBMVwO0DACMAwOXDMIIAwuGQAQsDcCIC81sAQEZQEQoBMAAD0BABQAAWgBEBwGBTAsDgAFAAQm
AHCQDg0_DzU_BAUAIwVBDjsAG2wAYKAODRwOQAUAEAwMAAGfAiANLGgAUjwOIA4NtgJgHD4LED4s
OQBQHA47IBvFAhBwHAABcQEBCgAkC1AGABBcTgCxXA5QDg0sPgswPjxRAGA8DjtAGw4MAkANTA6A
BQBBCzAePEYAcCweG0ALHixMAEEcHitw3gH-A1AODR4rsAseC1AeK-AAG2AbcG4JfTH9Aw4FAAFd
CRDNXQZ0YA4tTi1OLUgJBU4JEilNCR8JTQlGDyQNEB8yMQD--0iPGxsE-zf--8s0AAsdNTQAHzg0
AByfHR0E-zsN-zwNBgA_D4YAHQc7AA8GADgPhgAMD6UBHQ0RBU8POw88BAAhFx8MAA84AP------
-wcvDzuJBh0HOwAPBAAZFx8MAA84AP-------wcvDzyJBhxxjzwPPQ87rwYAEU8GADL-PAAHABAB
BwARzxQAF38gABEfBgAXjwwAF_8GAAIwACRfPDQAES8GABUPNAATL2QAFgRXABcfKQAEgwAQBwcA
F98TABGfBgARPwYAGL8lABdvJQAmXzxWADb-PBINACw-PCsAHR8YADb-PAgNABOfEwAWAiwAF38_
AAN8AAVdACc7TyMAEx8jABYWEwAXf7gACBIAF886AQIkARnfQwAWE5IACKsAD_QBGfEgHxwEYP82
AcD_A7D_A6D_BZD_BYD_B3D_B2D_CVD_CUD_CzD_CyD_DRD_DQD_LgAJABEgFQARQCEAEWAtABGA
OQARoEUAT8D_AWCpDxkBggAfN4IAbh84ggBp8zgjIARw-zsD4P88BdD-OwXA-zwHsP87B6D-PAmQ
-zsJgP88C3D-Owtg-zwNUP87DUD-PA8w-zsPIP88ERD-OxEA-zwT-zsTAA8AEyAfABNALwATYD8A
E4BPABOgXwATwG8AX_D-PANwXBEeDzEAewBCAQQZAxOfJQMg4G4IADC_0C4HABCOBQDxN07A-gYP
PbANDzv_AA0MLqD_CZBODQw_DQyODQwOgP4LcC4NDP4GYJ4NDF4NDC4NDD5QDP4LDUD_DzA_DQzu
DQx_IA4NDM4vAPIAPhCeDQz_Ag0MDgAM-gQNBAAQAzYAEABFAEIMEP4AWgBRIAxuDQxvALEw-g9A
-g1Qvg0Mfl4AEWBuABBwHABRjoD_CZBAAJEeDaBeDQzusA4mACGewDoAv9BeDQzO4K4NDE4NqQEM
HDHCBfAT8BW-NA8x0N80LzGg3zRPMYBfNF8yDzEPMA80XzFgTzR-MgsA8AkvMk8xQE80jzIPMU8y
TzEwPzT-MgE-MSAIAEEDPzEQCAC-HzEfMBAvNP8yBS8IABlxLzIPMf8yAQwAch8xDzD-MgIMADIw
DzQMABAfGAAADABQPzAQPzFyACAwIAgA8Q4BPzAwTzF-Mg8xXzJPMEBPMW8yHzE-Mk8wYF8xP8UA
-wYvMl8wgE8x3zCgLzHfMNAPMb8w8BXkBhwDIgFQnzQPMi8mAQAOAB8PKgEQQjAPND8sARGfDQAh
TzIxAWG-Mg8wXzI0ARGvPwAQPx4AEzI9AWAPMg8xjzL7AAC9AAFeACQyLxkAEn8RAGA0HzIPMC8K
ABIxKQEB_AACfQAQL3YAARUAEDJaAABWAAAXACAPMBIAAi4AIzIfbwBFHzSfMoIBVC8wHzS-IgAA
ZwBBHzQvMBEAIQ80DwASMcQARQ8wrzKfARRfDwACogGhbzIPME8yDzE-MqkBMX8yH8QAIU8ysAEA
IAETLx4AETCsARIw-wABuwEASwFSHzAfMR_-AT8PMj_-ATYAIgEQcKIAYKBPNC8xQMUB4IBfNC8x
MC80TzFgbzQvlwEAcQAhUE-rABAP6gFwMRAfND8yP78BAEsBAUUBVDEPMAAfyAECywASHxIAAE8B
MCAvNLoBQQAPNB-kAEEgLzR-KwEgMR-yAACBAAA0AACHAZIwHzFPMEAPND-FAfBSMi8wQE5gPzEv
Mj7wAy8xXkA-NIAdAB8xTjBdHFAdDzIMEC5AXUwwDBsOkD0bXCAMHhAtHCA9SzxgLRscEC1rHB5A
LSssAB1bDBsuQC07HAAdSwwrLjAtGwwbLAANDCsMDg4A-x4LDA0rDA4ALDsMCz4wHRwNOx4APCtO
UDwrLgAsjmAcXiAMjoBuMH6wLoAu8BNkAR3xBTZPNPADLgAOTzMPMgAuwA4vMw8yDQBwDi8zDrAO
PQUC8AcPMU2gDD0PMgxDDAs9DHAeDQwNG4Mb0gTwBkAeLRwzBRQFBBMcDh0bMA49CyMUBQIAogML
PQswDi0LIwUQALUEAy0LDDAMKwwTBBIAVCscQCwjDwBjFAMsUC4TDAB3BRQDLkAOLQ8AYw4tMA4d
CxEAEB8SAEMtCzAtEQDCCg8qGhQDHRswCx0MEgCCOgMEAysMQCwOAEcFGhMEXwAvBBNfAAIIEAAa
PQ8AJy0LfgALfQAAAgAAfAATK3sAAAIAAXwAj-8wASxw-zUEHB8f8BGELzT1AS5ADg8qDg8y9QEu
DTAuDfQBLg0gLg31Ay4NEBkAgA30Aw4MDg0QBQAxZE5kDABwLg1UXg1ULgkA8AB_Kw4Njg0QrgsM
DwwPCgkMAPAPnQ4LDwwfCgmtIC1TDgsqCQ1TLTAeDVQeKQ4NVB4NCwATXgkAMWRNZAgAJvQDBwAi
-ggEAHEO-QhA-zAH2QAfS9kAYSUvENoAVBEPDw8O2wBSER8PDw7cABAvFwAD3gAfKt4AnBUV3gAQ
FngrBN4AUxYfFA8T3gAAFwAP3gCkIxod3QBUGw8ZDxjdAFMbHxkPGN0AABcABN0AEx3cAC8eTdwA
kRQf3ABUIA8eDx3cAFMgHx4PHdwAABcAD9wAoxQk3ABUJQ8jDyLcAFMlHyMPItwAABcAD9wAXgvg
CVZvNA8xP_QJAA4JAvwHAegJQB80DzIaCADJBwIVAAHyCQBkCCRfMicJEz-NCBAwWAgAxwgyLzEv
FwARMDwIER8qAEQ-MC80-wkBEAoAGwgBHQAdMRYKEB_tCA8YCgIBcQAfbxoKASAfNIYADRwKAdAJ
ASoABCAKER9fAB4fIAoAOQoCzgAJKAoRP8MKAxUABi4KAZgAA1cADzgKAALSADQvMU8_ChFPOgAA
XgA2PzAfRgozPzIvFwAAVwAANAABTgpiHzIfMV8wbgABdQEAVApXLzBPNA8VAAFaCgGRCRYwKAAD
XgovPzBcCjsOhA4PMQDQ8AgjEwQgDxb-FQxADxb-FA4gDxYvFP8wCU4GEBAMAEYPMG8nBAAAFwBW
AA8WPxUTAAAEAHA-FQ8TDxY-LQAWKAQAIT8UFgAbFRYAHxUWAAgAQgAWKQQAAUIAHxUWAAIfFhYA
CAhYAAZCAAwWAA8sAAkI3AAB8wAfFQoBATUQDxUtAa8g-xQODxNA-g0gfgEZkwUHBAAnAAcgFwIA
TwcAJwBAAAscOEAAkRAHIBcQBwAHMAIALxBHPwAcAX8AQgcwByACAA8-ACU-EBdAvgAkETBAAK8A
BwAHEAcARyAHQgAdb1cwN0AHMH0AIyAXEH0AETeBAQ9AACASRzcBAsIAHyA6ASECdwAOfwAPQgAb
EDeCAD8QFxBAABn-AgcLBAA-KhBeAB4fOh4NHg0ABQADf14NAD4dED2bAAwsMTRcAMEQHyowLg86
ED4NIA3eBwUDAH8QXgBeDQBdUQAdB60AQAAdAB6oCEEQLh0AAwAPUwA1nx4dIC5AHg0eEPgAKmBA
Hg86IC5OAHAQLg0eAB4dTgBBXg0ALf8AL0AdUwAdwl8qAF4POh5NThBeEEQABaEALwBNoQAf4C8q
ID4POgAuLQAeHSBOAQEfHewBLAKhAADgAAX3AAUGABAg8gAfIJoBKAGaAD8APh2oADAMVgBxXg0A
Tg0QHbcAAE0BXy4dIC0QVQAa8QEKEAQQTyowbhCOAC4vOi4NFwsPBQAQr44NAG4dEE4dME1wAAwc
OW8A-wMgLypQPg86ME4NIF4NMB0uDVADAAFAII4AjmUAH41eABwOzQDHAC0QLg1APg0wPh0gAwAf
MGEAMQFcACBQLlwAcTA_DUBOUA0PAC8uICEBKYEQLypgLg86ULYAQUAuHUAJACEALioEBH4BAbwA
EU1uAF9QLg1gLWQAHPUEjyoAjg86jg0ubS4NUG4gfhCOEE0AD74AK-EFIE8qMF4POhBuDQBOPQA_
HTAuHUBhADMALi2_AAPDAA9iACUEvAAnAD0fAQ8JAAU-YC0wQgIuAQUAfwBuHQBuDQDHADcPaAAE
oY4NAH4NEG4NIC3GAFAwTg0QXmEAbyA_HUA9IGQAGf4GXggEEP86SiAO-ztKDz0ADv87TA8_BgAw
AA89IQBMPiD9SsMAsS0yMy4zMTkwNDc2BgADbgCSLTAuNzE0Mjg1BgAiNjh_AApZBNBmHATwWPVS
IAX0UgMQBQAwDzoABwAfDgYAa3wQ81IeIP5SegVTMjYuNzXfAB8zlxoBAM8A77-0UiAE81IPOxAE
81IOBQBbD7QAIcARDgQQDxavFTAPFr-gCwIHAFIQDxbfFQQNMRRfDjIMEjoTAIMPOk8VXw4-FRIA
AhoAFxUmABIVFAAwAA8VSQAUHwkArw86IL8THzowvhA5DBlfEQ4E8AOfABETABIABJ0AEgCcABYA
mwASAJoAEhCPABIgBwA-ML4gjwAcDy0BA0BPFT8OOkABkgBRHw4fFB90AAAjATN-FR8vAQAKACJP
FRYAWV8UHw5fMQEmDxUUAA89AU0PrwAEFgCuABQArQAWAKwAA0IBFgCqAA9NASrBBAQEAB87AA4f
Og89BQA-AB0AQAALHzEFECyhFwsE8AEfO4BOUHAA-ylQHk86LiAOHQ89QA6dDiAcQA69HjA_HVxt
Ph08UAytDFAeIBx9DFAOHQwwHD0cYA4dDFA8kBzwAHMAHFIwHzvwBHEAIU5wCADwDiAuTzoeYB89
IA6fOg4QLjAevQ4ADz0dPm1cHQ4AeQDwAiwQDH0cIB5wHD0cMA4dDIA8hQBP8AQcQCQRHg8xAP--
mPBfKCgE-z8WAv4FAv4uBv4dAk4C7gL_FAb_Bgb_BwL_DQL_AwL_AgIGAo4G-gwCTgL_MAL_IgJe
At4G-jsC-gUG-gECPgL_EQIGAt4CjgI_Ak4SBg8yBhL_EwIGAv4WAv4XAv40Av4QAv4qAv5jBr5C
ABAQGwAwBwLeNwAR-iYAAisAEANKAP8APQZOAv4jAu4CXgKeBv4ksyMZwigoBK8-Av4KAg4G7lYA
YG4CPgb_CRMAIT4CCAAA4QABGgAQrhUAgP4MAv4SAv43hgCg7gIGAn4GvgL_AAsBegYCPgLuAt7M
ANCeAv4BAp4CfgZeBv5QrwARLr8AYAgC-h0G3moAEEdAADINAn4vAIEuAk4GLgL_HkUBEDGCAOAA
Bv4gAv4uAi4Cfgb_DSYAMQ4GboYAHwHoABzhbz8G-jECjgaOAv4ZBn69ASBXBooAMggCXuEAEM4M
ABDeGgAwXgKOawAXE80AEX6UAKAXAq4CvgL_EwK_3QF0VQb_CwL_FDkBYP4FAn4CbjkAIBYCtgBB
AQL_C6sAMQwCTh0CgVsG-iEGPgI_GADhBQL_Egb_DwL_CwZuAp4NAB8g0wAcII8-XAARLpoAEALG
AHBEAn4GjgLOdwIBlABh-ggCzgIeTwIQBGkAIf4E1AFBBgL_HBIAAs0BEC1VAUH_AgauzwJAAgL_
G08AEL7pABUG3QEQ3k8AUgUCjgIuFQESHpUCMa4CTkoAEBchATAdBq4HAUEdAv4D2gBQBQb_JQZE
ABAiJAAgTgZNAj8NAq7mABxg-z8LAv5vYAAxIgaekwATFmQBQQIG-h7RABEwJgIQEnMBkO4C-jMG
-oMCjq4AIv4AKgBBrgL_ThAAYAwCrgb_J1cCM34CvkYAEDSYAgBJAM8sAv4OAv5RAv4fBo6kAB4T
bLECMAECno8DGBZAAhAB8wMxBgK_rAAQC44AQUIG-g5PAxABLwFArgb_kbEAJAwCcAEh-jM2BFAM
Av46BhIAFRY-ABA2rgBBvgL_UmMCTy0C-i6rAB4QGYkBArcBQSIC-galAVAFAv4PBggBUR0CbgKu
9AMQO2cAUhECPgIGggQAxwAQOhQAASICEG5sBBAuKwARAswAES2AAREMVgARHKYBQQkC-gQhAxAE
ZAESHl8DAnMBUAwGzgKOhQMxRAJeUABPDQL_GsgAHkI3Bv4JPAMxEAK_QQMQBtwDAWEDQQMG-lx0
AwH1ASH_BTkFEAEnABMWhAAArQMEDQAR3qgAEkbWA0AEAv4ygQEEkQEQBFgFALwABTsAQR8C-iZH
AhAgxAAQAlMETysC-h7BABkAFB3wKTVr8AQbahvwABu6CcAL2gkIoAsqHKoJCIALKiyqGQhwCyoc
ygkIDzVQC1oZShk6GQhQC0oJHAkqBADwARkIDjALSgk8CQoJPAkaKQgNADBMCUwLAGMOIAtKCawK
AFFaCYwJKgoAZGoJbAkqORQAExoKABA8QwAQSU0AcFoJHAkKCRwaAP8mHjALahkqGRpJCA5Q6kkI
HlAZqmkIDnAIGWp5CB6ACOkIHqAYqRgewA4YaRgu8AAOaC7wBG5ZSR_ANW8Q8AQebw-7RPANvQ8O
wA7dDA8NoA4tHxGtDA8NgA4tLxGtHA8NcBIAMB0sfUhC8AA1UA59DB8RDG0cDw1QDo0LABBdxUPy
AjUwDp0MLxEMTSwPDTAOjQw-CwAAw0MJDQA4fQxPDQAAGgAfPA0AAgBMABJMWQABcQAAGgAyHzUw
cwARLRoAUFCdLB1MFgBAUBytbBEA-w9wDw0cbXwLHzWAC_wLGqAbrBsawAobbBsq8AAKayqMSyIw
NW8VIwESFCMBERMjARASIwFQFq0MDxIjAVAWrRwPEiMBURbNDA8SIQHgTF0cDxJQDm0MTxYMTRwV
APAFMA5tDG8WDD0sDxIwDl0MjxYMLSwYAB8gDQANLx08DQAAAUwAJB1MWQBwTxYMLTwPEh4BMX1M
LRcAU1DtTA8SGQEQEhkBHxIZAT8QGhkBEhkZAREYGQEQFxkBUButDA8XGQFQG60cDxcZAXIbLSxt
DA8XPAIgLxsxAhEXHgEQGx4BEhfjAQANAOMsDxcwDm0cTxscPSwPF-cAMxsMLQ0AaE0MrxsMHQ0A
Lw08DQAAEF1kAGILDCsMDUxdAIJdPAs8HTwPFz8CMQsMPRgAc1CNLC1MDxclARAXJQH-EBccbXwK
HzWACuwKGaAarBoZwAkabBop8AAJainwBGklASEQHyUBEh4lAREdJQEQHCUBUCCtDA8cJQEgIC1L
AxAcJwFwID0MfQwPHCcBYJ0MfRwPHGADIQ8gIAACYAMADQA3LA8cCwACYANPLyAMXQ0AAX99DE8g
DD08DQAFQy1MDxxCAhAgQgIRHEICJAwvGgACIgETHCIBEBwiAR8cRwI-ECQiARIjIgERIiIBECEi
AVAlrQwPISIBUCWtHA8hIAFRJc0MDyFFAlA8bRwPIUICIC8lHgESIcUAcC8lDH0sDyFgA1AvJQyN
LBgAEiANADg9HC0PAEYtDAsMEQAwOywbWgMDDgAViwwAMG0Ma2UDA14AEEsiARUhZAMSIWQDEyEd
ARAhHQEfIT8CPxApHQESKB0BEScdARAmHQFQKq0MDyYdAXAqLQ8mbRwLHwFhKj0LfQwLPgLgC30c
C1AOjQsPKgttHAvAABGdDACxLAswDo0LKgtdLAvhAOEbShs9LAsJIA49K4orDQoAABQAIC08CgAA
KQARTQoAgJ0LCgtdPAsJPQAQChQAEBlRAPAGTUwLCVCdCz1MCxlQHH0LHWwLCXALHwIQGR4CEBke
AmAZwAkbbBsBAR9rAQElEC4BARItAQERLAEBECsBAVAvrQwPKwEBUC_tHA8r-wBSLx1PK10AAVBd
G04bPQIB8ABNC44LLRwLCjAOTQuuCx3-AHBNCx4bLhseDQAvCiAOAAxgTgtOCw08DABxXRseKx4b
HQwAYH0LTgs9PFUAgG0LTgstPAsaCgARDgIAsB1MCwpQfUsdTAsaFwIiCwoSAR8aMAM4D7MIFzIc
ShyzCEAMGQwqBAACswhyDDkMCgw5DLMIUgxJDEkMqQgzSgypCgBDWgyJDLMIVAxpDCo5FAADswgg
DDlDAAKzCHMMGQwKDBkMswg-HCocswh6FSuzCDMLHAuyCGILHAtdHAoUA1AsC00sCtYCEDwJACcJ
IAoANX0LTAoATDwLTTwKAHEsC01MCgkwWgBRTTwKGTBaALAtTAoJUJ0rHUwKGQACQAoJcAoUBB8Z
EwQFD5AIVCNPFpEIRQ8WTAuRCDMLbAuQCGALjAstLAoTBAMLABwJCgAqHTwKAAA9ABEdAQFRbQtM
Cy0BASF9S-8AH_39ABUPdAhMFSt0CDMLLAtzCADVAQL9AQPgAXswDm0bTBs98gBVTQusCx0KACoN
PAoAkV0LLAsMCywLDQABU107DDsdAQIwDAs9AgE_jSstBAEPUwhZEwtTCBAbEwYUChMGIQpQowAg
bRy3ABCdCgAlLAoJAAH9AjssC10KAAAnAS49PAoAHC38AU8LLAst-AAcDy0IVCM-JS4IRQ8lLAsu
CDMLLAstCEQLLAuN-QJELAs9G-UCVSwLLQsMAwM-PCscBQN2DhUIFC4VCBIuFQgA6AAfLgECA0QP
JgttAAUiDyYEAlKNCykLXQQBMG0bSQ8DEAgUCDGJKw0KAAAUACAtPAoAACkAEU0KAICdCwkLXTwK
CD0AEAkUABIYFAghCggUCCIKGBQIIgoIAAEQGAABEBgAAf8AGMAIGmwaKPAACGoo8ARoFAhMMEtd
DANWABQIYEwbPRwPKxUIMowLLQIBA_gDAAkAVRwbLBsc9QMPDgAJNEwLTAkEaRscKxwbHR8DCAwC
MW0LDAIAACQCARYIDxYGFA8WCEkg_gMTCDG6KDoNCFDKCAoIOgkIMuoIOvEHEogIACH6BAcAIkqo
-gci6ggIAAAwABEa_gciuij0By-6APEHeBPN7wcxnQ8NAgsBCQsA-wpTrQt9LAsHAIEKIA6tCw0L
XQoAO40LDQwAE03xCSENCwIAA-UJMV0LHRAAQR0LDUxQCmE7DQsNOw39CSD9APYJHu30CQ_EEGk6
nQ8SAwEwfWtNAwFRfQtNC03vAFN9Cw0rDQwAdF0rDQstKy0YADJLPTwKABKdCAAhO131ABCdBgwT
GvwLD-IAAA9dEGMTzecHIf0D5AdSXTsNOz3zABFttQEwHQs9_QCRbQsNGw0bDQs95QA0bQttCgAA
MAABCgAQnQoCHjwKABFN-QAAWAAfHfABVQ-jBw4UrTQQE80yEAD_AB8c-gAMMwsNG-QAQQs9C20K
ACJdq-UBIf0D7wAxbYstCAAh-QL0AD99Sz3yAAkPBhBrMW0-IeICAOgABOQCQgsNG33mAhGt1wAz
fUtt1AI2LQsN4AIDAgAkHTwcABQtDAASi98DL-0B_ABVD8wHDhKtygdiHyrNDA8u2gMRLvgAALQD
JQ0r7QETDQIAA_8BANQAA_0BEosIAAT9BATkAQIkAAQMAAQ-AAAQABMwXAAfHe4DVg-SBxcTzdAH
APACESsHAAEAASD9BPcAJI1LygUfLeAFAxIr3gUyjQuNCAA-S0087wFa8hZp8AQZPAsMCxnwABkc
ahsYwAkcqgsJCKAJDOoJCIAJDPoBCQhwBwDzAQ81UAkMShlKGUoJCFAJDDp4GFA6CQgOMA8AAnkY
MToJCA4AAHoYABsAECANABSsCwBRSgmMCUoLAG0LWglsCVoWABFKfxgRSlQAIwtKgBiwSgkIHjAJ
C1oZKhkyAKBQCAv6AggeUAgJlwBgDnAICeoJ4QcwGaoZ4wc-GWoZ5QcwwG7wBB4-EQ8QDxEPEAcC
8AIfEW8PHxAfDcAOHxGvDw8QDvQHUA8R7w8O9AdgDxH-DwEO9QdyDxFfDy59DvcHUA8RbQ4c42Gh
DVAODH0OHA5tDh0CEAxxXxBtXlpADH0OPAoAKQogCwAzbQ5MCwB0DxBtDjwOfRcABAsAIQltt18A
LAISCWQAADACEwlkAMAKUAsJfS5dDgsaUAv1WQA6AjAO7Q46AjAerR48AjEebR4_Ah9uJwMrEBMm
ATAWDxV-ZgEmAcEWbxQfFR8SwA4fFq_cZoASoA4PFu8UDhcIALw0IAEOGAgECgABJQFgFm8UTm0O
DxBxDxZdDkwOXRkAYTAODF0ObA0AgDAODE0OjA5NPQEVIAwAGQoLAC8PFRcAAhIJRAABKAECXAAB
KAEjbU4mAS-9ASUBTxAYJQFxGw8aDxsPGiUB8AEbbxkfGh8XwA4fG68ZDxoOSghQDxvvGQ5KCGAP
G-8ZAQ5LCHIPG28ZLm0OTQgxDxttNAIAUggTDMoAASUBAysCAC8BTB5MHl0BAWEMPQ6sDj0LACYP
GgwABxcAQQlNDiz1YRJNJwFUTT4MPk1PAgChZAEpAT9tLm0qAU8QHSoBcSAPHw8gDx8qAfABIG8e
Hx8fHMAOHyCvHg8fDnYIUA8g7x4OdghADyB-Hl0DYRxwDg8gfQoAASoBUCCNDo0OfAgAFgATDBgA
AXUDEQwZAAULAAJPAjF9DizlAAkLACYPH4MDB44DFAkLAAtPAgLPAw8oAVYQIigBcSUPJA8lDyQo
AfABJW8jHyQfIcAOHyWvIw8kDqwIUA8l7yMOrAhgDyX-IwEOrQgECgABJwFgJW8jPn0OiRAxDyVd
_QAjDyF3A2EsDp0ODyF3AzMsDq0oAQAMACM9HlYCAA0AAKVhAg8Ajw8kTQ48LhwOfwOCECctAXEq
DykPKg8pLQHwASpvKB8pHy7ADh8qrygPKQ7hCFAPKu8oDuEIcA8qfygPLn8NABhwDQABMwFgKo8o
Dy6PDwATUBwAJQ8qIAATMCAAIw8qJAATMCQAFi8kANYgDg8qXygfLk8qHy5fEwCVLygvLo8qLy4v
EwAeKSYAD0wAABkpcAABgwAjKX8TAAEmAAAeGiUPKbYAUg81UA8uIwADHwBFUA8uDg8AADMaMi4O
7xoAcIAPLh6vKB4LADCgHy4TCv8EHy4fNcANHy5uHC3wAA1sLfAEbZABIRAskAFxLw8uDy8PLpAB
8AEvby0fLh8rwA4fL68tDy4OawlQDy-vLQ5rCWAPL-8tAQ5sCZIPL18tTytfLQ5wCbAPL08tHytP
Lh8rTxMAABEAkj8tDyuPLg8rPyQAEzATABSvEwAEEQAAbgBWLy4fKx8sAB8gGwAlEC4bACJPLgQA
BzIAAJ0AMR8uLzYAFk8uABNvLgAVb6MAIy5fEwAB2gAVHxMAJg8uBAAE9QAADgAFBQEAvQEiKw4e
AQC6ATIrDu8XAHCADysery0eCwAwoB8rxwohHyu6AR4rugEPLApJIfoDKQoiqizPCWEMugwKDFof
CiPaDPoJI1qMCQAh_gUIADMLOqwRAAQjABMLNgAAEAojqiwKCi-6AwcKjwIKAAIGCiCPDwQAAQcK
Bw0AAf8BMBGfDwQAOQ4PDQ0AAS4CAQ8AVg8PDxF-EwATfxMAChcAHxAXAANFEU8PHxcAAgQANh8R
TzYAIU8PekUFHwAADAAVT5sAQxA-Dz8bAFI-ET8PDu8iUQ8Q-w8DIwBSUA8NDxDnAACMAiQNDvMA
UnAPDQ7vMABwgA8NHq8PHgsAMKAfDTYTIR8NjAIeDUYED3oKYCCPFAQAA3wKBQ0AAf4AYBZvFG8W
bw8AAg0AUg8WTxQPEQABPQEBEwBaDxQvFg8XABNPEwBVLxQvFk8XABIVLgAcT0EAGM8iADU-Fp9-
ABUVjgAaHw8AAHgBMhIPFcYAAHgBJBIO0gBScA8SDu8zAHCADxIerxQeCwAwoB8SqxMhHxJ4AR4S
eAEPzQpUAgoAAswKMf8ZA8oKwQ8bTxk-Gw8ZPxtPGR0AYTAODxtfGVVGIxsPCAAQXxsABBkAMw8Z
HwQAAxkAAT0BARsAHG8TAAJaAAYTACMaj1YAFo8mAA4TAAwmAEkwDg8apgABkQESGsMAAI4BMhcP
GtwAAI4BIhcODAAAjgEyFw7vMABwgA8XHq8ZHgsAMKAfF0cUIR8XjgEeF44BDzELSjP-HgEwCwIK
AAIwCzP-HgMwCxBPTgBTHj8gTx41C0EPIF8eB0cjIA8IABBfGwAEGQBTDx4fIA8IABJfNAATIBsA
Vj8eDyCPEwBVTx6vIE8PAEcf-x4FLgA_jyBfGwCyMA4PH28eTyBvHg4JJCIPH6kAAHQBMhwPH8IA
AHQBJBwOzgBScA8cDu8wAHCADxwerx4eCwAwoB8cvRQhHxx0AR4cdAEPfQtgY18jPyWPI38LIV8j
j0cCEQAB_gAwJW8jr0cwHyWfEwAEEQASzyAAESAPADhPJY8PADEPJS8zADUvJU8XABIkRgAKBAAe
TzYAAAQACTYANY8lT4sAUiT-IwMOaSQEDAAAggEyIQ8k0AAAggEkIQ7cAEFwDyEO_wAAggFQIR6v
Ix4LADCgHyFNFSEfIYIBHyGCASwfLtILAhQe0QsyDycO0QswDycO0Qt1-ygBDycOcAoABcsLECcE
ABAODQDhTygvJw8oDycPKC8nTygkABEwqwsAEwAKBAAAFAAUDh0AEy8EABJfNAARIBcAGI8PAFWf
KA8nnw8AGykeAA9EAAMnKV9wAAQEABVflwAdKa4ABecLAtIAAeEAEintABAfDAAUJ-kAUnAODyfv
MgBwgA4fJ68oHwsAkKAeHydvKB8nHp4BQB5vJx6eAR9u4AtfBMwKEVAMABMD1gsCCgAB_gBDL-8t
BcgLQX8tTn0XAABtC0h9Di0ODgA2DQ4NEABYLn0ODS4eABa9GgAkTn1bADEu-QM9CwULAANvCyH9
ARcAAGsLAD5t8AMPNXAMDu0ODBuADB6tHgwboBz9bP8AG8ALHG4cK-AAC2wr8ARrNgEf5iz5CTAJ
-AMLDAsKCA81EAsPCAAOAAcuBUYVApEVFEp2FQWRFS8OIJIVER8MkhUCFgySFQEjAAKSFQMnAAAT
Lh9qmQACHwsQAAQwCvkGBwCP_AgOQP4I8A4oAR5y-gkwDv8RA5ELAB5wAckBXxH-DwUODAAZRX8P
Lp0NAAA1FRONDgAjDI2xFQMNAAFzEwINAAKfFQ8NAAECFRIFDQAApBUPDQADFixoAA91AAclnS4L
ABX9sgA-EP0FFQAJMg3_BgkAf-8NCA81QPtbASEg-xNcAUMWAw8VTXwDpwpP-xQFDgwAJUV-FE59
DQADJwEBDgAF3BUlDzUxEg8NACgJTgAJaAAB4wMVEjkBCwoALw8VFQALAFgBAQkAL-8SWAEnEBhY
ASIbAzQLIA8ZHAoRIAQLLwUODAAZRY8ZLo0NAAKqFCgPF-EADw0AAAITFigPFzIBAg0AAgAWDw0A
DgYcFgMRAEVdPgw_UgADUhUDDQAFnwABSwECqQA-Gv0FFQAJAGABAQkAL-8XYAEnEB1gASIgAwYL
IA8eCAoAVwoIYwoPDAAFRZ8eDp0NAB_dDAAEA_YAGBzzAA8NAAADkwEPDQAAA5MBDw0AGglBAAFb
ARUcRgEDKQsv-QUVAAkAWwEBCQAv-xxbAScQIlsBIiUD7QogDyPhCREgyQovBQ4MACVFfyM_jQ0A
AxMFAQ4ABXgWBXkCGK0NAAB7FgcPAAJ9FgURAAJ_FigPIekCGCEbBBghYwEWIRsEFSFBAQsKAC8P
JBUACwBgAQEJAC--IWABJxAnYAEiKgPLCiQPKOoVT-8oBQ4MAA1vnygPLp8oDwAUCygWDxMAAQ_t
FigfKq0WCQ_FAB0OyQAPDwAHHykdAQQIGAAyKP4GCgAg-y6oAR-9qAEiECyoASIvA9UKJA8tTAoC
jwoPDAAXZX8tTyt-LQ8AE1-BFhZfEwATT8MWBjMWCsMWD6oWAA8bADUAhBYfT8UWERsvxRYPEwAI
BMEWGg8bAAsIAQcjARguLwEPGAAEMi3_BgoALv8r0gEPcAtMBAgAI7osAwsD1RYvDiDWFggdDNYW
CDcAK7osLgAPSwubCAwADr8WDw8AGwu_Fg-VFgQP7BYiHxHsFggCHwAG7BYvTw-qAA4HDAAfEBgA
EBoPoAsf-aALdSCfFAQADw8ABQUCFwawFg8EFykfFgQXDhcWBBcOkAAMDwAP1QAEHxUYABAaFNgL
H-3YC2kODAAPwBYFDxoXAwYbAA8cFykOCRcPEwAVDkwADtMADgwAHxoYABAaGR4MH-0eDF0PDAAR
E18yFwv_Fg0yFwYbAA80FyUfIDQXBwkbAF5-Hk8gfxsADwwACB8fGAAQGh5PDB-9Twx1CAwAAFQX
J68jDwACVhcLEwAAVhcLEwAY3w8AOk8lnx4AEy9YFxxfSAAKBAAeXzYAHC8XABiPDwAOxwANDAAf
JBgAEBojiQwf-YkMXQ8MAAUgnygEAAckDLgvKg8oDyoPKC8qXxcAABMACgQACx8AEy8EAAkXABiP
DwANawAfj0QAEgZyAAQEAB9fsAAOC2sADv0AD5kMog-JDCAoL3-QC1wPLy8tDxMAEw8EAA0XABwv
EwAuvy1bAA6CAA4MAA9ADGsSBzwMMPkFDIkLUwwJ_wMJCgA-_gMJFACdA8YAL-wHVQwwEwf3CkIR
-gUNCwBvDQ4fDw8QBAABAO9nBCQAFw8YAAoEAA8kABsGFAAObAAPkAD--xIFtgIo-Qe2DR-8tg0o
Ewd5DBAWXAASEooAAH_VDwQAATUPFA4kABcPGAAKBAAHJAAHFgAKBAAfDmwA--83BbYCKP0HOA8f
-DgPKBMH5Q0QG1wAExeuAABHDw8EAA4fDjAA----WAWaAyj9B4gRH-yIESgTB08QECBcABIclgAA
1icFDQAQH8AoCQQAJw8fHgAHGAACBAA-Dx4OSQD-cAXNASj9ByUSH-wlEigTB94QECVcABIhcwBf
DyMPJB8EAAIVDiQABhQACgQAFw8kAAYWAAwEAB8ObAD--zcFtgIo-QedEx-8nRMoEwc4EhAqXAAT
LooAAO8qDwQADhYOMAAHFgAPBAAHHw5gAP---ygFmgMo-QfbFR-82xUoEwe1FBAvXAATK5YAAOoV
DwQADhUOMAAAQi0PPQD--w8FXwIo-QcdFw_7AiHxAjHpwAm8CwwLCLAJDNoIDzWQIToCBgApDnAo
Oh8OU0QWFgvBLhAQlS4QrJMuIRAJulwAQCMwAAkLz1wSagsABBYAFxBSRBEeLgAGwC4GUkQGUzog
CQuWABMeCABADnAJC1Q6AgcA-wUOkAkLygkIHpAJCtkIDrDoHsDuUBsBHlPuwA6-EXMjYQ2wDg8R
33kjFJBEOgUJAAGsMQ9WRCUiDxCgLhALW58hDI2FLiELEBcAEEwLAABDowIkAB2NDQAAJwAClykh
Cx8NAAKqLgFiACMPEG8AASgxIBCN7EABkgAQEME-FR8KAAG9ACAQ7RMAAwkAAeMAIBDNEgC-kA4N
3gsKsOsawOpAAR9j7xPADr8WAyMxErAOKGsREl4AAuw5BQkAAYQAD-c5BA9xRA8mDxVgLhAQGQAR
jBkARBAODxUMAAE4AQ8OAAYCKgACTwABSAETFXwqA985EW2CAAFIATQV-QOaADEV-QEWAAULAAHG
ACEV7RUABAoAAe4AIRXNFAAATQEAEgAgsO-fOR-rUQEgUxjADr8bxCJhF7AODxvfyiIUkMU5BQkA
AYsAB9A5D51EGiMPGp5EB08BAJICQBpNDqwsQgE-AQ8NAAQCJwAFpEQBTgESGoguAWYAIw8aqEQS
Hw0AES7iAhBQaC4ElgIVGpYCFBqWAgAJAAHnAB8algIwUx3ADr8gYyJhHLAODyDfaSIjkA58OQUJ
AAGEAA_4RCYmDx9yLhIQ8AMADQAREBkAEywZAEIADg8f6AMODgAVENlEABg5CA4AAUkBEx-HAQNv
OSV9LpwAMR-9ARcABQsAAckAIR-tFQAECgAB8QAhH80UAAGZAhAcmQIfHJkCJFMiwA6-JSsiMCGw
DqYhAEsNFJBcOQUJAAGLAA9nOQQP5EQPALxEBGsuEhAZABA9NDFjIRAODyRdai4CQS4RABIAAGsu
CBAAE4wOAAIwAAHyAxEhXAETJFwBA0c5AfIDA0c5JP0DogAxJP0BFgAFCwABzgAhJO0VAAQKAAH2
ACEkzRQAAVkBECFZAR8hWQEkUyfADr8q6iFhLrAODyrf8CEUkAVFBQkAAYsAHyoQRTkbKRcuAMGC
E289LhBvEwBTEA4PKT9hLhI-JABJAA4PKSQAAhMAE49KABWPSgAZKW4AHh8TAAGUAAYORRofDwAB
0gAVKeEAAZMBAEU5BAkBIinvFwAFCwABMwEiKc8WAFCQDg8o3hQAILDvJ0Uf7ZgBIFMswA6-L8oh
YSuwDg8v39AhFJAtOQUJAAGPAA8YRTsfLh0uBBMQlC4IGwABWABPEA4PLhkAAgGeASMuTxAuGk8X
AADyLgRRLhVfYgAKFkUBuQEPKUUFKw8uFkUBxQFlLm8tTytvAgESLhsBFx8MAAEzASIu7zIABQsA
AV0BIi7PFgBQkA4PLd4UAD6w7yvCAQ-4Cj8PH0UGEgsmLmEQCQxqjGrlCiL6B9cKI0qs4Aox6gxq
IgAEHkUA3AojuizWCi-6A9MKkwIKAA8iRRsVEA0AAToCIxGvzi0BLwAArgoTjxEAFg9EAB8AFwAH
H180LgAVX14ADyBFBxMfHwANNC4VMCBFFx8MAAHkAAYrRQUMAAESAREQHQEWHwsAATwBIhDPFgBQ
kA4PD94UAD6w7w1YBA8zC1cPKkUVGxUmLhEQBjoGJi4jfxRHCxdfJC4SXywAAEILE38kLhp-EwAV
304ABihFAYUBFxUVLgB-AAWbAAGAATYV-xRcCwLPABcfDAAB8QAiFe8vAAULAAEbASIVzxYAR5AO
DxRiCx-tYgtZAgoAAb0ADzJFIy8aXxYuAxEQvwsEBAAwDg8XUgsTb1gAEm8kAACDCxOfVAAfnxMA
BhwQMEUBlQEbGhQuAIsAAsEAFx8MAAHZAAY7RQUMAAEHAREaEgEWHwsAATEBIhrPFgBQkA4PGd4U
AD6w7xeWAQ_zC0EPOkU4Ix9f-i0LBi5TEA4PIG8GLiOfHtgLNF8eryAAEQCSLRUHDAAybx6PHUUB
OwADrS0BgAEXHwQuAHEAAqcAFx8MAAG-AAZDRQUMAAHtABEf_AAWHwsAARcBIh-PFgBHkA4PHtsL
H_3bC2UPQkUdFyRCRREQiToD6i0AqwsTf64tB_gtEwAXABsPBAALHwATLwQAFV9aAAZARQGNAQWs
LR8wTEUFAQwAEQEYAAYMAAH7ABEkBgEWHwsAASUBIiTPFgBHkA4PIwwMH_0MDE8CDwsGCgAEBgwj
Do0EDHFNLg0ODS5NGwAAAQwzXQ4NAgATXQIMUV0OLQ4tDgABLQFDKm2ObfgLMa0OrRYAAN4LAhYA
AwwAATIAFG0yABopVAASHxQAAXgAFF14ABEpSw8D4gsk-QOqADEp-QEWAAULAAHWACEp7RUABAoA
Af4AISnNFAABbQ0F1Qsf7NULWQS4ChFQDAAPDUUKUy5-LU8uNC0AsQuUjy0PLi8tDy6PqQsAEQAE
8hUSjygAFQAXABwvEwAVz0oABlkAAWYBBUUtAHQAAooAFx8MAAGsAA98C2gQ7HkLIskMegtACcsJ
DHwLQQnKCQx_C0AJ6wkMfwtBCeoJDIALUAn7AQkMggsAQFARDIMLAg4tFTAhLRAQEwBABQkMCAkA
EPoJACQOABMAJQ4AFAAUEDoAJR4QOwAUMGEAJR4wYgATUIYAJB5QhwATcKkAJB5wqgARkMMATx6Q
CeyRCyki7xGLCxHOySofkPcqAgDvKg8aAAcAtQEPHAABBHErDx4ACwALAiYNDhYADiIADyAADQBl
Ag8iAAUABAAAJAAPIgAPAMYCDzssBwQmAA8kABEAHwMO8gAOuAAPKAAXHxAoAAoAJAAfHyQAEAIo
AQ9EAAkPIAALAqoBD-YABR8fHgAKAyQCDzoABA8cAAcBkgIRziUAMJAO7RAAAt0MH_zdDCMi7xbX
DBHOpCoA7QIEwioKyioB7QIPLCsEAa0ADwQrBgEeAA9oKwYfUGgrBgI_AB5QZCsJQAAfMCAABgRC
AB8wngAECEYAHxAkAAoESgAfEKwABghMAB8AkgAIBjwsHwByABICmgAP4AALA_kCDuIADygBFAJE
AA4mAQyyAA_KAQUCQAAeUEAACcgAAAYCD8AABQEiAg_4AAQC7QISEu0CBUoOH_xKDiMi7xtEDhHO
mykA7QIGuSkPySkBDyIADwP9AgcWAA4EAAAoAA8mABMDDwMOcgAPegAADyoAFwL9AQ5_AA_GAAUP
LgAbAz0DDooAD5IACA8yAB8DMQMPNABQHxD_ABofHzAAHAOMAQ_MABIfHywAGAM6Ag_wABAPKAAT
A9gCD6AADA8kAA8EwQMSF8EDBXUQH_x1ECMi7yBvEBHOMysAwQMOYisBFgAPlisAAK0AEe8iAAG3
AAciAAAEAAIkAAAdAQ_4KwMRULYrEgEnAAHEAQcjAAQEAAAeAB8wXQAABmEAERBHABAFDQAfEGwA
AAZwAAK9Ag5GLAbQABYASwADtgIPkgAEA6QCD5QABhYw2wACcwIPcgAFHlBlAANhABVQXAECaAEO
0AACLQIPVgABAiECEhwhAgUaER-sGhEjIu8lFBERzkIqACECHw9oKgIBJQIPyioEHnCmKgfqKgHH
AA-iKgYfUDwABAQiAB9QPgAEBP4qHzBAAAgCJAAfMEIABgbCAB8QRgAKBCgAHxBKAAgG0gAfANgr
CgS4AB8AcgASDpoADuAAAq4CD_IADQ4GAQpEAAAgAA9CAAsBqgEPQAAGAR4ADj4ADyQCDAI8AAHp
Ag84AAQC7QISIe0CBX0SH_x9EiMi7yp3EhHOOSkB7QIPZykKASIAD7kpDAHZAA-hKQ4BJgAP1ykQ
H1AoAA4ELAAfUHgADgakAB8wLAASBDAAHzCEABIGtAAfEDAAFgQ0AB8QkAAWBsQAHwBmAB4DNAAP
aAAcD5wAFwAwAAMrBg_UABgPXgETAlwAAZUDD7gAFA4QAg_wAAMBKAAPqAAQDrICDqAAASQAD5gA
DALBAxIuwQMP3RQtIu8v1xQRzj8qAcEDD20qCgAiACLPLXcqAdEAByAADgQAACgAACYAE_8yAB5Q
YAAPaAAEEVAQKxIBNwAeMGkAD3EACBgwSyseEHIAD3oADBEQPwASBT8AHwA-AB4CNAAFQQAfELsA
GgL9AgW9AAH4AA92ABIC2gIFMQEBaAEPbgAQF1CcAQHOAQ9lAAwXcP4BAocCEiuHAgX7FQ_HAh-w
BExJgEmACUsJYAlLCGAJC0oLCUAGAHAIQAkLegkgFywAVCEwigkAEAABskMgC5oQACEIDgoAF5pV
T0AwCPoEPCEiCAk8IQJbZi8eYFtmAdKgCRuqGwigCQvqCwiAXSETcGQhYmAJC3oIegkAIWoJCgCB
cAhKGQgOCFpHAP8EORgeABg5CB6gOC4gDjgewD5gPlfPH7ExfvAFDm8QHw3wBIsgMh8QDwsAAcAg
ZfADDg8QbwoAA9QgJfACFgAFCgBHDzXwAQwAABYhH38MAAsR4FAhBQsAARYAFh8LAA85AAASbyMA
BgwAC3UANwIPDQsAFn8LABQOuQBUAw8NHk8MADEfDW4IAG8MfQzwBXw3rx8RUj5mEW84ZkAdbxQd
NmZBHa8UDTRmEw0UIQIIAAHXAgQSIQMJAAEfAwJZIAUJAD8PNUALACMUUFYAFh8LAABGYUES-xQA
FgAF1WU-DzWQ1WUDoQwfEm4bLPAADGuByx80RrAfYBjwBh5PGmvOwR1PGQ0ODxfwAg4Nf6YgAODN
AdkfBQkAAPYBDgoAILA_CgDwBD8XgA49rxk9DxdgDg3-GQMNDxfsAAHTTRQwCQA-DzUgCwAYITAO
kSAQHwUAIg5PRWUwQG4fEQDwDB8XThwfNWALTAsMHxkODAtMK5BLDBoODGvwAQcANAvwBwcAEC4G
AH9MC-AIS-AYHwEdcDgPHfAMDvCozjDwCg4uIAMHAADl0wQJACAIDp0OJQ8cCQBGDzXwBwsAUAYO
Dx8-HwAECQBCDzXwBAogMRzwA8wfMA4PHBQDER8ATiTwAAoAcA810A4PH68LAAUJAAHc2Q8LABYU
0EsAUB810C5vEmUA1gGvHxxuHR818AEMbbbNHwAWAYBSXyLwBR4-JAkMYvACHh8kH5QeZfACDh8k
LwwAMw8kPwwAFAMMAAC6Aw8YAAgeTwwAEbDkHxEkYh8woA4NQAMBDgAQDRTPIw8kEQAwbyMeJx8E
IACifyMPJB4wHgwPIxIAcAyPIxw_HBsNAPAhUA4MmzwrDg0aUA4M_wEODQpwDgzrDg0acB7rDg0K
kC6rHg0aoB0eax4dGsAKHW4df3ARbX9wD1wDHjJVDy46AjALDg03AjApDvCf1VAN8AgODMNjFQ4J
AGEN8AYODC8TADEFDgzXY9DwAh4MbygPJx7QHhyPoGPwH4AuHM8oHycuYB0eG48oGx49gA0eC2oL
Hi3QDQ4LSgsOLfACDgsqCw4d8AUOCwoIABEGCAAAbwAADgAiCA6HAFEd8AoODZMATwwN8DcZl0oA
BQGRTEiASIAISwhgBABmCww6CwhABwBAWgsIIAcA0QkIMAgLegsIAAgLDGqpB3AIC4oLCAsMQAdy
IAgLmgsMigoAJ-oFCAAiMAjxKDNACAutBxILrQcB2ihCoAgLqgcAQAy6CQgHANPaCQiACAsM_gAJ
CHAIsAdSCAt6CXoJADFqCQhFNCBwCDQ0EQ4GAHAegAhJCB4ABQCvoEgeIEgewE5ATrIHIPEBffAF
DW8QDfAFDQ4fES8PDgoAFkwHACAEDfLUUPADDQ5sHQBQAg0ObAvpBhEBCQAVCggAUAANDg8RCgBS
4A0OCXwIABmMBwBRfAsNGuAuADsa8AA_AARGAEACDQ5cCABAAw0OTAgAEQQIACTwBQcAn2sN8AV9
CvAFemEHH6BRjxLwAw6PFQ7wUApgFn8UDQ7gCQBQnxQNDsAJADC-FA2y0wDYJxANVNMAbChCAA0O
YAoAQQIPEw4NBzADDxOW1Q8LADkCZQcwDxMOPdcxDe8UCgBCgA4NzwoAQqAODa8KAELADg2PCgAw
4A6PBwCf8AGOHPADjPAzE2cfEBerCTAaDvCXC0IbXxkNGAFiG38ZDxgOWAczDxgOTgcPCgAGAWIH
kQ8YPoAOTZ8ZPSwBchv-GQINDkAKAFEEDxgOMDgHAS8AHyALABCibxkfGA0PGS8Yb2MAkDAODU8Z
DxgeDeGzgB4MTxkMDh81MtiACw4NDxkMDgs92GBgThsODQq51lJOG4BLAAwAMxBL8AoALPAHCAAf
TngHIzZVDxx1BwA3BSENDmkHQA0PHg03BSENDBEAYAYODQ8gHFrfQQ4NCxwTAHQEDg0LPA0OCAAQ
Cs4IRAtcDQ4IABAKrABEC3wNDggAkQrQDg0LnA8dDggAfwkOCsAODawHAAWw0A4NjAkOGuAODWxY
3c8BDmkOGvADbhrwBWpHBx-CUW8h8AUOPyQPIg4f9AYQD8gmDw4AIgDHsyQODw4AFz8OAB5PDAA2
sA5QDQAyoB4NUwdADyQOkJ8GwUAODG8jDA5wDgwPIg4Ag38jDA5QDgwLDwBhiwxeDBsKCwBhm1wr
Cg4NSgf-HgoOHWAODOsKDh2ADgzLCg4doA4MqwoOHcAODIsKDh3gDooOHfABjh3wA43wM0oHJgRG
BwUPAhIqRwcCCQADEgIhKh9BBwYLAAD_AFAeDQ8qP1AHUA814B4d41MQHwwAYqAeHR8qjwwAEGAM
AABkB1IeYA81HiJrVB4vNXAMI2uQLLAMHgtPKAsecQsBbQcxLPADCAATDG0HExwIABEMbwcRHAYA
QAzwCg43Ck8M8AwMcQdVQQlMCGAEAFIMSgwIQAYAcAgMawwIIAkGAIAwCAx6DAgACQYAAGwHMQyL
DAQAcg4gCAyaDJoJACL7BQgAEPoIAGAwCAz7AwxqB0AM_gEMagcwDOsMHQcwDMoMYwcgDKsHABAJ
DgAgoAkbABKAKQBgcAgM_wEMXgdCDHoMegkAIWsMBAAwDnAImAARDgYAQB6ACExnBx9MZwcxERHK
BhUPdiIk8AXIIgIMAFIMDxAcC3QHQhwLHAt3BwAKABIMegdjDAscCxwOfgcDDQABPAcDJAB0CvAA
Dw4OCw4AIuAJDAAAJgAp4A0MABYMJQAEDQA0Dg0aJQASDqIHAwwAAWIAASQADAwANAINDiMAEgMX
ABIOtAcCCwAA0wADvQA-BQ1uugcsgA8TjxYPEvABf7MZD_0gXA8WDxLgFwAhHxRdMC8SwBkAAREf
NAAfoBsABANTAB_AHwAFBFsAL2AOIAAHAGIAAC8IBQ4ADQQAEg0DCAQPAA6EAAMhAA9iAAcEIQAP
YwCOP1AODR8ABwHzCB8PHQAGP4AODRkAAwCqCQ8XAAAAygkNFQBf4A6NDhwrCSfxAQ8YXxfwBQ8Y
bxsPF-ADDxg1MRcZBAAAGAARARgABBIABgQAERumEA8bAAMBSwkPGwA8T7APGC4dAANfPoAPGE8a
AABOTxsOYNUADwQABj4bDkDrAA8EAAoQGwMKBxAADwQADBINCAoPMQCOYS0MLQwPGr2OEg2oCgHI
jhANzsITHgwAMA4aQDnoARgKggoOTQ4aYE4aDQBiAE4agEoADAAzEErwCgAl8AcIABAtBgBfTgrw
CEqnCisWIJgIIw8dqAoACQARHxQAEQYLABAfFgAACwAhLx4WAEAEDx0NTiABLgABDQAANRICMgBQ
Ag8dDW8YABMCOwAAHAABNgATADYABToAABEAEY8cADjQDg3iIBAN1QpwDB8eHBscGx8AUcAODasN
zQoQCxMAEhwMACIMGyAAEwofADDQDg0RACEMDekKEQsoAADsCh9t7AotQg8iTyX4ESEPIsEKJyQP
EAARD2geCRIAAHweDzIADAIiAADiCSMPITIAKiQPFAACJgAYJBQAFx86AAJiEgc7AAAVCwEbCydA
Dj4AABkAEJB2AAMZABgfGQBEcA8iHxkAKQ8kGwARUKoAOyQPJVEABCEAU14NHyMN3wUJGwBTXQwP
JAzYBVMcDyQcCwIAA8wFJBwLAgBGDQ4agBAAALcBFaAPABANBewVDSgAAKIFjxrwAY4a8AOKhwsr
GSqHCxIplg0lDyiXDQF2HAKaDQKAHBQNhwsBDgABEgABhBcwDA8owwMgDB3m5iULDAIAEB3o5ikM
CwIAER2aCwomADUqcAooAHEdHiqwCh4NDAAgDR67EyEODTcEMSrwAzcEAPMDACwOANECEwYDBBEI
J_sABgDPCvAKDhrwCg4K8AwKqgtQ8SZUKfAIGQsMChjwBBkrDCoY8AAZSwxKGLAZawxqGHAZiwyK
GEAIHIsMihsIMAgaHFscC1obGbALkDocGxwqGxobOZkLUEocahtJuRqESguKC0kIDkAJAGBQCEoL
agsNkwMJACQOYAkAUHAISgtKGwDzGHAISmtJCA6ACDoLaQs5CA6QCBoLiQsZCB6QCAoLqQsJCA6g
CAvJC5AwL-BN5AAdgVUO8AsODxEPARUREcMZIQgOMTw3Dw8NCwABNgIhHxBnOxcNCwAB0g9QLxAP
ES8YAAYLAAAhBXEOPxAPET8P0RoSL0gAExAcADMADj8RAAEgABQAOAADIAAz0A4-EAAAHwAR0B4A
FU8eADOwDj8QAAAeABGwHgAVbx4AEZAeABF-HAChkA4fEB8Rjh8QHxsAEHD0LjERzh9SawDmPEH_
AQ8QGQCP-w0DHzWA-QMqwx9hcS8T8AgeCguAFB8S8AQeLxU4O3AfEvAAHk8VbztgHxKwHm8VdTtg
HxJwHo8VBDuAHxJADZ8VHxYjO4ANMA0PFm8VHzYAIBVvTQowDzUgvgkyFj8VOoEhPxQHLTE1IA2y
CxAVRoEBPvIhFR4WACAvFCU8NA8VLiQAEBVn8gAkADMODB5OAHIMOxxrHD4MRwDxHgxrHCscbgwN
CiANmyyeDQowHYsMjh0aQAodawxuHSpwCh1LDE4dKrAKHSsMLmMX-wEdCwwOHSrwBAotKvAIKvBT
JwEdwGr-GAGgDv8aAQ8XgEAIIBvvQgkwDXANEztAzxoPG6gAsWANLxkPG68aDxsuDgBTPxmvGz4K
AADDOi8PGg4AZzSfGj6iADIargygAEEfGQzOYQEQYIITEe5dAf8AcA3_AQ0bgP0BG6D7AfBMKAEd
gIqvHfABDh8ftToCohoz4A4vDgBRLx4PHMAOABNvDgAzoA4-DgAAuBoRgA4AE48OADNgDk8OAPAC
Tx4PHEAObyD-HwAPHDANXx50GjAPH16gMiMNTw4AUU4NHzVADgATbw4AM2ANPw4AED4thAEOABNP
DgAzoA0vDgAQLh0yAQ4AEy8OADPgDR8OABAeWB4RAQ8AFA8PADMDDQ8PABAODwATBQ8AAAwAEAeN
CY4fNfAJDRzwC4sRDzwBDlE3LyLwCWATAL9oQvAHDh_HEwDGExIvhBNSIfADDj_BE2Ah8AEOTyRc
f2APIeAOXyQmOlIPIcAOX0AAAHETYiGgDR8lPzoA0iQ-Ix8kDZANHyMfJQ83AFAkDyMfJP8BQYAN
PyPUOiQkPg4AHyQOACGyHyMfJA4MTyMMDhxXAPEEHD4MLyMMPhwNDzWQDV4MDyMMXn0B8RReDF4N
G8ANTgxODRvgDT4MPg0b8AENLgwuDRvwAw0eDB4NG0gRzw4NG-AHLRvwCSvwGU4BHZFPDye-LvAA
DycqRqMpDy4PNdAPJw8pDwCAJw8u0A8nHykkRkAPKR8nIABDsA8nLxEAkC8nDy6wDyc-KcB-MQ8p
PyAAQ5APJ08RAENPJw8uDwARXw0AAFgfIydfHgBSXycPLnAeABNvLQAA830jJ18RAAAgAAAPABAq
fkYRb5wAdEAPLl8oDykeAAAvABAuSwAEQAAAJ34BIgAVTyIAEHAiABNvHgAScC8AIk8nLwAArQAj
Lj8RABE-IgBAkA8uL1EAEifeAADvACMuHxEAER8iADCwDy44CSKPJyABADEBEy4PAGAuHzXQzy76
Bj-O8DG6CE7wD1IaOfAEKhw7GfAAGlxLGbAafGsZgAqciwhwCStse8AbwGAJWzxrKQhgCXscK8Wb
4lAJm2o5CFAJm3opCA5ABwBQUAmLehkROTB7ihkwIwEHAFBwCCkrmqVEIAhZDwBQgAhpehmXCCBp
aqxE8AQIaVoZCA6wCMkIHsAIuQgO4Ah5r5ZfeD7wAn6hHR-wEFM-D-AIDj8RHvAFDm0O8AMPDh8Q
TR4PDvACDB8QbgxOAfAEDC8QfgzwAAwrfgwPNdAMO44PDQYA8gYKDzWwDEuODAqwDEueCgmQDEuu
DAoGAPAXCXAMW64cCnAMS84MCglQCiwb3hwKUApM3hwKCUAKbL4sCkAKbJ6pn-8KCvwGCglAGvwC
GhlQCSqsOimAGapJ0KnwMsgAHTCPTxTFIfAdFh8T8AIeTxY_DxPgHm8WTg8TsB0fFV8Wbg2AHU8V
LxaeDWANjxW_DVANjL4XH7ANjK4dDxIwDZyeLeaPqA2cjj0LCiANjJ4HAP8ifB1_PQsaMA0sbW4t
CxpQG30_PRsacAobvRsqoAobfRsq4AobLSsq8AMKKzrwByrwVL0AHfATb48Z8AIejxsPGPAADp8b
HxoPGNAOjxtPGg8YsA6PGy4-Gsk0UI8bTi8aEyJQgA5-G24lADAPF3ArElCODxofGBkAhWAPGB8a
Lxu_DgAmTxoMAE8-Gr4vDAABPy8azgwAAgBhACHOLQ0AQw0PGh0LADBNnk0IAP8TcA8XPV5tDB81
cAz9AQwLkAztDBugLK0MG8AbrBvwAavwMQQBHTCJjx4EAfEMIB4-HZAdHx_PIF8fHWANTG8gHmwN
UA1cO44cTAcwbN4dYQcwXO4dHqHADUzuLQoJIA0sPb49TgL-N22uLQoZQAptji0KGWAKXY4tCgmA
Cl1uLQoZkApNXi0KGbAKTS49ChnACq0KGeAKjQoZ8AEKbQoZ8AMaLRoZ8AUJKinwCCl7CR8wNj8j
RgMRJUYD8Ase8AIPIg8kfQwPIvAACzxNLAvQC1w9PAvACyPz8g4LDzWgC1xOTAugC0xuPAsKkA8h
Gyx_LAsKkAk7jgcAIp4cBwAQKwYAMI4rCQcAIH47BwAxS15LBwAiTlsHAP8gSwkaoAlLLlsJCrAJ
Wx5bCQrACbsJGtAJmwka8AAJewka8AIZOxka8AQKOSrwBzreER-wCW1-J-AEDn8qPuAOrR8pDsAO
vSwOoA4cnQrykTyNXA5gDlxtbKAPQWxdXA4UBmAObF8oTC4PLkNMvyg_OAY1DizPDABDLs8oTgsA
JT6-CwAlTq8LACBejwsAAU4GQG5fKF4WAP8RYA8u-gILHzVwC-4ACxqQC94LGrALrhsa0Ksq8ACq
8FDvBTpQbT02fX0=
:: gfx/1.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA5LTEzIDEzOjUxOjM5Iixtb2RpZmllZD0iMjAyNC0w
OS0xMyAxMzo1MzoxOCIscmV2aXNpb249OV1dbHo0AG0AAAAFMQAA8xR7WzBdPXtibXA9cHh1AEMg
EBAE8PAsZmxhZ3M9MCxwYW5feAgAz3k9MCx6b29tPTh9LDEA----------------------------
------------------------------------51BtPTh9fQ==
:: gfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTAzLTMwIDA1OjM5OjM0Iixtb2RpZmllZD0iMjAyNC0w
OS0xOCAxMDoyMToyMyIsc3RvcmVkPSIyMDI0LTAzLTMwIDA1OjM5OjM0Il1d
:: map/
:: map/0.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTAzLTMwIDA1OjM5OjM0Iixtb2RpZmllZD0iMjAyNC0w
OS0wMSAwNzozNDozNSIscmV2aXNpb249MzA3NV1dbHo0AMEAAABZEAAA8Ah7e2JtcD11c2VyZGF0
YSgiaTE2IiwzMgMALyIwAQD-------_x0zIwMDAzMDAwNDAwMDYMAC81MIAAWxMxCAATNYAALzYw
AQBbFzb8ABMxDAAPAQBVBHwBAAABEzAMAA_AAVkTMXQAEzB4ABcxjAAPAAFVEzaEAAQMAC81MAEA
--------nvEJIiksaGlkZGVuPWZhbHNlLHBhbl94PTQ3CQDSeT0wLHRpbGVfaD0yOQoAEHcKAIB6
b29tPTF9fQ==
:: map/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTAzLTMwIDA1OjM5OjM0Iixtb2RpZmllZD0iMjAyNC0w
OS0xOCAxMDoyMToyMyIsc3RvcmVkPSIyMDI0LTAzLTMwIDA1OjM5OjM0Il1d
:: pal/
:: pal/0.pal
b64$LS1bW3BvZCxiZ19jb2xvcj0wLGJsYWNrZXN0X2NvbG9yPTAsY3JlYXRlZD0iMjAyNC0wOC0y
MyAxODo1OTowOSIsaGlkZGVuPXtbMF09dHJ1ZSxmYWxzZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRy
dWUsdHJ1ZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSx0cnVlLHRydWUsdHJ1ZSx0cnVl
LHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0
cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1
ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsZmFsc2UsZmFsc2UsZmFs
c2UsZmFsc2UsZmFsc2UsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRy
dWUsdHJ1ZSx0cnVlfSxoaWRkZW5fdG9nZ2xlcz17WzBdPXRydWUsdHJ1ZSx0cnVlLHRydWV9LGlj
b249dXNlcmRhdGEoInU4IiwxNiwxNiwiMDAwMTAxMDEwMTAxMDEwMTAxMDEwMTAwMDAwMDAwMDAw
MDAxMDcwNzA3MDcwNzA3MDcwNzA2MDEwMDAwMDAwMDAwMDEwNzA3MDcwNzA3MDcwNzA3MDYwNjAx
MDAwMDAwMDAwMTA3MDcwNzA3MDcwNzA3MDcwNjA2MDYwMTAwMDAwMDAxMDcwNzA3MDcwNzA3MDcw
NzA2MDYwNjA2MDEwMDAwMDEwNzA3MDcwNzA3MDcwNzA3MDcwNzA3MDcwMTAwMDAwMTA3MDcwNzA3
MDcwNzA3MDcwNzA3MDcwNzAxMDAwMDAxMDcwNzA2MDYwMTAxMGQwZDAxMDEwNzA3MDEwMDAwMDEw
NzA3MDYwNjAxMDEwZDBkMDEwMTA3MDcwMTAwMDAwMTA3MDcwMTAxMDcwNzA2MDYwZDBkMDcwNzAx
MDAwMDAxMDcwNzAxMDEwNzA3MDYwNjBkMGQwNzA3MDEwMDAwMDEwNzA3MGQwZDAxMDEwZDBkMDYw
NjA3MDcwMTAwMDAwMTA3MDcwZDBkMDEwMTBkMGQwNjA2MDcwNzAxMDAwMDAxMDcwNzA3MDcwNzA3
MDcwNzA3MDcwNzA3MDEwMDAwMDEwNzA3MDcwNzA3MDcwNzA3MDcwNzA3MDcwMTAwMDAwMTAxMDEw
MTAxMDEwMTAxMDEwMTAxMDEwMTAxMDAiKSxsb2NrZWQ9e1swXT1mYWxzZSxmYWxzZSxmYWxzZSxm
YWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxz
ZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxm
YWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxz
ZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxm
YWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxz
ZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxm
YWxzZSxmYWxzZSxmYWxzZSxmYWxzZX0sbW9kaWZpZWQ9IjIwMjQtMDktMTggMTA6MjE6MjMiLG9r
cGFsX3ZlcnNpb249IjEuMC4zIixyZXZpc2lvbj01ODcwLHRlc3RfY3ViZV9jb2xvcnM9e1swXT17
MTUsMzEsNH0sezMxLDQsMjB9LHs0LDIwLDIxfSx7MTAsOSwyNX0sezksMjUsMjR9LHs4LDI0LDJ9
LHsyNiwxMSwyN30sezExLDI3LDN9LHsyNywzLDE5fSx7MjgsMTcsMTl9LHsyOCwxMiwxNn0sezEy
LDE2LDF9LHs2LDI5LDEzfSx7MjksMTMsMTh9LHsxMywxOCwxfSx7NywyMywxNH0sezIzLDE0LDEz
fSx7MTQsMzAsMTh9LHs3LDYsMjJ9LHs2LDIyLDV9LHsyMiw1LDIxfSx7MSwxLDF9LHsxLDEsMX0s
ezEsMSwxfX0sd2hpdGVzdF9jb2xvcj03XV1sejQA8gEAABUCAAD9BXVzZXJkYXRhKCJpMzIiLDY0
LCIwAQDwDTRjMzY1YTAwODIzZjM4MDA5ODQ3M2YwMDlmNTEIAJE2NDQ4NzcwMGYBAPA4MDA3NDFm
NjUwMGE4MjU5MjAwZTI0OWJhMDBlZjgzYzUwMGY4YmJkOTAwNzcyYzE2MDBhMjMyMTkwMGQ1NGYy
MTAwZjM4MjVQAPAkY2JjOWMwMDY3NDkxMzAwOWM3MTFhMDBkNmEyMjUwMGVkYzQ1NDAwZmJlMTk5
MDAyZDUzGADwFjMxNmUzMjAwNTBhMzJjMDA4N2Q0NTYwMGJmZjI5NTAwMTY1ODUIAPANNzc5N2Qw
MDIwYjRiMzAwNWNkOGQyMDBhY2Y2ZvgAsDcyMjg2MDA1ZTI2IADQOGQzYmVkMDBhZTgxZrAAsDhj
NGZjMDA0ZjUzIAGROTA5NDlhMDBiAQCAMDBkZWRhZDCoAIBlOWUwMDAxZAIAQDAwMmICAEAwMDNk
AgBAMDA1MwIAQDAwYjUCAABQAKA0YjNlMDA3MzZh4ADwEzllOGY3NDAwYWE5ZDg1MDBiZWI1YTQw
MDU4NTk1ZDAwNjgCAFEwMDZmNrkAETcBAFAwMDg2OK8B8QYwM2YyNzJhMDA1YjM3MzQwMDY2NDBg
AFAwNDk0NCgAIDVjEAGANDAyYzRkIik=
:: pal/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA4LTIzIDE4OjU0OjE5Iixtb2RpZmllZD0iMjAyNC0w
OS0xOCAxMDoyMToyMyJdXQ==
:: sfx/
:: sfx/0.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTAzLTMwIDA1OjM5OjM1Iixtb2RpZmllZD0iMjAyNC0w
OS0xOCAxMDoyMToyMyIscmV2aXNpb249NTgyNV1dbHo0ABoBAABSCAAA8CdweHUAAygAAAQABA9A
EAIOAAGgASACoA4ADxAADfDKAQIDBAUGBwAP-5AICQoLDwwPDQ8ODw8QAPAADQ8RDxIPEw8UDxUP
Fg8XEwDxAQ8YDxkPGg8bDxwPHQ8eDx8UAPEAIA8hDyIPIw8kDyUPJg8nFADxACgPKQ8qDysPLA8t
Dy4PLxQA8QAwDzEPMg8zDzQPNQ82DzcUAP8FOA85DzoPOw88Dz0PPg8-AA--8P8BAOv-J1oBEAYP
IBABIAEgAfAAAhACDBABIA8hIAEwD0Dwww8oD--wxg-4Cg--D4AP9w8NAfAJARAGDDAAAh9EMAAc
H0AwAPIf-wEA3L-4D0AADUD--7DwcAoA--9kH-8BAP_ZUP----8g
:: sfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTAzLTMwIDA1OjM5OjM0Iixtb2RpZmllZD0iMjAyNC0w
OS0xOCAxMDoyMToyMyIsc3RvcmVkPSIyMDI0LTAzLTMwIDA1OjM5OjM0Il1d
:: src/
:: src/logic/
:: src/logic/creation.lua
--[[pod_format="raw",created="2024-08-30 06:25:09",modified="2024-09-18 10:21:23",revision=3229]]
--- Board Creation Logic


function logic_cells(stats)
	local grid
	local size
	if stats.tiling == "square" then
		grid = sgrid_new()
		local height = grid:max_height() - 1
		for x = 0, stats.columns - 1 do
			for y = 0, height do
				grid:set(pos(x, y), true)
			end
		end
	elseif stats.tiling == "hex" then
		grid = hgrid_new()
		local height = (grid:max_height() - 1) * 2
		for x = 0, stats.columns - 1 do
			for y = 0, height, 2 do
				grid:set(pos(x, y - (x % 2)), true)
			end
		end
	end
	return grid
end


-------------------------------------------------------------------------


function logic_new_cell_column(stats, cells)
	stats.columns += 1
	if cells:tiling() == "square" then
		local height = cells:max_height() - 1
		for y = 0, height do
			cells:set(pos(stats.columns - 1, y), true)
		end
	elseif cells:tiling() == "hex" then
		local height = (cells:max_height() - 1) * 2
		for y = 0, height do
			local x = stats.columns - 1
			cells:set(pos(x, y - (x % 2)), true)
		end
	end
end

------------------------------------------------------------------------


local function random_gem(stats)
	return math.random(gem_air, gem_air - 1 + stats.number_of_colours)
end


function logic_fill_gem_at(stats, cells, gems, marks, p)
	local cell = cells:get(p)
	if not cell then
		return
	end
	local test = (gems:tiling() == "square") and logic_test_sqr_match_at or logic_test_hex_match_at
	local gem = gems:get(p)
	if not gem then
		local attempts = 0
		local found = false
		while attempts < 16 and not found do
			gem = random_gem(stats)
			gems:set(p, gem)
			found = not test(gems, p)
			attempts += 1
		end
		if attempts == 16 then
			gem = gem_gift
			gems:set(p, gem)
		end
	end
end


function logic_fill_gems(stats, cells, gems, marks)
	-- TODO: transform into a coroutine
	-- TODO: fill in reverse gravity order
	if gems:tiling() == "square" then
		local height = gems:max_height() - 1
		for x = 0, 12 do
			for y = 4, height do
				logic_fill_gem_at(stats, cells, gems, marks, pos(x, y))
			end
		end
	elseif gems:tiling() == "hex" then
		cells:foreachpos(
			function(p, _)
				if p.y < 2 * 5 then
					return
				end
				logic_fill_gem_at(stats, cells, gems, marks, p)
			end
		)
	end
end

:: src/logic/matching.lua
--[[pod_format="raw",created="2024-08-24 08:12:55",modified="2024-09-18 10:21:23",revision=4264]]
--- Matching Logic

-- The matching algorithm has two phases:
--
-- 1. First, a linear sweep through all the gems, and for each gem involved in a match
--    creates a mark registering which direction(s) matched.
-- 2. Then a flood-fill algorithm is used to group matches together.


local function logic_is_matching(gem1, gem2)
	if (not gem1) or (not gem2) then
		return false
	end
	
	-- Only colored gems can match.
	if (gem1 < gem_color_first) or (gem1 > gem_color_last) then
		return false
	end
	if (gem2 < gem_color_first) or (gem2 > gem_color_last) then
		return false
	end

	return (gem1 == gem2)
end


--------------------------------------------------------------------------


local function test_3(gems, p0, p1, p2)
	local gem0 = gems:get(p0)
	local gem1 = gems:get(p1)
	local gem2 = gems:get(p2)
	return logic_is_matching(gem0, gem1)
		and logic_is_matching(gem0, gem2)
		and logic_is_matching(gem1, gem2)
end


local function test_4(gems, p0, p1, p2, p3)
	local gem0 = gems:get(p0)
	local gem1 = gems:get(p1)
	local gem2 = gems:get(p2)
	local gem3 = gems:get(p3)
	return logic_is_matching(gem0, gem1)
		and logic_is_matching(gem0, gem2)
		and logic_is_matching(gem0, gem3)
		and logic_is_matching(gem1, gem2)
		and logic_is_matching(gem1, gem3)
		and logic_is_matching(gem2, gem3)
end


function logic_test_sqr_match_at(gems, p)
	local S = p + pos(0, 1)
	local SS = p + pos(0, 2)
	local N = p + pos(0, -1)
	local NN = p + pos(0, -2)
	local E = p + pos(1, 0)
	local EE = p + pos(2, 0)
	local W = p + pos(-1, 0)
	local WW = p + pos(-2, 0)
	local SE = p + pos(1, 1)
	local SW = p + pos(-1, 1)
	local NE = p + pos(1, -1)
	local NW = p + pos(-1, -1)
	return test_3(gems, SS, S, p) or test_3(gems, S, p, N) or test_3(gems, p, N, NN)
		or test_3(gems, EE, E, p) or test_3(gems, E, p, W) or test_3(gems, p, W, WW)
		or test_4(gems, p, S, SE, E) or test_4(gems, p, S, SW, W) 
		or test_4(gems, p, N, NE, E) or test_4(gems, p, N, NW, W)
end


function logic_test_hex_match_at(gems, p)
	local S = p + pos(0, 2)
	local S_S = p + pos(0, 4)
	local N = p + pos(0, -2)
	local N_N = p + pos(0, -4)
	local SE = p + pos(1, 1)
	local SE_SE = p + pos(2, 2)
	local SW = p + pos(-1, 1)
	local SW_SW = p + pos(-2, 2)
	local NE = p + pos(1, -1)
	local NE_NE = p + pos(2, -2)
	local NW = p + pos(-1, -1)
	local NW_NW = p + pos(-2, -2)
	local E = p + pos(2, 0)
	local W = p + pos(-2, 0)
	return test_3(gems, S_S, S, p) or test_3(gems, S, p, N) or test_3(gems, p, N, N_N)
		or test_3(gems, SE_SE, SE, p) or test_3(gems, SE, p, NW) or test_3(gems, p, NW, NW_NW)
		or test_3(gems, NE_NE, NE, p) or test_3(gems, NE, p, SW) or test_3(gems, p, SW, SW_SW)
		or test_4(gems, p, SE, S, SW) or test_4(gems, p, NE, N, NW)
		or test_4(gems, p, NE, E, SE) or test_4(gems, p, NW, W, SW)
end


local function check_3_and_mark(gems, p0, p1, p2, mark, marks)
	if test_3(gems, p0, p1, p2) then
		marks:merge(p0, mark)
		marks:merge(p1, mark)
		marks:merge(p2, mark)
	end
end


local function check_4_and_mark(gems, p0, p1, p2, p3, mark, marks)
	if test_4(gems, p0, p1, p2, p3) then
		marks:merge(p0, mark)
		marks:merge(p1, mark)
		marks:merge(p2, mark)
		marks:merge(p3, mark)
	end
end


local function mark_sgrid_matches_at(gems, p0, marks)
	check_3_and_mark( gems,
		p0,
		p0 + pos(0, 1),
		p0 + pos(0, 2),
		{ name = "matching", vertical = true }, marks )
	check_3_and_mark( gems,
		p0,
		p0 + pos(1, 0),
		p0 + pos(2, 0),
		{ name = "matching", horizontal= true }, marks )
	check_4_and_mark( gems,
		p0,
		p0 + pos(1, 0),
		p0 + pos(0, 1),
		p0 + pos(1, 1),
		{ name = "matching", vertical = true, horizontal = true }, marks )
end


local function mark_hgrid_matches_at(gems, p0, marks)
	check_3_and_mark( gems,
		p0,
		p0 + pos(0, 2),
		p0 + pos(0, 4),
		{ name = "matching", vertical = true }, marks )
	check_3_and_mark( gems,
		p0,
		p0 + pos(1, 1),
		p0 + pos(2, 2),
		{ name = "matching", horizontal_SE = true }, marks )
	check_3_and_mark( gems,
		p0,
		p0 + pos(1, -1),
		p0 + pos(2, -2),
		{ name = "matching", horizontal_NE = true }, marks )
	local p1 = p0 + pos(1, 1)
	local p2 = p0 + pos(1, -1)
	local p3 = p0 + pos(2, 0)
	if test_4(gems, p0, p1, p2, p3) then
		marks:merge(p0, { name = "matching", vertical = true, horizontal_NE = true, horizontal_SE = true})
		marks:merge(p1, { name = "matching", vertical = true, horizontal_SE = true })
		marks:merge(p2, { name = "matching", vertical = true, horizontal_NE = true })
		marks:merge(p3, { name = "matching", vertical = true, horizontal_NE = true, horizontal_SE = true})
	end
end


local function mark_all_matches(gems)
	local marks = gems:new_grid()
	if gems:tiling() == "square" then
		gems:foreachpos(
			function(p, _gem)
				mark_sgrid_matches_at(gems, p, marks)
			end
		)
	elseif gems:tiling() == "hex" then
		gems:foreachpos(
			function(p, _gem)
				mark_hgrid_matches_at(gems, p, marks)
			end
		)
	end
	return marks
end


---------------------------------------------------------------------------


local function group_this_match(cells, gems, marks, p)
	-- A simple flood-fill algorithm to group all
	-- intersecting linear matches together.
	local colour = false
	local positions = {}
	local remaining = { p }
	while #remaining > 0 do
		local current = deli(remaining)
		local gem = gems:get(current)
		if not colour then
			colour = gem
		end
		local mark = marks:get(current)
		if mark and mark.name == "matching"
			and (not mark.counted)
			and logic_is_matching(colour, gem)
		then
			colour = gem
			add(positions, current)
			marks:merge(current, { counted = true })
			local cell = cells:get(current)
			local neighbours = gems:neighbours(current)
			foreach(
				neighbours,
				function(n)
					local s = marks:get(n.position)
					if not s then
						return
					end
					if s and s.name == "matching"
						and (not s.counted)
						and s[n.direction]
					then
						add(remaining, n.position)
					end
				end
			)
		end
	end
	return { colour = colour, positions = positions }
end


function logic_find_matches(cells, gems)
	local marks = mark_all_matches(gems)
	local matches = {}
	marks:foreachpos(
		function(p, mark)
			if mark and mark.name == "matching"
				and (not mark.counted)
			then
				local match = group_this_match(cells, gems, marks, p)
				add(matches, match)
			end
		end
	)
	return matches, marks
end
:: src/logic/mechanics.lua
--[[pod_format="raw",created="2024-08-30 06:41:59",modified="2024-09-18 10:21:23",revision=3003]]
--- Core Mechanics Logic


function logic_mark_gravity(cells, gems, marks, gravity)
	local some_gems_are_falling = false
	gems:foreachpos(
		function(p, gem)
			local below = p + gravity
			local distance = 0
			local cell_below = cells:get(below)
			while cell_below do
				if (not gems:get(below)) then
					some_gems_are_falling = true
					distance += 1
				end
				below += gravity
				cell_below = cells:get(below)
			end
			if distance > 0 then
				marks:set(p, { name = "falling", target = p + distance * gravity })
			end
		end
	)
	return some_gems_are_falling
end


function logic_enact_gravity(gems, marks)
	local fell_gems = {}
	marks:foreachpos(
		function(p, mark)
			if mark.name == "falling" then
				local new_p = mark.target
				add(fell_gems, { gem = gems:get(p), pos = new_p })
				gems:del(p)
				marks:del(p)
			end
		end
	)
	foreach(fell_gems,
		function(fell_gem)
			gems:set(fell_gem.pos, fell_gem.gem)
			marks:del(fell_gem.pos)
		end
	)
end


------------------------------------------------------------------------


function logic_mark_swap(gems, marks, source, target)
	local gem0 = gems:get(source)
	local gem1 = gems:get(target)
	local test = (gems:tiling() == "square") and logic_test_sqr_match_at or logic_test_hex_match_at
	gems:set(source, gem1)
	gems:set(target, gem0)
	local matched = test(gems, target) or test(gems, source)
	gems:set(source, gem0)
	gems:set(target, gem1)
--	if not matched then
--		return false
--	end
	marks:set(source, {
		name = "swapping",
		selected = true,
		target = target,
	})
	marks:set(target, {
		name = "swapping",
		target = source,
	})
	return true
end


function logic_enact_swap(gems, marks)
	local reinsert = {}
	marks:foreachpos(
		function(p, mark)
			if mark.name == "swapping" then
				add(reinsert, { gem = gems:get(p), position = mark.target })
				gems:del(p)
				marks:del(p)
			end
		end
	)
	foreach(
		reinsert,
		function(r) gems:set(r.position, r.gem) end
	)
end


-------------------------------------------------------------------------


function logic_enact_clear(gems, marks)
	marks:foreachpos(
		function(p, mark)
			if mark.name == "matching" then
				gems:del(p)
				marks:del(p)
			end
		end
	)
end


-------------------------------------------------------------------------


function logic_push_up(stats, cells, gems, marks)
	if gems:tiling() == "square" then
		local width = cells:max_width() - 1
		local height = cells:max_height() - 1
		for x = 0, width do
			for y = 0, height do
				local position = pos(x, y)
				local below = pos(x, y + 1)
				gems:set(position, gems:get(below))
				marks:set(position, marks:get(below))
			end
		end
		for x = 0, 12 do
			logic_fill_gem_at(stats, cells, gems, marks, pos(x, height))
		end
	elseif gems:tiling() == "hex" then
		local width = cells:max_width() - 1
		local height = (cells:max_height() - 1) * 2
		cells:foreachpos(
			function(position, _)
				local below = pos(position.x, position.y + 2)
				gems:set(position, gems:get(below))
				marks:set(position, marks:get(below))
			end
		)
		cells:foreachpos(
			function(position, _)
				if position.y >= height - 1
				then
					logic_fill_gem_at(stats, cells, gems, marks, position)
				end
			end
		)
	end
end

:: src/logic/shuffle.lua
--[[pod_format="raw",created="2024-09-13 09:11:02",modified="2024-09-18 10:21:23",revision=1849]]

:: src/logic/spells.lua
--[[pod_format="raw",created="2024-08-30 06:37:36",modified="2024-09-18 10:21:23",revision=1813]]
--- Spell Logic


function logic_gain_mana(stats, matches)
	local gained = false
	foreach(
		matches,
		function(match)
			local count = #(match.positions)
			stats.colours[match.colour] += count
			stats.experience += 1 + 2 * (count - 3)
			if stats.in_cascade then
				stats.experience += 1
			end
			stats.in_cascade = true
			gained = true
		end
	)
	return gained
end

:: src/logic/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA4LTMwIDA2OjI0OjM5Iixtb2RpZmllZD0iMjAyNC0w
OS0xOCAxMDoyMToyMyJdXQ==
:: src/constants.lua
--[[pod_format="raw",created="2024-08-24 15:17:10",modified="2024-09-18 10:21:23",revision=4500]]
--- Match3 Global Constants


-- Gems and cells ------------------------------------------------------

-- Color gems
gem_air = 0x01
gem_fire = 0x02
gem_day = 0x03
gem_earth = 0x04
gem_water = 0x05
gem_night = 0x06
gem_white = 0x07
gem_black = 0x08

gem_color_first = gem_air
gem_color_last = gem_black

-- Black gems
gem_gift = 0x08
gem_bomb = 0x09
gem_cat = 0x0a
gem_bat = 0x0b
gem_robot = 0x0c
gem_robot_asleep = 0x0d
gem_robot_asleep2 = 0x0e

gem_names = {
	[gem_air] = "Air",
	[gem_fire] = "Fire",
	[gem_day] = "Day",
	[gem_earth] = "Earth",
	[gem_water] = "Water",
	[gem_night] = "Night",
	[gem_white] = "White",
	[gem_black] = "Black",
}

:: src/gfx.lua
--[[pod_format="raw",created="2024-08-24 12:06:13",modified="2024-09-18 10:21:23",revision=6410]]
--- Graphics


local cell_width = 29
local cell_height = 29


function gfx_draw_cells(cells, stats)
	local function draw_cell(p, _)
		local has_cell = cells:get(p)
		if p.y == -1 then
			if cells:tiling() == "square" then
				has_cell = cells:get(pos(p.x, p.y + 1))
			elseif cells:tiling() == "hex" then
				has_cell = cells:get(pos(p.x, p.y + 2))
			end
		end
		if not has_cell then
			return
		end
		local x, y = cells:coords_cell(p)
		local sprite
		if cells:tiling() == "square" then
			sprite = 32
			local offset = (stats.distance) % 2
			sprite += (p.x + p.y + offset) % 2
		elseif cells:tiling() == "hex" then
			sprite = 40
			local offset = (stats.distance) % 3
			sprite += (p.y + (p.x * 3) - offset) % 3
		end
		spr(sprite, x, y)
	end
--	if cells:tiling() == "square" then
--		local width = cells:max_width() - 1
--		local height = cells:max_height() - 1
--		for x = 0, width do
--			for y = -1, height do
--				draw_cell(pos(x, y))
--			end
--		end
--	elseif cells:tiling() == "hex" then
		cells:foreachpos(draw_cell)
--	end
end


-----------------------------------------------------------------------


local sprites_color_gem = {
	[gem_air] = 1,
	[gem_fire] = 2,
	[gem_day] = 3,
	[gem_earth] = 4,
	[gem_water] = 5,
	[gem_night] = 6,
	[gem_white] = 7,
	[gem_black] = 8,
}


local sprites_other_gem = {
	[gem_gift] = 8,
	[gem_bomb] = 9,
	[gem_cat] = 10,
	[gem_bat] = 11,
	[gem_robot] = 12,
	[gem_robot_asleep] = 13,
	[gem_robot_asleep2] = 13,
}

--color_gem_skin = math.random(0, 14)
color_gem_skin = 0
local function gem_sprite(gem)
	local base = 128 + color_gem_skin * 8
	if gem >= gem_color_first and gem <= gem_color_last then
		return sprites_color_gem[gem] - 1 + base
	else
		return sprites_other_gem[gem]
	end
end


local function scaled_gem(sprite, x, y, size)
	local w, h = flr(29 * size + 0.5) // 2 * 2 + 1, flr(29 * size + 0.5) // 2 * 2 + 1
	local x, y = x + ((29 - w) / 2), y + ((29 - h) / 2)
	sspr(sprite, 0, 0, 29, 29, x, y, w, h)
end


local function draw_exploded_gem(gem, x, y, clock, new_clock)
	local size = 32 * new_clock
	local colour = 10 + (gem - 1) * 5
	oval(x - size, y - size, x + 29 + size, y + 29 + size, colour + 1)
	if clock < 0.25 then
		ovalfill(x + 2, y + 2, x + 25, y + 25, 7)
	elseif clock < 0.50 then
		ovalfill(x + 2, y + 2, x + 25, y + 25, colour + 2)
	elseif clock < 0.75 then
		ovalfill(x + 1, y + 1, x + 27, y + 27, colour + 1)
	elseif clock < 1.0 then
		ovalfill(x, y, x + 29, y + 29, colour)
	end
end


function gfx_draw_gems(cells, gems, states, clock)
	local function draw_gem(p, gem)
		local x, y = gems:coords_gem(p)
		local sprite = gem_sprite(gem)
		local cell = cells:get(p)
		local state = states:get(p)
		if not state or state.name == "broken" then
			spr(sprite, x, y)
		elseif state.name == "new" then
			scaled_gem(sprite, x, y, clock)
		elseif state.name == "matching" then
		elseif state.name == "falling" or state.name == "swapping"
		then
			local dest_x, dest_y = gems:coords_gem(state.target)
			local ix, iy = x + clock * (dest_x - x), y + clock * (dest_y - y)
			spr(sprite, ix, iy)
		elseif state.name == "moving" then
			x, y = gems:coords_gem(state.source, gem)
			local dest_x, dest_y = gems:coords_gem(state.target)
			scaled_gem(gem_sprite(state.target_gem), dest_x, dest_y, 1.0)
		end
	end
	gems:foreachpos(draw_gem)
	local new_clock = clock * clock * clock * clock
	gems:foreachpos(
		function(p, gem)
			local x, y = gems:coords_gem(p)
			local sprite = gem_sprite(gem)
			local cell = cells:get(p)
			local state = states:get(p)
			if state and state.name == "matching" then
				draw_exploded_gem(gem, x, y, clock, new_clock)
			elseif state and state.name == "moving" then
				x, y = gems:coords_gem(state.source, gem)
				local dest_x, dest_y = gems:coords_gem(state.target)
				local ix, iy = x + clock * (dest_x - x), y + clock * (dest_y - y)
				spr(gem_sprite(state.moving_gem), ix, iy)
			end
		end
	)
end


-----------------------------------------------------------------------


function gfx_draw_turns(ox, oy, turn, anim_turn)
	spr(64, ox, oy)
	local hundreds = (turn // 100) % 10
	local tens = (turn // 10) % 10
	local ones = turn % 10
	local anim = anim_turn // 2
	pal(7, 1)
	clip(ox + 7, oy + 3, ox + 7 + 3 * 8, oy + 3 + 8)
	-- hundreds
	if anim == 0 or (turn % 100) > 0 then
		spr(65 + hundreds, ox + 7, oy + 6)
	else
		spr(65 + hundreds, ox + 7, oy + 6 + anim)
		spr(65 + ((hundreds - 1) % 10), ox + 7, oy + 6 + anim - 10)
	end
	-- tens
	if anim == 0 or ones > 0 then
		spr(65 + tens, ox + 7 + 8, oy + 6)
	else
		spr(65 + tens, ox + 7 + 8, oy + 6 + anim)
		spr(65 + ((tens - 1) % 10), ox + 7 + 8, oy + 6 + anim - 10)
	end
	-- ones
	spr(65 + ones, ox + 7 + 2 * 8, oy + 6 + anim)
	spr(65 + ((ones - 1) % 10), ox + 7 + 2 * 8, oy + 6 + anim - 10)
	clip()
	pal(7, 7)
end


function gfx_draw_xp(ox, oy, exp, zoomed)
	local base_char
	local char_width
	if zoomed then
		base_char = 85
		char_width = 11
		oy -= 3
	else
		base_char = 75
		char_width = 8
	end
	local thousands = (exp // 1000) % 10
	local hundreds = (exp // 100) % 10
	local tens = (exp // 10) % 10
	local ones = exp % 10
	local digits = 4
	if exp < 10 then
		digits = 1
	elseif exp < 100 then
		digits = 2
	elseif exp < 1000 then
		digits = 3
	else
		digits = 4
	end
	ox -= (digits * char_width) // 2
	if exp >= 1000 then
		spr(base_char + thousands, ox, oy)
		ox += char_width
	end
	if exp >= 100 then
		spr(base_char + hundreds, ox, oy)
		ox += char_width
	end
	if exp >= 10 then
		spr(base_char + tens, ox, oy)
		ox += char_width
	end
	spr(base_char + ones, ox, oy)
end


function gfx_draw_xp_bar(ox, oy, mana)
	spr(95, ox, oy)
	if mana == 0 then
		return
	end
	local size = min(91, flr(0.5 + 91*(mana / 50)))
	rectfill(ox+1, oy+2, ox+1+size, oy+5, 40)
	line(ox+1+size, oy+2, ox+1+size, oy+5, 39)
	line(ox+1, oy+2, ox+1, oy+5, 41)
	if size > 1 then
		line(ox+2, oy+1, ox+1+size-1, oy+1, 41)
		line(ox+2, oy+6, ox+1+size-1, oy+6, 39)
	end
end
:: src/hgrid.lua
--[[pod_format="raw",created="2024-08-25 08:16:09",modified="2024-09-18 10:21:23",revision=4154]]
--- Hex Grids

--- Hex grids use the "double height" coordinate system:
---
---     (0,0)         (2,0)         (4,0)
---            (1,1)         (3,1)
---     (0,2)         (2,2)         (4,2)
---            (1,3)         (3,3)
---     (0,4)         (2,4)         (4,4)
---
--- The origin of the grid, `pos(0, 0)`, is at the top left.


-- Local Constants --------------------------------------------------------


local max_width <const> = 15
local max_height <const> = 12

local dx <const> = 24
local dy <const> = 14

local gem_offset_x = 1
local gem_offset_y = -1


------------------- -----------------------------------------------------------


local metatable = {}


function hgrid_new()
	local grid = {}
	metatable.default_origin(grid)
	setmetatable(grid, { __index = metatable })
	for i = 0, max_width * max_height do
		grid[i] = nil -- TODO false
	end
	return grid
end


function metatable:new_grid()
	return hgrid_new()
end


function metatable:clone()
	local grid = self:new_grid()
	grid.origin = self.origin
	self:foreachpos(function(p, item) grid:set(p, item) end)
	return grid
end


-----------------------------------------------------------------------------


function metatable:tiling()
	return "hex"
end


function metatable:max_width()
	return max_width
end


function metatable:max_height()
	return max_height
end


-----------------------------------------------------------------------------


function metatable:get(p)
	if p.x < 0 or p.y < 0 or p.x >= max_width then -- or p.y >= 2 * max_height - (p.x % 2) then
		return false
	end
	return self[p.x + ((p.y // 2) * max_width)]
end


function metatable:set(p, value)
	if p.x < 0 or p.y < 0 or p.x >= max_width or p.y >= 2 * max_height - (p.x % 2) then
		return false
	end
	self[p.x + ((p.y // 2) * max_width)] = value
end


function metatable:merge(p, state)
	if p.x < 0 or p.y < 0 or p.x >= max_width or p.y >= 2 * max_height - (p.x % 2) then
		return false
	end
	local index = p.x + ((p.y // 2) * max_width)
	if not self[index] then
		self[index] = {}
	end
	for k, v in pairs(state) do
		self[index][k] = v
	end
end


function metatable:del(p)
	if p.x < 0 or p.y < 0 or p.x >= max_width or p.y >= 2 * max_height - (p.x % 2) then
		return false
	end
	self[p.x + ((p.y // 2) * max_width)] = false
end


-- Screen Coordinates ---------------------------------------------------------


function metatable:default_origin()
	self.origin = { x = 116, y = 7 }
end


local function compute_screen_size(self)
	local min_p = pos(max_width, max_height)
	local max_p = pos(0, 0)
	self:foreachpos(
		function(position, cell)
			if not cell or cell == 0 then
				return
			end
			if position.x < min_p.x then min_p.x = position.x end
			if position.y < min_p.y then min_p.y = position.y end
			if position.x > max_p.x then max_p.x = position.x end
			if position.y > max_p.y then max_p.y = position.y end
		end
	)
	local width = 1 + max_p.x - min_p.x
	local height = 1 + max_p.y - min_p.y
	return min_p, max_p, width, height
--	self.origin.y += 6 -- for Matchic Pon only
--	self.origin.y -= flr(delta * dy * 2)
end


function metatable:set_center_coords(x, y)
	local min_p, max_p, width, height = compute_screen_size(self)
	self.origin = {
		x = x - ((width * dx) // 2) - (min_p.x * dx) - 4,
		y = y - ((height * dy) // 2) - (min_p.y * dy) - 8,
	}
end


function metatable:set_bottom_center_coords(x, y)
	local min_p, max_p, width, height = compute_screen_size(self)
	self.origin = {
		x = x - ((width * dx) // 2) - (min_p.x * dx) - 4,
		y = y - (max_p.y * dy) - dy,
	}
end


function metatable:offset_coords(x, y)
	self.origin.x += x * dx
	self.origin.y += y * dy * 2
end


function metatable:coords_cell(p)
	return self.origin.x + p.x * dx, self.origin.y + p.y * dy
end


function metatable:coords_gem(p)
	return self.origin.x + (p.x * dx) + gem_offset_x,
		self.origin.y + (p.y * dy) + gem_offset_y
end


function metatable:pos(x, y)
	local ox, oy = self.origin.x, self.origin.y
	x -= ox
	y -= oy + 1
	local px, py = x // dx, y // dy
	local xx, yy = x - (px * dx), y - (py * dy)
	if xx < 8 then
		if (px + py) % 2 == 0 and yy < dy + (-2 * xx) then
			px -= 1
			py -= 1
		elseif (px + py) % 2 != 0 and yy > -1 + (2 * xx) then
			px -= 1
		end
	end
	py = (2 * ((py - (px % 2)) // 2)) + (px % 2)
	return pos(px, py)
end


function metatable:distance(p0, p1)
	-- TODO: is this correct?
	return (abs(p0.x - p1.x) + abs(p0.y - p1.y)) // 2
end


-- Iterating ----------------------------------------------------------


function metatable:foreachpos(func)
	for x = 0, max_width do
		for y = x % 2, max_height * 2 - 1, 2 do
			local p = pos(x, y)
			local item = self:get(p)
			if item then
				func(p, item)
			end
		end
	end
end	


function metatable:neighbours(p)
	return {
		{ position = p + pos(1, 1), direction = "horizontal_SE" },
		{ position = p + pos(0, 2), direction = "vertical" },
		{ position = p + pos(-1, 1), direction = "horizontal_NE" },
		{ position = p + pos(-1, -1), direction = "horizontal_SE" },
		{ position = p + pos(0, -2), direction = "vertical" },
		{ position = p + pos(1, -1), direction = "horizontal_NE" },
	}
end


function metatable:blast_radius(p)
	return {
		p + pos(0, 0),
		p + pos(0, -2),
		p + pos(1, -1),
		p + pos(1, 1),
		p + pos(0, 2),
		p + pos(-1, 1),
		p + pos(-1, -1),
	}
end

:: src/in_editor.lua
--[[pod_format="raw",created="2024-08-30 08:13:35",modified="2024-09-13 09:08:06",revision=929]]
in_editor = {}

local tiling = "square"

local cells = false
local gems = false
local marks = false

local active_tool = 0
local ox, oy = 8, 8
local sx, sy = 32, 32

local tools = {
	[0] = cell_none,
	cell_good,
	cell_bad,
	rock_full,
	rock_cracked,
	rock_broken,
	cell_chest_air,
	cell_chest_fire,
	cell_chest_day,
	cell_chest_earth,
	cell_chest_water,
	cell_chest_night,
	cell_door,
	false,
	false,
	gem_gift,
	gem_bomb,
	false,
	gem_cat,
	gem_bat,
	gem_robot,
	false,
	false,
}



function in_editor:enter()
	if not cells then
		cells = logic_new_test_cells(tiling, true)
		gems = cells:new_grid()
	end
	cells:default_origin()
	gems:default_origin()
	marks = cells:new_grid()
end


function in_editor:exit()
end


function in_editor:update()
	if keyp("s") then
		tiling = "square"
		cells = false
		in_editor:enter()
	end
	if keyp("h") then
		tiling = "hex"
		cells = false
		in_editor:enter()
	end
	local mx, my, mb, _, _ = mouse()
	if mb == 0x1 and mx < 110 then
		mx -= ox
		my -= oy
		local x, y = clamp(mx // sx, 0, 2), clamp(my // sy, 0, 7)
		active_tool = clamp(x + 3 * y, 0, 22)
	elseif mb == 0x1 then
		local mp = cells:pos(mx, my)
		local tool = tools[active_tool]
		if tool == cell_none then
			local cell = cells:get(mp) or cell_none
			cell = (cell & ~cell_mask) | tool
			cells:set(mp, cell)
			gems:del(mp)
		elseif tool == cell_good or tool == cell_bad then
			local cell = cells:get(mp) or cell_none
			cell = (cell & ~cell_mask) | tool
			cells:set(mp, cell)
		elseif active_tool <= 12 then 
			local cell = cells:get(mp) or cell_none
			cell = (cell & cell_mask) | tool
			cells:set(mp, cell)
			gems:del(mp)
		elseif cells:get(mp) and cells:get(mp) & cell_mask != 0 then
			gems:set(mp, tool)
			local cell = cells:get(mp) or cell_none
			cell = (cell & cell_mask)
			cells:set(mp, cell)
		end
	end
	if mb == 0x2 then
		local mp = cells:pos(mx, my)
		local cell = cells:get(mp) or cell_none
		cell = (cell & cell_mask)
		cells:set(mp, cell)
		gems:del(mp)
	end
	if keyp("g") then
		in_game:load_from_editor(tiling, cells, gems)
		return in_game
	end
	return false
end


function in_editor:draw()
	cls(63)
	if not cells then
		return
	end
	local mx, _, _, _, _ = mouse()
	if mx <= 110 then
		window { cursor = "pointer" }
	else
		window { cursor = "crosshair" }
	end
	gfx_draw_cells(cells)
	gfx_draw_gems(cells, gems, marks, 0.0)
	-- Draw the panel
	rectfill(0, 0, 110, 269, 55)
	rectfill(ox, oy, ox + 28, oy + 28, 63)
	spr(33, ox + 1 * sx, oy + 0 * sy)
	spr(34, ox + 2 * sx, oy + 0 * sy)
	spr(48, ox + 0 * sx, oy + 1 * sy)
	spr(49, ox + 1 * sx, oy + 1 * sy)
	spr(50, ox + 2 * sx, oy + 1 * sy)
	spr(52, ox + 0 * sx, oy + 2 * sy)
	spr(53, ox + 1 * sx, oy + 2 * sy)
	spr(54, ox + 2 * sx, oy + 2 * sy)
	spr(55, ox + 0 * sx, oy + 3 * sy)
	spr(56, ox + 1 * sx, oy + 3 * sy)
	spr(57, ox + 2 * sx, oy + 3 * sy)
	spr(51, ox + 0 * sx, oy + 4 * sy)

	spr(8, ox + 0 * sx, oy + 5 * sy)
	spr(9, ox + 1 * sx, oy + 5 * sy)
--	spr(11, ox + 2 * sx, oy + 5 * sy)
	spr(10, ox + 0 * sx, oy + 6 * sy)
	spr(11, ox + 1 * sx, oy + 6 * sy)
	spr(12, ox + 2 * sx, oy + 6 * sy)
--	spr(14, ox + 0 * sx, oy + 7 * sy)
--	spr(15, ox + 1 * sx, oy + 7 * sy)

	local x, y = active_tool % 3, active_tool // 3
	rect(ox + x * sx - 1, oy + y * sy - 1, ox + x * sx + 29, oy + y * sy + 29, 7)
end
:: src/in_game.lua
--[[pod_format="raw",created="2024-08-27 17:11:11",modified="2024-09-18 10:21:23",revision=5856]]
in_game = {}


-- The Board
local gravity = pos(0, 1)

local undo = {}
local cells = false
local gems = false
local starting_stats = {
	tiling = "square",
	number_of_colours = 7,
	columns = 8,
	speed = 0.333333333,
	speed_increase = 0.000,
	column_increase = 10,
	turn = 0,
	offset = 0.0,
	distance = 0, -- how many times the board has been pushed up
	experience = 0,
	in_cascade = false,
	colours = {
		[gem_air] = 0,
		[gem_fire] = 0,
		[gem_day] = 0,
		[gem_earth] = 0,
		[gem_water] = 0,
		[gem_night] = 0,
		[gem_white] = 0,
		[gem_black] = 0,
	},
}
local stats = deep_copy(starting_stats)

local marks = false
local matches = {}

-- State Machine
local editor_requested = false
local substate = false
local clock = 0.0
local interaction = false
local anim_turn = 0
local displayed_xp = 0
local star_seed = 37


-----------------------------------------------------------------------


-- Functions for substate need to be global, because of Lua
-- forward-declaration rule for locals.


function creating_the_board()
	undo = {}
	cells = logic_cells(stats)
	gems = cells:new_grid()
--	cells:compute_origin(0.0)
	cells:set_center_coords(110 + ((480 - 110) // 2), (270 // 2))
	gems.origin = cells.origin
	logic_fill_gems(stats, cells, gems, marks)
	stats = deep_copy(starting_stats)
	marks = cells:new_grid()
	matches = {}
	anim_turn = 0
	displayed_xp = 0
	star_seed = math.random(37, 6584587)
	return starting_new_turn
end


function starting_new_turn()
	if clock == 0.0 then
		stats.turn += 1
		stats.in_cascade = false
	end

	clock += 1.0 / 8.0
	if clock >= 1.0 then clock = 1.0 end
--	cells:set_center_coords(110 + ((480 - 110) // 2), 270 // 2)
	cells:set_bottom_center_coords(110 + ((480 - 110) // 2), 269)
	cells:offset_coords(0.0, - (stats.offset - stats.speed + stats.speed * clock))
	gems.origin = cells.origin

	if clock < 1.0 then 
		return starting_new_turn
	end
	return waiting_for_input
end


function waiting_for_input()
	local mx, my, mb, _, _ = mouse()
	if mb == 0x1 then
		local mp = cells:pos(mx, my)
		if gems:get(mp) then
			interaction = { name = "swap", position = mp, start = t() }
			return waiting_for_swap
		end
	end
	if keyp("r") then
		local mx, my = mouse()
		local p = cells:pos(mx, my)
		gems:del(p)
		matches = {}
		return applying_gravity
	end
	if keyp("a") then
		local mx, my = mouse()
		local p = cells:pos(mx, my)
		gems:set(p, gem_air)
		marks:set(p, { name = "new" })
		matches = {}
		return checking_matches
	end
	if keyp("s") then
		stats.tiling = "square"
		return creating_the_board
	end
	if keyp("h") then
		stats.tiling = "hex"
		return creating_the_board
	end
	if keyp("z") then
		local previous = deli(undo)
		if previous then
			cells = previous.cells
			gems = previous.gems
			marks = cells:new_grid()
			stats = previous.stats
		end
	end
	if keyp("1") then color_gem_skin = 5 end
	if keyp("2") then color_gem_skin = 8 end
	if keyp("3") then color_gem_skin = 10 end
	if keyp("4") then
		color_gem_skin = (color_gem_skin - 1) % 16
	end
	if keyp("5") then color_gem_skin = 0 end
	if keyp("6") then
		color_gem_skin = (color_gem_skin + 1) % 16
	end
	if keyp("7") then color_gem_skin = 2 end
	if keyp("8") then
		local prev = color_gem_skin
		while prev == color_gem_skin do
			color_gem_skin = math.random(0, 14)
		end
	end
	if keyp("9") then color_gem_skin = 15 end
	return waiting_for_input
end


function waiting_for_swap()
	local mx, my, mb, _, _ = mouse()
	if mb != 0x1 then
		interaction = false
		return waiting_for_input
	end
	local mp = cells:pos(mx, my)
	if cells:distance(mp, interaction.position) != 1
		or (not cells:get(mp))
	then
		-- TODO: also prevent upward swap when no gem
		return waiting_for_swap
	end
	if cells:tiling() == "square"
		and mp.y == interaction.position.y - 1
		and not gems:get(mp)
	then
		return waiting_for_swap
	elseif cells:tiling() == "hex"
		and mp.y == interaction.position.y - 2
		and not gems:get(mp)
	then
		return waiting_for_swap
	end
	local success = logic_mark_swap(gems, marks, interaction.position, mp)
	interaction = false
	if not success then
		return waiting_for_input
	end
	add(undo, {
		cells = cells:clone(),
		gems = gems:clone(),
		stats = deep_copy(stats),
	})
	return swapping_two_gems
end


function swapping_two_gems()
	clock += 1.0 / 16.0
	if clock < 1.0 then
		return swapping_two_gems
	end
	logic_enact_swap(gems, marks)
	return applying_initial_gravity
end


function applying_initial_gravity()
	if clock == 0.0 then
		local some_gems_are_falling = logic_mark_gravity(cells, gems, marks, gravity)
		if not some_gems_are_falling then
			return checking_matches
		end
	end
	clock += 1.0 / 16.0
	if clock < 1.0 then
		return applying_initial_gravity
	end
	logic_enact_gravity(gems, marks)
	return checking_matches
end


function checking_matches()
	matches, marks = logic_find_matches(cells, gems)
	if #matches > 0 then
		local _ = logic_gain_mana(stats, matches)
		return clearing_gems
	end
	return ending_turn
end


function clearing_gems()
	clock += 1.0 / 16.0
	if clock < 1.0 then
		return clearing_gems
	end
	logic_enact_clear(gems, marks)
	return applying_gravity
end


function applying_gravity()
	if clock == 0.0 then
		local some_gems_are_falling = logic_mark_gravity(cells, gems, marks, gravity)
		if not some_gems_are_falling then
			return ending_turn
		end
	end
	clock += 1.0 / 16.0
	if clock < 1.0 then
		return applying_gravity
	end
	logic_enact_gravity(gems, marks)
	return checking_matches
end


function ending_turn()
	if clock == 0.0 then
		stats.offset += stats.speed
		while stats.offset >= 0.0 do
			logic_push_up(stats, cells, gems, marks)
			stats.offset -= 1.0
			stats.distance += 1
			anim_turn = 20
		end
		if stats.column_increase != 0 and stats.turn % stats.column_increase == 0 then
			logic_new_cell_column(stats, cells)
		end
		stats.speed += stats.speed_increase
	end
	return starting_new_turn()
end


-----------------------------------------------------------------------


function in_game:enter()
	editor_requested = false
	if not substate then
		substate = creating_the_board
	end
end


function in_game:exit()
end


function in_game:update()
	local next = substate()
	if next != substate then
		clock = 0.0
		substate = next
	end
	if anim_turn > 0 then
		anim_turn -= 1
	end
	if displayed_xp < stats.experience then
		displayed_xp += 0.25
	elseif displayed_xp >= stats.experience then
		displayed_xp = stats.experience
	end
	if editor_requested then
		return in_editor
	end
	return false
end


function in_game:draw()
	if not cells then
		return
	end
	-- Starry background
	local hash = star_seed
	for x = 0, 9 do
		for y = 0, 6 do
			hash = hash~(hash << 13); hash = hash~(hash >> 17); hash = hash~(hash << 5)
			local flipped = (x+y)%2 == 0
			spr(120 + (hash%8), 110 + x * 40, 0 + y * 40, flipped, flipped)
		end
	end
	-- Draw the board
	if stats.turn > 0 then
		gfx_draw_cells(cells, stats)
		gfx_draw_gems(cells, gems, marks, clock)
	end
	-- Draw the panel
	rectfill(0, 0, 110, 269, 60)
	line(0, 0, 110, 0, 62)
	line(0, 0, 0, 269, 62)
	line(110, 0, 110, 269, 58)
	line(0, 269, 110, 269, 58)
	-- Top bar
	spr(102, 6, 10)
	spr(98, 14, 5)
	gfx_draw_turns(37, 2, 1 + stats.distance, anim_turn)
	spr(100, 79, 5)
	spr(102, 101, 10)
	-- Experience
	spr(104, 16, 34)
	gfx_draw_xp(56, 34, flr(displayed_xp), displayed_xp < stats.experience)
	spr(105, 71, 34)
	gfx_draw_xp_bar(8, 50, flr(displayed_xp) % 50)
	cursor(38, 60, 58)
	print("\14level " .. string.format("%d", (1 + flr(displayed_xp // 50))))
	--
	line(0, 75, 110, 75, 62)
	line(0, 75 - 1, 110, 75 - 1, 58)
	---
	for i = 0, 5 do
		spr(96, 4, 84 + i * 30)
	end
	cursor(11, 95 + 0 * 30, 58)
	print("Air: " .. tostr(stats.colours[gem_air]))
	cursor(10, 94 + 0 * 30, 12)
	print("Air: " .. tostr(stats.colours[gem_air]))
	cursor(11, 95 + 1 * 30, 58)
	print("Fire: " .. tostr(stats.colours[gem_fire]))
	cursor(10, 94 + 1 * 30, 17)
	print("Fire: " .. tostr(stats.colours[gem_fire]))
	cursor(11, 95 + 2 * 30, 58)
	print("Day: " .. tostr(stats.colours[gem_day]))
	cursor(10, 94 + 2 * 30, 22)
	print("Day: " .. tostr(stats.colours[gem_day]))
	cursor(11, 95 + 3 * 30, 58)
	print("Earth: " .. tostr(stats.colours[gem_earth]))
	cursor(10, 94 + 3 * 30, 27)
	print("Earth: " .. tostr(stats.colours[gem_earth]))
	cursor(11, 95 + 4 * 30, 58)
	print("Water: " .. tostr(stats.colours[gem_water]))
	cursor(10, 94 + 4 * 30, 32)
	print("Water: " .. tostr(stats.colours[gem_water]))
	cursor(11, 95 + 5 * 30, 58)
	print("Night: " .. tostr(stats.colours[gem_night]))
	cursor(10, 94 + 5 * 30, 37)
	print("Night: " .. tostr(stats.colours[gem_night]))
	-- Update the cursor
	local mx, my = mouse()
	local cursor_pos = cells:pos(mx, my)
	local cell = cells:get(cursor_pos)
	if cell and cell != 0 then
		window { cursor = "grab" }
	else
		window { cursor = "" }
	end
	if false then
		rectfill(mx + 4 - 10, my + 10, mx + 36, my + 20, 7)
		print(tostr(cursor_pos.x)..","..tostr(cursor_pos.y), mx + 6 - 10, my + 12, 0)
	end
	cursor(430, 2, 0)
	print(string.format("\14turn: %d", stats.turn))
	cursor(430, 12, 0)
	print(string.format("\14speed: %1.3f", stats.speed))
end
:: src/sgrid.lua
--[[pod_format="raw",created="2024-08-24 07:17:45",modified="2024-09-18 10:21:23",revision=4760]]
--- Square Grids

--- The origin of the grid, `pos(0, 0)`, is at the top left.


---------------------------------------------------------------------------


local max_width <const> = 13
local max_height <const> = 11

local dx <const> = 27
local dy <const> = 27

local gem_offset_x = -1
local gem_offset_y = -1


----------------------------------------------------------------------------


local metatable = {}


function metatable:new_grid()
	return sgrid_new()
end


function sgrid_new()
	local grid = {}
	setmetatable(grid, { __index = metatable })
	for i = 0, max_width * max_height do
		grid[i] = false
	end
	return grid
end


function metatable:clone()
	local grid = self:new_grid()
	grid.origin = self.origin
	self:foreachpos(function(p, item) grid:set(p, item) end)
	return grid
end


-------------------------------------------------------------------------------


function metatable:tiling()
	return "square"
end


function metatable:max_width()
	return max_width
end


function metatable:max_height()
	return max_height
end


--------------------------------------------------------------------------------


function metatable:get(p)
	if p.x < 0 or p.y < 0 or p.x >= max_width or p.y >= max_height then
		return false
	end
	return self[p.x + (p.y * max_width)]
end


function metatable:set(p, value)
	if p.x < 0 or p.y < 0 or p.x >= max_width or p.y >= max_height then
		return false
	end
	self[p.x + (p.y * max_width)] = value
end


function metatable:merge(p, state)
	if p.x < 0 or p.y < 0 or p.x >= max_width or p.y >= max_height then
		return false
	end
	local index = p.x + (p.y * max_width)
	if not self[index] then
		self[index] = {}
	end
	for k, v in pairs(state) do
		self[index][k] = v
	end
end


function metatable:del(p)
	if p.x < 0 or p.y < 0 or p.x >= max_width or p.y >= max_height then
		return false
	end
	self[p.x + (p.y * max_width)] = false
end


function metatable:distance(p0, p1)
	return abs(p0.x - p1.x) + abs(p0.y - p1.y)
end


-------------------------------------------------------------------------------


local function compute_screen_size(self)
	local min_p = pos(max_width, max_height)
	local max_p = pos(0, 0)
	self:foreachpos(
		function(position, cell)
			if not cell or cell == 0 then
				return
			end
			if position.x < min_p.x then min_p.x = position.x end
			if position.y < min_p.y then min_p.y = position.y end
			if position.x > max_p.x then max_p.x = position.x end
			if position.y > max_p.y then max_p.y = position.y end
		end
	)
	local width = 1 + max_p.x - min_p.x
	local height = 1 + max_p.y - min_p.y
	return min_p, max_p, width, height
--	self.origin = {
--		x = 110 + ((480 - 110) // 2) - ((width * dx) // 2) - (min_p.x * dx),
--		y = (270 // 2) - ((height * dy) // 2) - (min_p.y * dy),
--	}
--	self.origin.y -= 0 -- for Matchic Pon only
--	self.origin.y -= flr(delta * dy)
end


function metatable:set_center_coords(x, y)
	local min_p, max_p, width, height = compute_screen_size(self)
	self.origin = {
		x = x - ((width * dx) // 2) - (min_p.x * dx),
		y = y - ((height * dy) // 2) - (min_p.y * dy),
	}
end


function metatable:set_bottom_center_coords(x, y)
	local min_p, max_p, width, height = compute_screen_size(self)
	self.origin = {
		x = x - ((width * dx) // 2) - (min_p.x * dx),
		y = y - (max_p.y * dy) - dy,
	}
end


function metatable:offset_coords(x, y)
	self.origin.x += x * dx
	self.origin.y += y * dy
end


function metatable:coords_cell(p)
	return self.origin.x + p.x * dx, self.origin.y + p.y * dy
end


function metatable:coords_gem(p)
	return self.origin.x + p.x * dx + gem_offset_x,
		self.origin.y + p.y * dy + gem_offset_y
end


function metatable:pos(x, y)
	return pos((x - self.origin.x) // dx, (y - self.origin.y) // dy)
end


----------------------------------------------------------------------------


function metatable:foreachpos(func)
	local p = pos(0, 0)
	for x = 0, max_width do
		for y = 0, max_height do
			local p = pos(x, y)
			local item = self:get(p)
			if item then
				func(p, item)
			end
		end
	end
end	


function metatable:neighbours(p)
	return {
		{ position = p + pos(1, 0), direction = "horizontal" },
		{ position = p + pos(0, 1), direction = "vertical" },
		{ position = p + pos(-1, 0), direction = "horizontal" },
		{ position = p + pos(0, -1), direction = "vertical" },
	}
end


function metatable:blast_radius(p)
	return {
		p + pos(0, 0),
		p + pos(1, 0),
		p + pos(1, 1),
		p + pos(0, 1),
		p + pos(-1, 1),
		p + pos(-1, 0),
		p + pos(-1, -1),
		p + pos(0, -1),
		p + pos(1, -1),
	}
end

:: src/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA4LTI0IDA3OjE3OjA5Iixtb2RpZmllZD0iMjAyNC0w
OS0xOCAxMDoyMToyMyJdXQ==
:: debug.lua
--[[pod_format="raw",created="2024-08-24 12:45:09",modified="2024-09-01 05:15:15",revision=75]]
-- Detect uninitialized globals and typos
-- from @snowkittykira from the BBS


-- if you're using include(), include this after including everything else,
-- since most included modules will need to assign global variables on load

-- these globals are needed by picotron
_init = _init or false
_draw = _draw or false
_update = _update or false
-- these are used by the picotron terminal
cproj_draw = cproj_draw or false
cproj_update = cproj_update or false
_ = _ or false
_is_terminal_command = _is_terminal_command or false
k = k or false
res = res or false
-- gui needs these
drag_t = drag_t or false

local function unknown_variable (t, k)
  error (debug.traceback ('unknown variable ' .. tostring (k), 2))
end

setmetatable (_G, {
  __index = unknown_variable,
  __newindex = unknown_variable,
})
:: drakma.lua
b64$LS1bW3BvZF9mb3JtYXQ9InJhdyIsY3JlYXRlZD0iMjAyNC0wNC0wNyAwNzo0Mjo0NSIsbW9k
aWZpZWQ9IjIwMjQtMDktMTMgMDk6MzQ6MjQiLHJldmlzaW9uPTE1MDddXQpfbW9kdWxlcyA9IHt9
CgotLSBBICdyZXF1aXJlJyBmdW5jdGlvbiBzaW1pbGFyIHRvIHN0YW5kYXJkIEx1YS4KLS0gSWRl
YSBmcm9tIGVsZ29waGVyIG9uIHRoZSBCQlMKZnVuY3Rpb24gcmVxdWlyZShuYW1lKQoJbG9jYWwg
Y2FjaGVkID0gX21vZHVsZXNbbmFtZV0KCWlmIChjYWNoZWQpIHJldHVybiBjYWNoZWQKCglsb2Nh
bCBmaWxlbmFtZSA9IGZ1bGxwYXRoKG5hbWUgLi4gJy5sdWEnKQoJbG9jYWwgc3JjID0gZmV0Y2go
ZmlsZW5hbWUpIAoKCWlmICh0eXBlKHNyYykgIT0gInN0cmluZyIpIHBhbmljKCJjb3VsZCBub3Qg
aW5jbHVkZSAiIC4uIGZpbGVuYW1lKQoKCS0tIGh0dHBzOi8vd3d3Lmx1YS5vcmcvbWFudWFsLzUu
NC9tYW51YWwuaHRtbCNwZGYtbG9hZAoJLS0gY2h1bmsgbmFtZSAoZm9yIGVycm9yIHJlcG9ydGlu
ZykKCS0tIG1vZGUgKCJ0IiBmb3IgdGV4dCBvbmx5IC0tIG5vIGJpbmFyeSBjaHVuayBsb2FkaW5n
KQoJLS0gX0VOViB1cHZhbHVlCgktLSBAIGlzIGEgc3BlY2lhbCBjaGFyYWN0ZXIgdGhhdCB0ZWxs
cyBkZWJ1Z2dlciB0aGUgc3RyaW5nIGlzIGEgZmlsZW5hbWUKCWxvY2FsIGZ1bmMsIGVyciA9IGxv
YWQoc3JjLCAiQCIgLi4gZmlsZW5hbWUsICJ0IiwgX0VOVikKCWlmIChub3QgZnVuYykgcGFuaWMo
IlN5bnRheCBlcnJvcjoiLCB0b3N0cihlcnIpKQoKCWxvY2FsIG1vZHVsZSA9IGZ1bmMoKQoJX21v
ZHVsZXNbbmFtZV0gPSBtb2R1bGUKCglyZXR1cm4gbW9kdWxlCmVuZAoKCmZ1bmN0aW9uIHBhbmlj
KC4uLikKCWxvY2FsIGFyZ3MgPSB7IC4uLiB9Cglmb3JlYWNoKAoJCWFyZ3MsCgkJZnVuY3Rpb24o
c3RyKQoJCQlzZW5kX21lc3NhZ2UoMywgeyBldmVudCA9ICJyZXBvcnRfZXJyb3IiLCBjb250ZW50
ID0gc3RyIH0pCgkJZW5kCgkpCglzdG9wKCkKZW5kCgoKLS0gVGFibGUgdXRpbGl0eSBmdW5jdGlv
bnMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0KCgpmdW5jdGlvbiBpc19lbXB0eSh0KQoJcmF3ZXF1YWwobmV4dCh0KSwgbmlsKQplbmQKCmZ1
bmN0aW9uIGRlZXBfY29weSh0LCBhbHJlYWR5KQoJaWYgKG5vdCBhbHJlYWR5KSBhbHJlYWR5ID0g
e30KCWlmIHR5cGUodCkgPT0gInRhYmxlIiB0aGVuCgkJaWYgYWxyZWFkeSBhbmQgYWxyZWFkeVt0
XSB0aGVuCgkJCXJldHVybiBhbHJlYWR5W3RdCgkJZW5kCgkJbG9jYWwgbmV3ID0ge30KCQlhbHJl
YWR5W3RdID0gbmV3CgkJZm9yIGssIHYgaW4gcGFpcnModCkgZG8KCQkJbmV3W2tdID0gZGVlcF9j
b3B5KHYsIGFscmVhZHkpCgkJZW5kCgkJcmV0dXJuIG5ldwoJZWxzZQoJCXJldHVybiB0CgllbmQK
ZW5kCgoKZnVuY3Rpb24gdG9zdHJyZWModCkKCWlmIHR5cGUodCkgIT0gInRhYmxlIiB0aGVuCgkJ
cmV0dXJuIHRvc3RyKHQpCgllbmQKCQoJbG9jYWwgcyA9IG5pbAoJZm9yIGssIHYgaW4gcGFpcnMo
dCkgZG8KCQlpZiBub3QocykgdGhlbgoJCQlzID0gInsgIgoJCWVsc2UKCQkJcyAuLj0gIiwgIgoJ
CWVuZAoJCXMgLi49IHRvc3RyKGspIC4uICIgPSAiIC4uIHRvc3RycmVjKHYpCgllbmQKCWlmIG5v
dCBzIHRoZW4KCQlyZXR1cm4gInt9IgoJZW5kCglzIC4uPSAiIH0iCgoJcmV0dXJuIHMKZW5kCgoK
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCgpmdW5jdGlvbiBjbGFtcCh2LCBtaW4sIG1heCkKCWlm
IHYgPCBtaW4gdGhlbgoJCXJldHVybiBtaW4KCWVuZAoJaWYgdiA_IG1heCB0aGVuCgkJcmV0dXJu
IG1heAoJZW5kCglyZXR1cm4gdgplbmQKCgpmdW5jdGlvbiBleHBfZGVjYXkoYSwgYiwgZGVjYXks
IGR0KQoJLS0tIExlcnAgc21vb3RoaW5nLCBidXQgZnJhbWVyYXRlLWluZGVwZW5kYW50LCBmcm9t
IEZyZXlhIEhvbG3DqXIKCS0tLSBodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PUxTTlF1
RkVET3lRCgktLS0gVXNlIGFzIGBhID0gZXhwX2RlY2F5KGEsIGIsIGRlY2F5LCBkdClgCglyZXR1
cm4gYiArIChhIC0gYikgKiBtYXRoLmV4cCgtIGRlY2F5ICogZHQpCmVuZAoKCi0tIFBvcyAtLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLQoKCi0tIFdBUk5JTkc6IGRvIG5vdCBmb3JnZXQgdGhhdCBgcG9zYCBpcyBh
IHJlZmVyZW5jZSB0eXBlLCBub3QgYSB2YWx1ZToKLS0gYXZvaWQgbW9kaWZ5aW5nIGluIHBsYWNl
LgpmdW5jdGlvbiBwb3MoeCwgeSkKCWxvY2FsIHAgPSB1c2VyZGF0YSgiaTE2IiwgMikKCXAueCA9
IHgKCXAueSA9IHkKCXJldHVybiBwCmVuZAoKCi0tIERyYXdpbmcgLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoK
Ci0tIEZyb20gU29waGllIG9uIHRoZSBkaXNjb3JkCmZ1bmN0aW9uIGdldF9kcmF3c3BhY2UoKQog
ICAgcmV0dXJuIHsKICAgICAgICBjYW1feD1wZWVrNCgweDU1MTApLAogICAgICAgIGNhbV95PXBl
ZWs0KDB4NTUxNCksCiAgICAgICAgY2xpcF9sPXBlZWsyKDB4NTUyOCksCiAgICAgICAgY2xpcF90
PXBlZWsyKDB4NTUyYSksCiAgICAgICAgY2xpcF9yPXBlZWsyKDB4NTUyYyksCiAgICAgICAgY2xp
cF9iPXBlZWsyKDB4NTUyZSksCiAgICB9CmVuZAoKCmZ1bmN0aW9uIHNldF9kcmF3c3BhY2UoZHJh
d3NwYWNlKQogICAgcG9rZTQoMHg1NTEwLGRyYXdzcGFjZS5jYW1feCkKICAgIHBva2U0KDB4NTUx
NCxkcmF3c3BhY2UuY2FtX3kpCiAgICBwb2tlMigweDU1MjgsZHJhd3NwYWNlLmNsaXBfbCkKICAg
IHBva2UyKDB4NTUyYSxkcmF3c3BhY2UuY2xpcF90KQogICAgcG9rZTIoMHg1NTJjLGRyYXdzcGFj
ZS5jbGlwX3IpCiAgICBwb2tlMigweDU1MmUsZHJhd3NwYWNlLmNsaXBfYikKZW5k
:: main.lua
--[[pod_format="raw",created="2024-03-30 05:39:34",modified="2024-09-18 10:21:23",revision=6244]]
include "drakma.lua"
include "src/constants.lua"
include "src/sgrid.lua"
include "src/hgrid.lua"
include "src/logic/creation.lua"
include "src/logic/matching.lua"
include "src/logic/spells.lua"
include "src/logic/mechanics.lua"
include "src/gfx.lua"
include "src/in_game.lua"
include "src/in_editor.lua"
include "debug.lua"


local state = in_game
local next_state = false


function _init()
	window { cursor = "" }
	fetch("pal/0.pal"):poke(0x5000)
	state:enter()
end


function _update()
	if next_state then
		state:exit()
		state = next_state
		state:enter()
	end
	next_state = state:update()
end


function _draw()
	state:draw()
	print(string.format("\014% 3.0f%%", stat(1) * 100.0), 464, 256, 1)
	print(string.format("\014% 3.1fMB", stat(0) / (1024 * 1024)), 456, 264, 1)
end
:: .info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA4LTIzIDE4OjQ1OjEzIixtb2RpZmllZD0iMjAyNC0w
OS0xOCAxMDoyMToyMyIscnVudGltZT0xMSxzdG9yZWQ9IjIwMjQtMDMtMzAgMDY6NTQ6MjQiLHdv
cmtzcGFjZXM9e3tsb2NhdGlvbj0ibWFpbi5sdWEjMzgiLHdvcmtzcGFjZV9pbmRleD0xfSx7bG9j
YXRpb249InNyYy9pbl9nYW1lLmx1YSM4MiIsd29ya3NwYWNlX2luZGV4PTF9LHtsb2NhdGlvbj0i
c3JjL2xvZ2ljL2NyZWF0aW9uLmx1YSMxOCIsd29ya3NwYWNlX2luZGV4PTF9LHtsb2NhdGlvbj0i
c3JjL2xvZ2ljL3NodWZmbGUubHVhIzEiLHdvcmtzcGFjZV9pbmRleD0xfSx7bG9jYXRpb249InNy
Yy9jb25zdGFudHMubHVhIzM4Iix3b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJzcmMvZ2Z4
Lmx1YSMxMjYiLHdvcmtzcGFjZV9pbmRleD0xfSx7bG9jYXRpb249InNyYy9zZ3JpZC5sdWEjMTcz
Iix3b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJzcmMvaGdyaWQubHVhIzE4MiIsd29ya3Nw
YWNlX2luZGV4PTF9LHtsb2NhdGlvbj0ic3JjL2xvZ2ljL21lY2hhbmljcy5sdWEjMTQyIix3b3Jr
c3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJzcmMvbG9naWMvbWF0Y2hpbmcubHVhIzIyNyIsd29y
a3NwYWNlX2luZGV4PTF9LHtsb2NhdGlvbj0ic3JjL2xvZ2ljL3NwZWxscy5sdWEjMTQiLHdvcmtz
cGFjZV9pbmRleD0xfSx7bG9jYXRpb249ImdmeC8wLmdmeCIsd29ya3NwYWNlX2luZGV4PTJ9LHts
b2NhdGlvbj0ic2Z4LzAuc2Z4Iix3b3Jrc3BhY2VfaW5kZXg9NH0se2xvY2F0aW9uPSJwYWwvMC5w
YWwiLHdvcmtzcGFjZV9pbmRleD03fX1dXQ==
:: [eoc]
