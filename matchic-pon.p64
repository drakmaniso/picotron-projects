picotron cartridge // www.picotron.net
version 2

:: docs/
:: docs/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA4LTI2IDE0OjAzOjI1Iixtb2RpZmllZD0iMjAyNC0w
OS0xNyAxNDo1Mjo0MiJdXQ==
:: gfx/
:: gfx/0.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTAzLTMwIDA1OjM5OjM0Iixtb2RpZmllZD0iMjAyNC0w
OS0xNyAxNDo1Mjo0MiIscmV2aXNpb249NjE2Ml1dbHo0APdUAADGAAEA8xR7WzBdPXtibXA9cHh1
AEMgEBAE8PAsZmxhZ3M9MCxwYW5feAgAz3k9MCx6b29tPTZ9LDEA-1DwER0dBPBPPxJAPuAODxYf
Kg8VDiAOHyofFg7QDg8qPxUuBQBADg81wB4ApBQfFS8WHxUfFA8TANUPFQ8UDxNPFQ8TDxQfKAAB
FQARLxUAEC8VADGQPyw_AFATLxUfEz4A-AYeHytgDyw-LS8VXy0-LB8VHywPK1ARAD8PNUATACXz
AFBPLC8TTywvKx8TLysfNVsANU8tLyIAH2ATAITvcD8rLn0eHR81gPwD8C7JAR3yPDkvKxAPD-AG
DysgHvAFTyzwBw0-LQ0O8AYNDD0ODzXwAx1sHfABDawN4A28HcANLB8qjA0OoA0sK4wdDpANLBuc
HQ4PNXAN-AAtDgYAKwpgBwAm7D0GAP8g3E0OCnANvE0OGnANrF0OCpAdbG0OGqAOzQ4awA6tDhrg
Hm0eGvABCm4q8ARq8BfNAB3wBU0PLOAOoA4PLQ7ADg0OkA4dDqAOoABAgA4tDgQA0QyADg0PKx0O
YA4dCw0OAFIbHW4dGwsAMyuNKxQAEq0SACr9AQYAkHAOLS5tLi0OcFQA8QkaDyoLDk0OCgsPGg4d
DgxgDh0OCRsJDi0GAAERADMtDikEAIAMYA49Lk0uPQkAIP0DSQD-Jm0vCW0OHEBbXQhdW3AOPQ4d
Dh0OPQ4cgDstHg0eLTtwGyAOrQ4cABuwHm0eHPABDG4s8ARsEAEf8AKLDytgDvAEHkAe8AQODyxO
DQ0A8DFNHtAuIA5tDiAuDzVAHi0eAA4NHw8NHA0OAB4tHiAObR4MDyoODAsODB5tDhAOfQ4MHgwe
DA59Dg81AA59Dg0cKwDwCX0OCgAOjQ5NDo0OCgA_bQ4tDm0_CgAOGt8A8AYaDgoQCgA_zT4KEAow
DhoOLQ5NDi0WAPAGcAoATk1OChAKkA4qDk0OKg4K0AogGwD-AiAK8AMODQ4a8AkOGvALCvBx6AAd
IBoPCgNwLPAKDysPFhQDIvAJEgAgDzUUABEfBgBBDzXwCwYA8AQE7yvADu8tDqAODf8sAA6QDg38
BgDwDhw_TD4cDg81YC4MDg8NHw8PDQ4sDgsfDwsODC5A0wHwBQ4KHxAKDiwOChkKDgwOHQ4wDg0M
FgAWGRUAAEAAsSAOHA4MDgsaCw4sBgAAFgAQCBUAAmEA8AIcDggwLvwBLhhACA78AQ4oYAYAYAiA
DjyOPAcAUiwOjQ4sCQBVDQ5MDgwNABB8CgAwkA4cCgCvHA4YoO4YwOjwMCoBKR8SKgEWULAODd8s
lgUFMgEXDC0BVTwOLA48JQEDDgAFIAEwXixeAgESCxcBYA8cHx0PHDABIh8dMQEYCxsBEQsbATAb
QAsVARErGwESCxsBFAsbARgLGwEVCxsBFQsbAW8boO4bwOsbAR-wGS8fK6AusA4fLR5wDi0ekA4f
LB0eQA48HR5gDkwdHhAOHA8NDw8PDRwWAPIEbB0eLA8PDxAPDzwdDiAOnB0eDB4AoVwOIA4sHmwd
HnwwA-ECHB4LDiwePB0eXA4LAC4rDgwQAKMMHR48DgsQKxAeEgByHS4MDgtwGxAA8QUMDi0eC8Ab
EB4bDjwNDgvwAhsADhwB4PABHhAOTA4LsB4gDg0e-wAhG2ALAHIADkwuGxAuCwCSDB0eLB47IA4d
DABAXB4rYAgA-xiMHiuADrweK7AOjB4r0A5sHivwAQ48HivwAw4cHivwBh4r8Akb8CI1AR3xCBYf
K2Ae8AAeDy0ODzVQDg8tHrAeHQ8sDQDwEA0fLB5wHh0cDh81YA48HkAOHTwOC3AOXA4wDkwOG4DL
ANAwDjw_QD48DhswDkwdDwBQHUwOC1AfABBABQAjUA4PACELcO4AAAUAYXAOLD4gPvEB8AMsHQ4L
EA4dLA4bkA48DhsgDjwWAAG3AxAwKwAQgIECEBxMABAcKgKADSwODD4APgxEABMNsAFxDhwdDgsO
HSAAEhzSAQEzAABzASQbgPQBABMAIAsQBQBgoA5cDhwuZQJADlwODNwFoA4LwA5cDg08DhsIAAGp
ATDgDky0ADDgDlyGAI-wAJ4b8AKbsFsBHdAyLyugHqAeLy0OcB4dBABAPywOQE8BALcFFB2OAqIO
EB4dTA4wDh08vgBBLB4dbIUEE1y7ALAeHZwOIA58Hh1sHpcB8QQQDlweHTweLA4LHhwOEA48Hh0M
DQDFDA4LAAsuCwAODC4dEACVHgsgKwAeLQ4MDwAhG2DrAAAKABGw7QDxCiAb8AEOTA4QHvADDiwO
DB4NDiAe4C5MDgAKAHKgGx4sHh0MDgBSLnALHlwOAHAdDguACx6MDQCwG6ALHrwOC9ALHowsAeAL
HmwOC-ADCx48DhvwBaUAvwvwCAseG-AKG-ARQwEd8gYanyvwAg4vLQ5dDvAADg0-LA5MDvBOAyBc
DqYBMVwO0DACMAwOXDMIIAwuGQAQsDcCIC81sAQEZQEQoBMAAD0BABQAAWgBEBwGBTAsDgAFAAQm
AHCQDg0_DzU_BAUAIwVBDjsAG2wAYKAODRwOQAUAEAwMAAGfAiANLGgAUjwOIA4NtgJgHD4LED4s
OQBQHA47IBvFAhBwHAABcQEBCgAkC1AGABBcTgCxXA5QDg0sPgswPjxRAGA8DjtAGw4MAkANTA6A
BQBBCzAePEYAcCweG0ALHixMAEEcHitw3gH-A1AODR4rsAseC1AeK-AAG2AbcG4JfTH9Aw4FAAFd
CRDNXQZ0YA4tTi1OLUgJBU4JEilNCR8JTQlGDyQNEB8yMQD--0gAbANvDv83CxD_AwA5L-AOhAAL
HzWEAAATODwAD4QAZm--Ow3-PA0GAD4PhgAdBzsADwYAOA_GAAwPRQIdDbEFTw87DzwEACEXHwwA
DzgA--------By8PO4kGHQc7AA8EABkXHwwADzgA--------By8PPIkGHHGPPA89DzuvBgARTwYA
Mv88AAcAEAEHABHPFAAXfyAAER8GABePDAAX7wYAAjAAJF88NAARLwYAFQ80ABMvZAAWBFcAFx8p
AASDABAHBwAX3xMAEZ8GABE-BgAYvyUAF28lACZfPFYANv88Eg0ALD88KwAdHxgANv88CA0AE58T
ABYCLAAXfz4AA3wABV0AJztPIwATHyMAFhYTABd-uAAIEgAXzzoBAiQBGd9DABYTkgAIqwAP5AEZ
8SAfHARg-zYBwP4DsP4DoP4FkP4FgP4HcP4HYP4JUP4JQP4LMP4LIP4NEP4NAP4uAAkAESAVABFA
IQARYC0AEYA5ABGgRQBPwP4BYKkPGQGCAB83ggBuHziCAGnzOCMgBHD-OwPg-zwF0P87BcD-PAew
-zsHoP88CZD-OwmA-zwLcP87C2D-PA1Q-zsNQP88DzD-Ow8g-zwREP87EQD-PBP-OxMADwATIB8A
E0AvABNgPwATgE8AE6BfABPAbwBf4P88A3BcER4PMQB7AEIBBBkDE58lAyDgbggAML7QLgcAEI4F
APE3TsD_Bg89sA0PO-4ADQwuoP4JkE4NDD4NDI4NDA6A-gtwLg0M-gZgng0MXg0MLg0MPlAM-gsN
QP4PMD4NDO4NDH4gDg0Mzi8A8gA_EJ4NDP4CDQwOAAz_BA0EABADNgAQAEUAQgwQ-gBaAFEgDG4N
DG8AsTD_D0D_DVC_DQx_XgARYG4AEHAcAFGOgP4JkEAAkR4NoF4NDO6wDiYAIZ7AOgC-0F4NDM7g
rg0MTg2pAQwcMcIF8BPwFb80DzHQ3zQvMaDfNE8xgF80XzIPMQ8wDzRfMWBPNH8yCwDwCS8yTzFA
TzSPMg8xTzJPMTA-NP8yAT8xIAgAQQM-MRAIAL8fMR8wEC80-zIFLwgAGXEvMg8x-zIBDAByHzEP
MP8yAgwAMjAPNAwAEB8YAAAMAFA-MBA-MXIAIDAgCADxDgE-MDBPMX8yDzFfMk8wQE8xbzIfMT8y
TzBgXzE-xQD-Bi8yXzCATzHfMKAvMd8w0A8xvzDwFeQGHAMiAVCfNA8yLyYBAA4AHw8qARBCMA80
PywBEZ8NACFPMjEBYb8yDzBfMjQBEa8-ABA-HgATMj0BYA8yDzGPMvsAAL0AAV4AJDIvGQASfxEA
YDQfMg8wLwoAEjEpAQH4AAJ9ABAvdgABFQAQMloAAFYAABcAIA8wEgACLgAjMh9vAEUfNJ8yggFU
LzAfNL8iAABnAEEfNC8wEQAhDzQPABIxxABFDzCvMp8BFF8PAAKiAaFvMg8wTzIPMT8yqQExfzIf
xAAhTzKwAQAgARMvHgARMKwBEjD-AAG7AQBLAVIfMB8xH78BPw8yP78BNgAiARBwogBgoE80LzFA
xQHggF80LzEwLzRPMWBvNC_XAQBxACFQT_sAEA-qAXAxEB80PzI-vwEASwEBRQFUMQ8wAB-IAQLL
ABIfEgAATwEwIC80ugFBAA80H_QAQSAvNH8rASAxH-IAAIEAADQAAIcBkjAfMU8wQA80P8UB8FIy
LzBATmA-MS8yPvADLzFeQD80gB0AHzFOMF0cUB0PMgwQLkBdTDAMGw6QPRtcIAweEC0cID1LPGAt
GxwQLWscHkAtKywAHVsMGy5ALTscAB1LDCsuMC0bDBssAA0MKwwODgD-HgsMDSsMDgAsOwwLPjAd
HA07HgA8K05QPCsuACyOYBxeIAyOgG4wfrAugC7wE2QBHfEFNk808AMuAA5PMw8yAC7ADi8zDzIN
AHAOLzMOsA49BQLwBw8xTaAMPQ8yDEMMCz0McB4NDA0bgxvSBPAGQB4tHDMFFAUEExwOHRswDj0L
IxQFAgCiAws9CzAOLQsjBRAAtQQDLQsMMAwrDBMEEgBUKxxALCMPAGMUAyxQLhMMAHcFFAMuQA4t
DwBjDi0wDh0LEQAQHxIAQy0LMC0RAMIKDyoaFAMdGzALHQwSAII6AwQDKwxALA4ARwUaEwRfAC8E
E18AAggQABo9DwAnLQt_AAt9AAACAAB8ABMrewAAAgABfACP-zABLHD-NQS8Hx-wEYQvNPUBLkAO
DyoODzL1AS4NMC4N9AEuDSAuDfUDLg0QGQCADfQDDgwODRAFADFkTmQMAHAuDVReDVQuCQDwAH4r
Dg2ODRCuCwwPDA8KCQwA8A_dDgsPDB8KCa0gLVMOCyoJDVMtMB4NVB4pDg1UHg0LABNeCQAxZE1k
CAAm9AMHACL_CAQAcQ79CED-MAfZAB9L2QBhJS8Q2gBUEQ8PDw7bAFIRHw8PDtwAEC8XAAPeAB8q
3gCcFRXeABAWGCwE3gBTFh8UDxPeAAAXAA-eAKQjGh3dAFQbDxkPGN0AUxsfGQ8Y3QAAFwAE3QAT
HdwALx5N3ACRFB-cAFQgDx4PHdwAUyAfHg8d3AAAFwAP3ACjFCTcAFQlDyMPItwAUyUfIw8i3AAA
FwAP3ABeC_AJVm80DzE-5AkADgkC-AcB6AlAHzQPMhoIAMkHAhUAAfIJAGQIJF8yJwkTP80IEDBY
CADHCDIvMS8XABEwPAgRHyoARD8wLzT-CQEQCgAbCAEdAB0xFgoQH60IDxgKAgFxAB9vGgoBIB80
hgANHAoB0AkBKgAEIAoRH18AHh8gCgA5CgLOAAkoChE-wwoDFQAGLgoBmAADVwAPOAoAAtIANC8x
Tz4KEU86AABeADY-MB9GCjM-Mi8XAABXAAA0AAFOCmIfMh8xXzBuAAF1AQBUClcvME80DxUAAVoK
AZEJFjAoAANeCi8-MFwKOw6EDg8xANDwCCMTBCAPFv8VDEAPFv8UDiAPFi8U-zAJTgYQEAwARg8w
bycEAAAXAFYADxY-FRMAAAQAcD8VDxMPFj8tABYoBAAhPxQWABsVFgAfFRYACABCABYpBAABQgAf
FRYAAh8WFgAICFgABkIADBYADywACQjcAAHzAB8VCgEBNRAPFS0BryD-FA4PE0D_DSB_ARmTBQcE
ACcAByAXAgBPBwAnAEAACxw4QACREAcgFxAHAAcwAgAvEEc-ABwBfwBCBzAHIAIADz8AJT8QF0C_
ACQRMEAArwAHAAcQBwBHIAdCAB1vVzA3QAcwfQAjIBcQfQARN4EBD0AAIBJHNwECwgAfIDoBIQJ3
AA5-AA9CABsQN4IAPxAXEEAAGf8CBwsEAD8qEF4AHh86Hg0eDQAFAAN-Xg0APh0QPZsADCwxNFwA
wRAfKjAuDzoQPg0gDd4HBQMAfxBeAF4NAF1RAB0HrQBAAB0AHqgIQRAuHQADAA9TADWfHh0gLkAe
DR4Q_AAqYEAeDzogLk4AcBAuDR4AHh1OAEFeDQAt-wAvQB1TAB3CXyoAXg86Hk1OEF4QRAAFoQAv
AE2hAB-gLyogPg86AC4tAB4dIE4BAR8d7AEsAqEAAOAABfcABQYAECDyAB8gmgEoAZoAPwA_HagA
MAxWAHFeDQBODRAdtwAATQFfLh0gLRBVABrxAQoQBBBPKjBuEI4ALi86Lg0XCw8FABCvjg0Abh0Q
Th0wTXAADBw5bwD-AyAvKlA_DzowTg0gXg0wHS4NUAMAAUAgjgCOZQAfjV4AHA7NAMcALRAuDUA_
DTA_HSADAB8wYQAxAVwAIFAuXABxMD4NQE5QDQ8ALy4gIQEpgRAvKmAuDzpQtgBBQC4dQAkAIQAu
KgQEfgEBvAARTW4AX1AuDWAtZAAc9QSPKgCODzqODS5tLg1QbiB_EI4QTQAPvgAr8QUgTyowXg86
EG4NAE49AD4dMC4dQGEAMwAuLb4AA8MAD2IAJQS8ACcAPR8BDwkABT9gLTBCAi4BBQB-AG4dAG4N
AMcANw9oAAShjg0Afg0Qbg0gLcYAUDBODRBeYQBvID4dQD0gZAAZ-gZeCAQQ-zpKIA7-O0oPPQAO
-ztMDz4GADAADz0hAEw_IP1KwwCxLTIzLjMxOTA0NzYGAANuAJItMC43MTQyODUGACI2OH4AClkE
0GYcBPBY9VIgBfRSAxAFADAPOgAHAB8OBgBrfBDzUh4g-lJ6BVMyNi43Nd8AHzOXGgEAzwDvv-RS
IATzUg87EATzUg4FAFsPtAAhwBEOBBAPFq8VMA8Wv_ALAgcAUhAPFt8VBA0xFF8OMgwSOhMAgw86
TxVfDj8VEgACGgAXFSYAEhUUADAADxVJABQfCQCvDzogvxMfOjC_EDkMGV8RDgTwA58AERMAEgAE
nQASAJwAFgCbABIAmgASEI8AEiAHAD8wviCPABwPLQEDQE8VPw7aQAGSAFEfDh8UH3QAACMBM38V
Hy8BAAoAIk8VFgBZXxQfDl8xASYPFRQADz0BTQ_vAAQWAK4AFACtABYArAADQgEWAKoAD00BKsEE
BAQAHzsADh86Dz0FAD8AHQBAAAsfMQUQLKEXCwTwAR87gE5QcAD-KVAeTzouIA4dDz1ADp0OIBxA
Dr0eMD4dXG0_HTxQDK0MUB4gHH0MUA4dDDAcPRxgDh0MUDyQHPAAcwAcUjAfO-AEcQAhTnAIAPAO
IC5POh5gHz0gDp86DhAuMB69DgAPPR0_bVwdDgB5APACLBAMfRwgHnAcPRwwDh0MgDyFAE-wBBxA
JBEeDzEA--_Y8F8oKAT-PxYC-gUC-i4G-h0CTgLuAv4UBv4GBv4HAv4NAv4DAv4CAgYCjgb_DAJO
Av4wAv4iAl4C3gb_OwL_BQb_AQI_Av4RAgYC3gKOAj4CThIGDzIGEv4TAgYC-hYC-hcC-jQC-hAC
-ioC-mMGvkIAEBAbADAHAt43ABH_JgACKwAQA0oA-wA9Bk4C-iMC7gJeAp4G-iSzIxnCKCgErz8C
-goCDgbuVgBgbgI_Bv4JEwAhPgIIAADhAAEaABCuFQCA-gwC-hIC-jeGAKDuAgYCfga_Av4ACwF6
BgI_Au4C3swA0J4C-gECngJ_Bl4G-lCvABEuvwBgCAL_HQbeagAQR0AAMg0Cfi8AgS4CTgYuAv4e
RQEQMYIA4AAG-iAC-i4CLgJ_Bv4NJgAxDgZuhgAfAegAHOFvPwb_MQKOBo4C-hkGfr0BIFcGigAy
CAJe4QAQzgwAEN4aADBeAo5rABcTzQARfpQAoBcCrgK_Av4TAr7dAXRVBv4LAv4UOQFg-gUCfgJu
OQAgFgK2AEEBAv4LqwAxDAJOHQKBWwb_IQY_Aj4YAOEFAv4SBv4PAv4LBm4Cng0AHyDTABwgjz9c
ABEumgAQAsYAcEQCfgaOAs53AgGUAGH_CALOAh5PAhAEaQAh-gTUAUEGAv4cEgACzQEQLVUBQf4C
Bq7PAkACAv4bTwAQvukAFQbdARDeTwBSBQKOAi4VARIelQIxrgJOSgAQFyEBMB0GrgcBQR0C-gPa
AFAFBv4lBkQAECIkACBOBk0CPw0CruYAHGD-PwsC-m9gADEiBp6TABMWZAFBAgb_HtEAETAmAhAS
cwGQ7gL_Mwb_gwKOrgAi-gAqAEGuAv5OEABgDAKuBv4nVwIzfgK_RgAQNJgCAEkAzywC-g4C-lEC
-h8GjqQAHhNssQIwAQKejwMYFkACEAHzAzEGAr6sABALjgBBQgb_Dk8DEAEvAUCuBv6RsQAkDAJw
ASH_MzYEUAwC-joGEgAVFj8AEDauAEG_Av5SYwJPLQL_LqsAHhAZiQECtwFBIgL_BqUBUAUC-g8G
CAFRHQJuAq70AxA7ZwBSEQI_AgaCBADHABA6FAABIgIQbmwEEC4rABECzAARLYABEQxWABEcpgFB
CQL_BCEDEARkARIeXwMCcwFQDAbOAo6FAzFEAl5QAE8NAv4ayAAeQjcG-gk8AzEQAr5BAxAG3AMB
YQNBAwb_XHQDAfUBIf4FOQUQAScAExaEAACtAwQNABHeqAASRtYDQAQC-jKBAQSRARAEWAUAvAAF
OwBBHwL_JkcCECDEABACUwRPKwL_HsEAGQAUHfApNWvwBBtqG-AAG7oJwAvaCQigCyocqgkIgAsq
LKoZCHALKhzKCQgPNVALWhlKGToZCFALSgkcCSoEAPABGQgOMAtKCTwJCgk8CRopCA0AMEwJTAsA
Yw4gC0oJrAoAUVoJjAkqCgBkaglsCSo5FAATGgoAEDxDABBJTQBwWgkcCQoJHBoA-yYeMAtqGSoZ
GkkIDlDqSQgeUBmqaQgOcAgZankIHoAI6QgeoBipGB7ADhhpGC7wAA5oLvAEbvlJH4A1bxDwBB5v
D5tF8A29Dw7ADt0MDw2gDi0fEa0MDw2ADi0vEa0cDw1wEgAwHSx96ELwADVQDn0MHxEMbRwPDVAO
jQsAEF1lRPICNTAOnQwvEQxNLA8NMA6NDD8LAABjRAkNADh9DE8NAAAaAB88DQACAEwAEkxZAAFx
AAAaADIfNTBzABEtGgBQUJ0sHUwWAEBQHK1sEQD-D3APDRxtfAsfNYAL7AsaoBusGxrAChtsGyrw
AAprKixMIjA1bxUjARIUIwEREyMBEBIjAVAWrQwPEiMBUBatHA8SIwFRFs0MDxIhAeBMXRwPElAO
bQxPFgxNHBUA8AUwDm0MbxYMPSwPEjAOXQyPFgwtLBgAHyANAA0vHTwNAAABTAAkHUxZAHBPFgwt
PA8SHgExfUwtFwBTUO1MDxIZARASGQEfEhkBPxAaGQESGRkBERgZARAXGQFQG60MDxcZAVAbrRwP
FxkBchstLG0MDxc8AiAvGzECERceARAbHgESF_MBAA0A4ywPFzAObRxPGxw9LA8X9wAzGwwtDQBo
TQyvGwwdDQAvDTwNAAAQXWQAYgsMKwwNTF0Agl08CzwdPA8XPwIxCww9GABzUI0sLUwPFyUBEBcl
Af8QFxxtfAofNYAK7AoZoBqsGhnACRpsGinwAAlqKfAEaSUBIRAfJQESHiUBER0lARAcJQFQIK0M
DxwlASAgLUsDEBwnAXAgPQx9DA8cJwFgnQx9HA8cYAMhDyAgAAJgAwANADcsDxwLAAJgA08vIAxd
DQABf30MTyAMPTwNAAVDLUwPHEICECBCAhEcQgIkDC8aAAIiARMcIgEQHCIBHxxHAj8QJCIBEiMi
AREiIgEQISIBUCWtDA8hIgFQJa0cDyEgAVElzQwPIUUCUDxtHA8hQgIgLyUeARIhxQBwLyUMfSwP
IWADUC8lDI0sGAASIA0AOD0cLQ8ARi0MCwwRADA7LBtaAwMOABWLDAAwbQxrZQMDXgAQSyIBFSFk
AxIhZAMTIR0BECEdAR8hPwI-ECkdARIoHQERJx0BECYdAVAqrQwPJh0BcCotDyZtHAsfAWEqPQt9
DAs_AuALfRwLUA6NCw8qC20cC8AAEZ0MALEsCzAOjQsqC10sC_EA4RtKGz0sCwkgDj0riisNCgAA
FAAgLTwKAAApABFNCgCAnQsKC108Cwk9ABAKFAAQGVEA8AZNTAsJUJ0LPUwLGVAcfQsdbAsJcAsf
AhAZHgIQGR4CYBnACRtsGwEBH2sBASUQLgEBEi0BAREsAQEQKwEBUC_tDA8rAQFQL60cDyv-AFIv
HU8rXQABUF0bThs9AgHwAE0LjgstHAsKMA5NC64LHf8AcE0LHhsuGx4NAC8KIA4ADGBOC04LDTwM
AHFdGx4rHhsdDABgfQtOCz08VQCAbQtOCy08CxoKABEOAgCwHUwLClB9Sx1MCxoXAiILChIBHxow
AzgPswgXMhxKHLMIQAwZDCoEAAKzCHIMOQwKDDkMswhSDEkMSQypCDNKDKkKAENaDIkMswhUDGkM
KjkUAAOzCCAMOUMAArMIcwwZDAoMGQyzCD8cKhyzCHoVK7MIMwscC7IIYgscC10cChQDUCwLTSwK
1gIQPAkAJwkgCgA1fQtMCgBMPAtNPAoAcSwLTUwKCTBaAFFNPAoZMFoAsC1MCglQnSsdTAoZAAJA
CglwChQEHxkTBAUPkAhUI08WkQhFDxZMC5EIMwtsC5AIYAuMCy0sChMEAwsAHAkKACodPAoAAD0A
ER0BAVFtC0wLLQEBIX1L-wAf7f0AFQ90CEwVK3QIMwssC3MIANUBAv0BA_ABezAObRtMGz3yAFVN
C6wLHQoAKg08CgCRXQssCwwLLAsNAAFTXTsMOx0BAjAMCz0CAT6NKy0EAQ9TCFkTC1MIEBsTBhQK
EwYhClCjACBtHLcAEJ0KACUsCgkAAf0COywLXQoAACcBLj08CgAcLfwBTwssCy38ABwPLQhUIz8l
LghFDyUsCy4IMwssCy0IRAssC439AkQsCz0b9QJVLAstCwwDAz88KxwFA3YOFQgULhUIEi4VCADo
AB8uAQIDRA8mC20ABSIPJgQCUo0LKQtdBAEwbRtJDwMQCBQIMYkrDQoAABQAIC08CgAAKQARTQoA
gJ0LCQtdPAoIPQAQCRQAEhgUCCEKCBQIIgoYFAgiCggAARAYAAEQGAAB-wAYwAgabBoo8AAIaijw
BGgUCEwwS10Mo1YAFAhgTBs9HA8rFQgyjAstAgED6AMACQBVHBssGxz1Aw8OAAk0TAtMCQRpGxwr
HBsdHwMIDAIxbQsMAgAAJAIBFggPFgYUDxYISSD6AxMIMbooOg0IUMoICgg6CQgy6gg68QcSiAgA
IfoEBwAiSqj_ByLqCAgAADAAERr6ByK6KPQHL-oA8Qd4E83vBzGdDw0CCwEJCwD-ClOtC30sCwcA
gQogDq0LDQtdCgA7jQsNDAATTfEJIQ0LAgAD9QkxXQsdEABBHQsNTFAKYTsNCw07Df0JIP0A9gke
7fQJD4QQaTqdDxIDATB9a00DAVF9C00LTe8AU30LDSsNDAB0XSsNCy0rLRgAMks9PAoAEp0IACE7
XfUAEJ0GDBMa-AsP8gAAD10QYxPN5wch-QPkB1JdOw07PfMAEW21ATAdCz35AJFtCw0bDRsNCz3l
ADRtC20KAAAwAAEKABCdCgIePAoAEU39AABYAB8d8AFVD_MHDhStNBATzTIQAP4AHxz_AAwzCw0b
9ABBCz0LbQoAIl2r9QEh-QPvADFtiy0IACH9AvQAP31LPfIACQ8GEGsxbT8h4gIA6AAE5AJCCw0b
feYCEa3XADN9S23UAjYtCw3gAgMCACQdPBwAFC0MABKL3wMv-QH4AFUPzAcOEq3KB2IfKs0MDy7a
AxEu_AAAtAMlDSvtARMNAgAD7wEA1AAD7QESiwgABP0EBOQBAiQABAwABD8AABAAEzBcAB8d7gNW
D9IHFxPN0AcA8AIRKwcAAQABIP0E9wAkjUvKBR8t4AUDEiveBTKNC40IAD9LTTzvAVryFmnwBBk8
CwwLGfAAGRxqGxjACRyqCwkIoAkM6gkIgAkM_gEJCHAHAPMBDzVQCQxKGUoZSgkIUAkMOngYUDoJ
CA4wDwACeRgxOgkIDgAAehgAGwAQIA0AFKwLAFFKCYwJSgsAbQtaCWwJWhYAEUp-GBFKVAAjC0qA
GLBKCQgeMAkLWhkqGTIAoFAIC-oCCB5QCAmXAGAOcAgJ6gnhBzAZqhnjBz8ZahnlBzDAbvAEHj8R
DxAPEQ8QBwLwAh8Rbw8fEB8NwA4fEa8PDxAO9AdQDxHvDw70B2APEf8PAQ71B3IPEV8PLn0O9wdQ
DxFtDhyDYqENUA4MfQ4cDm0OHQIQDBFgEG3_WkAMfQ48CgApCiALADNtDkwLAHQPEG0OPA59FwAE
CwAhCW1XYAAsAhIJZAAAMAITCWQAwApQCwl9Ll0OCxpQC5VaADoCMA7tDjoCMB6tHjwCMR5tHj4C
H24nAysQEyYBMBYPFR9nASYBwRZvFB8VHxLADh8WrzxngBKgDg8W7xQOFwgAvDQgAQ4YCAQKAAEl
AWAWbxRObQ4PEHEPFl0OTA5dGQBhMA4MXQ5sDQCAMA4MTQ6MDk09ARUgDAAZCgsALw8VFwACEglE
AAEoAQJcAAEoASNtTiYBL-0BJQFPEBglAXEbDxoPGw8aJQHwARtvGR8aHxfADh8brxkPGg5KCFAP
G_8ZDkoIYA8b-xkBDksIcg8bbxkubQ5NCDEPG200AgBSCBMMygABJQEDKwIALwFMHkweXQEBYQw9
DqwOPQsAJg8aDAAHFwBBCU0OLJViEk0nAVRNPgw_TU8CAEFlASkBP20ubSoBTxAdKgFxIA8fDyAP
HyoB8AEgbx4fHx8cwA4fIK8eDx8OdghQDyDvHg52CEAPIH8eXQNhHHAODyB9CgABKgFQII0OjQ58
CAAWABMMGAABdQMRDBkABQsAAk8CMX0OLOUACQsAJg8fgwMHjgMUCQsAC08CAs8DDygBVhAiKAFx
JQ8kDyUPJCgB8AElbyMfJB8hwA4fJa8jDyQOrAhQDyXvIw6sCGAPJf8jAQ6tCAQKAAEnAWAlbyM_
fQ6JEDEPJV35ACMPIXcDYSwOnQ4PIXcDMywOrSgBAAwAIz0eVgIADQAARWICDwCPDyRNDjwuHA5-
A4IQJy0BcSoPKQ8qDyktAfABKm8oHykfLsAOHyqvKA8pDuEIUA8q7ygO4QhwDyp-KA8ufw0AGHAN
AAEzAWAqjygPLo8PABNQHAAlDyogABMwIAAjDyokABMwJAAWLyQA1iAODypfKB8uTyofLl8TAJUv
KC8ujyovLi8TAB4pJgAPTAAAGSlwAAGDACMpfxMAASYAAB4aJQ8ptgBSDzVQDy4jAAMfAEVQDy4O
DwAAMxoyLg7vGgBwgA8uHq8oHgsAMKAfLhMK-wQfLh81wA0fLm4cLfAADWwt8ARtkAEhECyQAXEv
Dy4PLw8ukAHwAS9vLR8uHyvADh8vry0PLg5rCVAPL_8tDmsJYA8v-y0BDmwJkg8vXy1PK18tDnAJ
sA8vTy0fK08uHytPEwAAEQCSPy0PK48uDys-JAATMBMAFK8TAAQRAABuAFYvLh8rHywAHyAbACUQ
LhsAIk8uBAAHMgAAnQAxHy4vNgAWTy4AE28uABVvowAjLl8TAAHaABUfEwAmDy4EAAT1AAAOAAUF
AQC9ASIrDh4BALoBMisO7xcAcIAPKx6vLR4LADCgHyvHCiEfK7oBHiu6AQ8sCkkh_gMpCiKqLM8J
YQy6DAoMWh8KI9oM_gkjWowJACH6BQgAMws6rBEABCMAEws2AAAQCiOqLAoKL-oDBwqPAgoAAgYK
II8PBAABBwoHDQAB-wEwEZ8PBAA5Dg8NDQABLgIBDwBWDw8PEX8TABN-EwAKFwAfEBcAA0URTw8f
FwACBAA2HxFPNgAhTw96RQUfAAAMABVPmwBDED8PPxsAUj8RPw8O7yJRDxD-DwMjAFJQDw0PEOcA
AIwCJA0O8wBScA8NDu8wAHCADw0erw8eCwAwoB8NNhMhHw2MAh4NRgQPegpgII8UBAADfAoFDQAB
-gBgFm8UbxZvDwACDQBSDxZPFA8RAAE9AQETAFoPFC8WDxcAE08TAFUvFC8WTxcAEhUuABxPQQAY
zyIANT8Wn38AFRWOABofDwAAeAEyEg8VxgAAeAEkEg7SAFJwDxIO7zMAcIAPEh6vFB4LADCgHxKr
EyEfEngBHhJ4AQ-NClQCCgACzAox-xkDygrBDxtPGT8bDxk-G08ZHQBhMA4PG18ZVUYjGw8IABBf
GwAEGQAzDxkfBAADGQABPQEBGwAcbxMAAloABhMAIxqPVgAWjyYADhMADCYASTAODxqmAAGRARIa
wwAAjgEyFw8a3AAAjgEiFw4MAACOATIXDu8wAHCADxcerxkeCwAwoB8XRxQhHxeOAR4XjgEPMQtK
M-8eATALAgoAAjALM-8eAzALEE9OAFMePyBPHjULQQ8gXx4HRyMgDwgAEF8bAAQZAFMPHh8gDwgA
El80ABMgGwBWPx4PII8TAFVPHq8gTw8ARx--HgUuAD6PIF8bALIwDg8fbx5PIG8eDgkkIg8fqQAA
dAEyHA8fwgAAdAEkHA7OAFJwDxwO7zAAcIAPHB6vHh4LADCgHxy9FCEfHHQBHhx0AQ99C2BjXyM-
JY8jfwshXyOPRwIRAAH6ADAlbyOvRzAfJZ8TAAQRABLPIAARIA8AOE8ljw8AMQ8lLzMANS8lTxcA
EiRGAAoEAB5PNgAABAAJNgA1jyVPiwBSJP8jAw5pJAQMAACCATIhDyTQAACCASQhDtwAQXAPIQ77
AACCAVAhHq8jHgsAMKAfIU0VIR8hggEfIYIBLB8u0gsCFB7RCzIPJw7RCzAPJw7RC3X-KAEPJw5w
CgAFywsQJwQAEA4NAOFPKC8nDygPJw8oLydPKCQAETCrCwATAAoEAAAUABQOHQATLwQAEl80ABEg
FwAYjw8AVZ8oDyefDwAbKR4AD0QAAycpX3AABAQAFV_XAB0prgAF5wsC0gAB4QASKe0AEB8MABQn
_QBScA4PJ_8yAHCADh8nrygfCwCQoB4fJ28oHycengFAHm8nHp4BH27gC18EzAoRUAwAEwPWCwIK
AAH6AEMv-y0FyAtBfy1OfRcAAG0LSH0OLQ4OADYNDg0QAFgufQ4NLh4AFr0aACROfVsAMS79Az0L
BQsAA28LIf0BFwAAawsA3m3wAw81cAwO7Q4MG4AMHq0eDBugHJ1t-wAbwAscbhwr8AALbCvwBGs2
AR-mLPkJMAn8AwsMCwoIDzUQCw8IAA4ABy4FRhUCkRUUSnYVBZEVLw4gkhURHwySFQIWDJIVASMA
ApIVAycAABMuH2qZAAIfCxAABDAK_QYHAI-4CA5A-gjwDigBHnL_CTAO-xEDkQsAvnAByQFfEf8P
BQ4MABlFfw8unQ0AADUVE40OACMMjbEVAw0AAXMTAg0AAp8VDw0AAQIVEgUNAACkFQ8NAAMWLGgA
D3UAByWdLgsAFf2yAD8Q-QUVAAkyDf4GCQB--w0IDzVA_1sBISD-E1wBQxYDDxXtfAOnCk--FAUO
DAAlRX8UTn0NAAMnAQEOAAXcFSUPNTESDw0AKAlOAAloAAHjAxUSOQELCgAvDxUVAAsAWAEBCQAv
-xJYAScQGFgBIhsDNAsgDxkcChEgBAsvBQ4MABlFjxkujQ0AAqoUKA8X8QAPDQAAAhMWKA8XMgEC
DQACABYPDQAOBhwWAxEARV0_DD5SAANSFQMNAAWfAAFLAQKpAD8a-QUVAAkAYAEBCQAv-xdgAScQ
HWABIiADBgsgDx4ICgBXCghjCg8MAAVFnx4OnQ0AH50MAAQD5gAYHPMADw0AAAOTAQ8NAAADkwEP
DQAaCUEAAVsBFRxGAQMpCy-9BRUACQBbAQEJAC--HFsBJxAiWwEiJQPtCiAPI_EJESDJCi8FDgwA
JUV-Iz6NDQADEwUBDgAFeBYFeQIYrQ0AAHsWBw8AAn0WBREAAn4WKA8h6QIYIRsEGCFjARYhGwQV
IUEBCwoALw8kFQALAGABAQkAL-8hYAEnECdgASIqA8sKJA8o6hVP-ygFDgwADW_fKA8unygPABQL
KBYPEwABD60WKB8qrRYJD4UAHQ7JAA8PAAcfKR0BBAgYADIo-gYKACD-LqgBH-2oASIQLKgBIi8D
1QokDy1MCgKPCg8MABdlfy1PK38tDwATX8EWFl8TABNPwxYGMxYKwxYPqhYADxsANQCEFh9PxRYR
Gy-FFg8TAAgEwRYaDxsACwgBByMBGC4vAQ8YAAQyLf4GCgAu-yvSAQ9wC0wECAAjuiwDCwPVFi8O
INYWCB0M1hYINwAruiwuAA9LC5sIDAAOvxYPDwAbC74WD9UWBA-sFiIfEewWCAIfAAbsFi9PD_oA
DgcMAB8QGAAQGg_gCx-9oAt1IJ8UBAAPDwAFBQIXBrAWDwQXKR8WBBcOFxYEFw6QAAwPAA-VAAQf
FRgAEBoU2Asf-dgLaQ4MAA-AFgUPGhcDBhsADxwXKQ4JFw8TABUOTAAO0wAODAAfGhgAEBoZHgwf
-R4MXQ8MABETXzIXC-4WDTIXBhsADzQXJR8gNBcHCRsAXn8eTyB-GwAPDAAIHx8YABAaHk8MH-1P
DHUIDAAAVBcnryMPAAJWFwsTAABWFwsTABjfDwA6TyWfHgATL1gXHF9IAAoEAB5fNgAcLxcAGI8P
AA7HAA0MAB8kGAAQGiOJDB-9iQxdDwwABSCfKAQAByQMuC8qDygPKg8oLypfFwAAEwAKBAALHwAT
LwQACRcAGI8PAA1rAB_PRAASBnIABAQAH1_wAA4LawAO-QAPmQyiD8kMICgvf9ALXA8vLy0PEwAT
DwQADRcAHC8TAC6-LVsADoIADgwAD0AMaxIHPAww_QUMiQtTDAn7AwkKAD-6AwkUAJ0DxgAv-AdV
DDATB-cKQhH_BQ0LAG8NDh8PDxAEAAEA72cEJAAXDxgACgQADyQAGwYUAA5sAA_QAP--EgW2Aij9
B7YNH-y2DSgTB3kMEBZcABISigAAH5YPBAABNQ8UDiQAFw8YAAoEAAckAAcWAAoEAB8ObAD--zcF
tgIo-Qc4Dx-8OA8oEwflDRAbXAATF64AAEcPDwQADh8OMAD---9YBZoDKP0HiBEf-IgRKBMHTxAQ
IFwAEhyWAADWJwUNABAfwCgJBAAnDx8eAAcYAAIEAD8PHg5JAP9wBc0BKP0HJRIf-CUSKBMH3hAQ
JVwAEiFzAF8PIw8kHwQAAhUOJAAGFAAKBAAXDyQABhYADAQAHw5sAP--NwW2Aij9B50TH-ydEygT
BzgSECpcABMuigAA7yoPBAAOFg4wAAcWAA8EAAcfDmAA----KAWaAyj9B9sVH-zbFSgTB7UUEC9c
ABMrlgAA6hUPBAAOFQ4wAABCLQ89AP--DwVfAij9Bx0XD7sCIfECMenACbwLDAsIsAkM2ggPNZAh
OgIGACkOcCg6Hw5TRBYWC8EuEBCVLhCsky4hEAm6XABAIzAACQvPXBJqCwAEFgAXEFJEER4uAAbA
LgZSRAZTOiAJC5YAEx4IAEAOcAkLVDoCBwD-BQ6QCQvKCQgekAkK2QgOsOgewO5QGwEeU_7ADr8R
cyNhDbAODxHfeSMUkEQ6BQkAAawxD1ZEJSIPEKAuEAv7nyEMjYUuIQsQFwAQTAsAAOOjAiQAHY0N
AAAnAAKXKSELHw0AAqouAWIAIw8QbwABKDEgEI3sQAGSABAQwT8VHwoAAb0AIBDtEwADCQAB4wAg
EM0SAL_QDg3eCwqw6xrA6kABH2PvE8AOvxYDIzESsA4oaxESXgAC7DkFCQABhAAP9zkED3FEDyYP
FWAuEBAZABGMGQBEEA4PFQwAATgBDw4ABgIqAAJPAAFIARMVfCoD3zkRbYIAAUgBNBX9A5oAMRX9
ARYABQsAAcYAIRXtFQAECgAB7gAhFc0UAABNAQASACCw7985H_tRASBTGMAOvxvEImEXsA4PG9-K
IhSQxTkFCQABiwAH0DkPnUQaIw8ankQHTwEAkgJAGk0OrCxCAT8BDw0ABAInAAWkRAFOARIaiC4B
ZgAjDxqoRBIfDQARLuICEFBoLgSWAhUalgIUGpYCAAkAAecAHxqWAjBTHcAOvyBjImEcsA4PIN9p
IiOQDnw5BQkAAYQAD7hEJiYPH3IuEhDwAwANABEQGQATLBkAQgAODx-oAw4OABUQ2UQAGDkIDgAB
SQETH8cBA285JX0unAAxH-0BFwAFCwAByQAhH_0VAAQKAAHxACEfzRQAAZkCEByZAh8cmQIkUyLA
Dr8lKyIwIbAOpiEASw0UkFw5BQkAAYsAD2c5BA-kRA8AvEQEay4SEBkAED00MWMhEA4PJF1qLgJB
LhEAEgAAay4IEAATjA4AAjAAAfIDESFcARMkXAEDRzkB8gMDRzkk-QOiADEk-QEWAAULAAHOACEk
7RUABAoAAfYAISTNFAABWQEQIVkBHyFZASRTJ8AOvyrqIWEusA4PKt-wIRSQBUUFCQABiwAfKhBF
ORspFy4AwYITbz0uEG8TAFMQDg8pP2EuEj8kAEkADg8pJAACEwATj0oAFY9KABkpbgAeHxMAAZQA
Bg5FGh8PAAHSABUp4QABkwEARTkECQEiKe8XAAULAAEzASIpzxYAUJAODyjeFAAgsO8nRR-tmAEg
UyzADr8vyiFhK7AODy-f0CEUkC05BQkAAY8ADxhFOx8uHS4EExCULggbAAFYAE8QDg8uGQACAZ4B
Iy5PEC4aTxcAAPIuBFEuFV9iAAoWRQG5AQ8pRQUrDy4WRQHFAWUuby1PK28CARIuGwEXHwwAATMB
Ii7vMgAFCwABXQEiLs8WAFCQDg8t3hQAPrDvK8IBD-gKPw8fRQYSCyYuYRAJDGqMauUKIvoH1woj
SqzgCjHqDGoiAAQeRQDcCiO6LNYKL-oD0wqTAgoADyJFGxUQDQABOgIjEa-OLQEvAACuChOPEQAW
D0QAHwAXAAcfXzQuABVfXgAPIEUHEx8fAA00LhUwIEUXHwwAAeQABitFBQwAARIBERAdARYfCwAB
PAEiEM8WAFCQDg8P3hQAPrDvDVgEDzMLVw8qRRUbFSYuERAGOgYmLiN-FEcLF18kLhJfLAAAQgsT
fyQuGn8TABXfTgAGKEUBhQEXFRUuAH8ABZsAAYABNhX-FFwLAs8AFx8MAAHxACIV7y8ABQsAARsB
IhXPFgBHkA4PFGILH_1iC1kCCgABvQAPMkUjLxpfFi4DERC-CwQEADAODxdSCxNvWAASbyQAAIML
E59UAB_fEwAGHBAwRQGVARsaFC4AiwACwQAXHwwAAdkABjtFBQwAAQcBERoSARYfCwABMQEiGs8W
AFCQDg8Z3hQAPrDvF5YBD7MLQQ86RTgjH1-_LQsGLlMQDg8gbwYuI58e2As0Xx6vIAARAJItFQcM
ADJvHo8dRQE7AAOtLQGAARcfBC4AcQACpwAXHwwAAb8ABkNFBQwAAe0AER-4ABYfCwABFwEiH88W
AEeQDg8e2wsf7dsLZQ9CRR0XJEJFERCJOgPqLQCrCxN-ri0H6C0TABcAGw8EAAsfABMvBAAVX1oA
BkBFAY0BBawtHzBMRQUBDAARARgABgwAAfsAESQGARYfCwABJQEiJM8WAEeQDg8jDAwf7QwMTwIP
CwYKAAQGDCMOjQQMcU0uDQ4NLk0bAAABDDNdDg0CABNdAgxRXQ4tDi0OAAEtAUMqbY5t_AsxrQ6t
FgAA3gsCFgADDAABMgAUbTIAGilUABIfFAABeAAUXXgAESlLDwPiCyT9A6oAMSn9ARYABQsAAdYA
ISntFQAECgAB-gAhKc0UAAFtDQXVCx-s1QtZBLgKEVAMAA8NRQpTLn8tTy40LQCxC5SPLQ8uLy0P
Lo_pCwARAATyFRKPKAAVABcAHC8TABXPSgAGWQABZgEFRS0AdAACigAXHwwAAawAD3wLaBDseQsi
yQx6C0AJywkMfAtBCcoJDH4LQAnrCQx-C0EJ6gkMgAtQCfsBCQyCCwBAUBEMgwsCDi0VMCEtEBAT
AEAFCQwICQAQ_gkAJA4AEwAlDgAUABQQOgAlHhA7ABQwYQAlHjBiABNQhgAkHlCHABNwqQAkHnCq
ABGQwwBPHpAJ7JELKSLvEYsLEc7JKh_Q9yoCAO8qDxoABwC1AQ8cAAEEcSsPHgALAAsCJg0OFgAO
IgAPIAANAGUCDyIABQAEAAAkAA8iAA8AxgIPOywHBCYADyQAEQAfAw7yAA64AA8oABcfECgACgAk
AB8fJAAQAigBD0QACQ8gAAsCqgEP9gAFHx8eAAoDJAIPOgAEDxwABwGSAhHOJQAwkA7tEAAC3Qwf
7N0MIyLvFtcMEc6kKgDtAgTCKgrKKgHtAg8sKwQBrQAPBCsGAR4AD2grBh9QaCsGAj4AHlBkKwlA
AB8wIAAGBEIAHzCeAAQIRgAfECQACgRKAB8QrAAGCEwAHwCSAAgGPCwfAHIAEgKaAA-gAAsD6QIO
4gAPKAEUAkQADiYBDLIAD4oBBQJAAB5QQAAJyAAABgIPwAAFASICD7gABALtAhIS7QIFSg4f7EoO
IyLvG0QOEc6bKQDtAga5KQ-JKQEPIgAPA-0CBxYADgQAACgADyYAEwMPAw5yAA96AAAPKgAXAv0B
Dn4AD4YABQ8uABsDPQMOigAPkgAIDzIAHwMxAw80AFAfEP4AGh8fMAAcA4wBD4wAEh8fLAAYAzoC
D7AAEA8oABMD2AIPoAAMDyQADwTBAxIXwQMFdRAf7HUQIyLvIG8QEc4zKwDBAw5iKwEWAA_WKwAA
rQAR7yIAAbcAByIAAAQAAiQAAB0BD7grAxFQtisSAScAAcQBByMABAQAAB4AHzBdAAAGYQAREEcA
EAUNAB8QbAAABnAAAr0CDkYsBtAAFgBLAAO2Ag_SAAQDpAIPlAAGFjDbAAJzAg9yAAUeUGUAA2EA
FVBcAQJoAQ7QAAItAg9WAAECIQISHCECBRoRH_waESMi7yUUERHOQioAIQIfD2gqAgElAg-KKgQe
cKYqB_oqAccAD_IqBh9QPAAEBCIAH1A_AAQE-iofMEAACAIkAB8wQgAGBsIAHxBGAAoEKAAfEEoA
CAbSAB8A2CsKBLgAHwByABIOmgAO4AACrgIP4gANDgYBCkQAACAAD0IACwGqAQ9AAAYBHgAOPgAP
JAIMAjwAAekCDzgABALtAhIh7QIFfRIf7H0SIyLvKncSEc45KQHtAg9nKQoBIgAPuSkMAdkAD_Ep
DgEmAA-XKRAfUCgADgQsAB9QeAAOBqQAHzAsABIEMAAfMIQAEga0AB8QMAAWBDQAHxCQABYGxAAf
AGYAHgM0AA9oABwPnAAXADAAAysGD5QAGA9eARMCXAABlQMPuAAUDhACD7AAAwEoAA_oABAOsgIO
oAABJAAPmAAMAsEDEi7BAw-dFC0i7y-XFBHOPyoBwQMPbSoKACIAIs8tdyoB0QAHIAAOBAAAKAAA
JgAT7zIAHlBgAA9oAAQRUBArEgE3AB4waQAPcQAIGDBLKx4QcgAPegAMERA-ABIFPwAfAD8AHgI0
AAVBAB8QuwAaAv0CBb0AAfgAD3YAEgLaAgUxAQFoAQ9uABAXUJwBAc4BD2UADBdw-gEChwISK4cC
BfsVD4cCH-AETEmASYAJSwlgCUsIYAkLSgsJQAYAcAhACQt6CSAXLABUITCKCQAQAAGyQyALmhAA
IQgOCgAXmlVPQDAI_gQ8ISIICTwhAltmLx5gW2YB0qAJG6obCKAJC_oLCIBdIRNwZCFiYAkLegh6
CQAhagkKAIFwCEoZCA4IWkcA-wQ5GB4AGDkIHqA4LiAOOB7APmA_988fsTF_8AUObxAfDfAEiyAy
HxAPCwABwCBl8AMODxBvCgAD1CAl8AIWAAUKAEcPNfABDAAAFiEffwwACxHgUCEFCwABFgAWHwsA
DzkAABJvIwAGDAALdQA3Ag8NCwAWfwsAFA65AFQDDw0eTwwAMR8NbggAbwx9DPAFfDevHxFSPmYR
bzhmQB1vFB02ZkEdrxQNNGYTDRQhAggAAdcCBBIhAwkAAR8DAlkgBQkAPw81QAsAIxRQVgAWHwsA
AEZhQRL-FAAWAAXVZT8PNZDVZQOhDB8Sbhss8AAMayHMHzRGsB9gGPAGHk8aC8-BHU8ZDQ4PF-AC
Dg1-piAAgM4B2R8FCQAA9gEOCgAgsD4KAPAEPxeADj2vGT0PF2AODf8ZAw0PF_wAAdNNFDAJAD8P
NSALABghMA6RIBAfBQAiDk9FZTBAbh8RAPAMHxdOHB81YAtMCwwfGQ4MC0wrkEsMGg4Ma-ABBwA0
C-AHBwAQLgYAf0wL8AhL8BgfAR1wOA8d8AwO8EjPMPAKDi4gAwcAAIXUBAkAIAgOnQ4lDxwJAEYP
NfAHCwBQBg4PHz8fAAQJAEIPNfAECiAxHPADzB8wDg8cFAMRHwBOJPAACgBwDzXQDg8frwsABQkA
AXzaDwsAFhTQSwBQHzXQLm8SZQDWAa8fHG4dHzXwAQxtVs4fABYBgFJfIvAFHj8kCQxi8AIeHyQf
lB5l8AIOHyQvDAAzDyQ-DAAUAwwAALoDDxgACB5PDAARsOQfESRiHzCgDg1AAwEOABANtM8jDyQR
ADBvIx4nHwQgAKJ-Iw8kHjAeDA8jEgBwDI8jHD4cGw0A8CFQDgybPCsODRpQDgz7AQ4NCnAODOsO
DRpwHusODQqQLqseDRqgHR5rHh0awAodbh1-cBFtf3APXAMeMlUPLjoCMAsODTcCMCkO8D-WUA3w
CA4Mw2MVDgkAYQ3wBg4MLxMAMQUODNdj0PACHgxvKA8nHtAeHI_gY-AfgC4czygfJy5gHR4bjygb
Hj2ADR4LagseLdANDgtKCw4t8AIOCyoLDh3wBQ4LCggAEQYIAABvAAAOACIIDocAUR3wCg4NkwBP
DA3wNxmXSgAFAZFMSIBIgAhLCGAEAGYLDDoLCEAHAEBaCwggBwDRCQgwCAt6CwgACAsMaqkHcAgL
igsICwxAB3IgCAuaCwyKCgAn_gUIACIwCPEoM0AIC60HEgutBwHaKEKgCAuqBwBADLoJCAcA09oJ
CIAICwz6AAkIcAiwB1IIC3oJegkAMWoJCEU0IHAINDQRDgYAcB6ACEkIHgAFAK_gSB4gSB7ATkBO
sgcg8QF98AUNbxAN8AUNDh8RLw8OCgAWTAcAIAQNktVQ8AMNDmwdAFACDQ5sC_kGEQEJABUKCABQ
AA0ODxEKAFLgDQ4JfAgAGYwHAFF8Cw0a4C4AOxrwAD4ABEYAQAINDlwIAEADDQ5MCAARBAgAJPAF
BwCfaw3wBX0K8AV6YQcfoFGPEvADDo8VDvBQCmAWfxQNDuAJAFCfFA0OwAkAML8UDVLUANgnEA30
0wBsKEIADQ5gCgBBAg8TDg0HMAMPEzbWDwsAOQJlBzAPEw7d1zEN7xQKAEKADg3PCgBCoA4NrwoA
QsAODY8KADDgDo8HAJ-wAY4c8AOM8DMTZx8QF6sJMBoO8JcLQhtfGQ0YAWIbfxkPGA5YBzMPGA5O
Bw8KAAYBYgeRDxg_gA5Nnxk9LAFyG-8ZAg0OQAoAUQQPGA4wOAcBLwAfIAsAEKJvGR8YDQ8ZLxhv
YwCQMA4NTxkPGB4N4bOAHgxPGQwOHzXS2IALDg0PGQwOC93YYGBOGw4NClnXUk4bgEsADAAzEEvw
CgAs8AcIAB9OeAcjNlUPHHUHADcFIQ0OaQdADQ8eDTcFIQ0MEQBgBg4NDyAc_t9BDg0LHBMAdAQO
DQs8DQ4IABAKzghEC1wNDggAEAqsAEQLfA0OCACRCtAODQucDx0OCAB-CQ4KwA4NrAcABbDQDg2M
CQ4a4A4NbPjdzwEOaQ4a8ANuGvAFakcHH8JRbyHwBQ4-JA8iDh-0BhAPyCYPDgAiAMezJA4PDgAX
Pw4AHk8MADawDlANADKgHg1TB0APJA6QnwbBQA4MbyMMDnAODA8iDgCDfyMMDlAODAsPAGGLDF4M
GwoLAGGbXCsKDg1KB-8eCg4dYA4M6woOHYAODMsKDh2gDgyrCg4dwA4MiwoOHeAOig4d8AGOHfAD
jfAzSgcmBEYHBQ8CEipHBwIJAAMSAiEqH0EHBgsAAP4AUB4NDyo-UAdQDzXgHh3jUxAfDABioB4d
HyqPDAAQYAwAAGQHUh5gDzUeImtUHi81cAwja5AssAweC08oCx5xCwFtBzEs8AMIABMMbQcTHAgA
EQxvBxEcBgBADPAKDjcKTwzwDAxxB1VBCUwIYAQAUgxKDAhABgBwCAxrDAggCQYAgDAIDHoMCAAJ
BgAAbAcxDIsMBAByDiAIDJoMmgkAIvsFCAAQ_ggAYDAIDPsDDGoHQAz6AQxqBzAM6wwdBzAMygxj
ByAMqwcAEAkOACCgCRsAEoApAGBwCAz7AQxeB0IMegx6CQAhawwEADAOcAiYABEOBgBAHoAITGcH
H0xnBzEREcoGFQ92IiTwBcgiAgwAUgwPEBwLdAdCHAscC3cHAAoAEgx6B2MMCxwLHA5_BwMNAAE8
BwMkAHQK8AAPDg4LDgAi4AkMAAAmACngDQwAFgwlAAQNADQODRolABIOogcDDAABYgABJAAMDAA0
Ag0OIwASAxcAEg60BwILAADTAAO9AD8FDW66ByyADxOPFg8S8AF-sxkP7SBcDxYPEuAXACEfFF0w
LxLAGQABER80AB_gGwAEA1MAH4AfAAUEWwAvYA4gAAcAYgAALwgFDgANBAASDQMIBA8ADoQAAyEA
D2IABwQhAA9jAI4-UA4NHwAHAfMIHw8dAAY-gA4NGQADAKoJDxcAAADKCQ0VAF-gDo0OHCsJJ-EB
DxhfF-AFDxhvGw8X8AMPGDUxFxkEAAAYABEBGAAEEgAGBAARG6YQDxsAAwFLCQ8bADxPsA8YLh0A
A18_gA8YTxoAAE5PGw5g1QAPBAAGPhsOQOsADwQAChAbAwoHEAAPBAAMEg0ICg8xAI5hLQwtDA8a
vY4SDagKAciOEA3OwhMeDAAwDhpA2egBGAqCCg5NDhpgThoNAGIAThqASgAMADMQSvAKACXwBwgA
EC0GAF9OCvAISqcKKxYgmAgjDx2oCgAJABEfFAARBgsAEB8WAAALACEvHhYAQAQPHQ1OIAEuAAEN
AAA1EgIyAFACDx0NbxgAEwI7AAAcAAE2ABMANgAFOgAAEQARjxwAONAODeIgEA3VCnAMHx4cGxwb
HwBRwA4Nqw3NChALEwASHAwAIgwbIAATCh8AMNAODREAIQwN6QoRCygAAOwKH23sCi1CDyJPJfgR
IQ8iwQonJA8QABEPaB4JEgAAfB4PMgAMAiIAAOIJIw8hMgAqJA8UAAImABgkFAAXHzoAAmISBzsA
ABULARsLJ0AOPgAAGQAQkHYAAxkAGB8ZAERwDyIfGQApDyQbABFQqgA7JA8lUQAEIQBTXg0fIw3f
BQkbAFNdDA8kDNgFUxwPJBwLAgADzAUkHAsCAEYNDhqAEAAAtwEVoA8AEA2l7BUNKAAAogWPGvAB
jhrwA4qHCysZKocLEimWDSUPKJcNAXYcApoNAoAcFA2HCwEOAAESAAGEFzAMDyjDAyAMHYbnJQsM
AgAQHYjnKQwLAgARHZoLCiYANSpwCigAcR0eKrAKHg0MACANHrsTIQ4NNwQxKvADNwQA8wMALA4A
0QITBgMEEQjH6wAGAM8K8AoOGvAKDgrwDAqqC1DxJlQp8AgZCwwKGPAEGSsMKhjwABlLDEoYsBlr
DGoYcBmLDIoYQAgciwyKGwgwCBocWxwLWhsZsAuQOhwbHCobGhs5mQtQShxqG0m5GoRKC4oLSQgO
QAkAYFAISgtqCw2TAwkAJA5gCQBQcAhKC0obAPMYcAhKa0kIDoAIOgtpCzkIDpAIGguJCxkIHpAI
CgupCwkIDqAIC8kLkDAv8E3kAB2BVQ7wCw4PEQ8BFRERwxkhCA4xPDcPDw0LAAE2AiEfEGc7Fw0L
AAHSD1AvEA8RLxgABgsAACEFcQ4-EA8RPw-RGhIvSAATEBwAMwAOPxEAASAAFAA4AAMgADPQDj8Q
AAAfABHQHgAVTx4AM7AOPxAAAB4AEbAeABVvHgARkB4AEX8cAKGQDh8QHxGOHxAfGwAQcPQuMRHO
H1JrAOY8Qf4BDxAZAI--DQMfNYD9AyrDH2FxLxPwCB4KC4AUHxLwBB4vFTg7cB8S8AAeTxVvO2Af
ErAebxV1O2AfEnAejxUEO4AfEkANnxUfFiM7gA0wDQ8WbxUfNgAgFW9NCjAPNSC_CTIWPxU6gSE-
FActMTUgDbILEBVGgQHe8iEVHhYAIC8UJTw0DxUuJAAQFQfzACQAMw4MHk4Acgw7HGscPgxHAPEe
DGscKxxuDA0KIA2bLJ4NCjAdiwyOHRpACh1rDG4dKnAKHUsMTh0qsAodKwwuYxf-AR0LDA4dKvAE
Ci0q8Agq8FMnAR3Aav8YAaAO-xoBDxeAQAggG_9CCTANcA0TO0DPGg8bqACxYA0vGQ8brxoPGy4O
AFM-Ga8bPgoAAMM6Lw8aDgBnNJ8aPqIAMhquDKAAQR8ZDM5hARBgghMR7l0B-wBwDf4BDRuA-QEb
oPsB8EwoAR2Aiq8d8AEOHx_1OgKiGjPgDi8OAFEvHg8cwA4AE28OADOgDj8OAAC4GhGADgATjw4A
M2AOTw4A8AJPHg8cQA5vIP8fAA8cMA1fHnQaMA8fXqAyIw1PDgBRTg0fNUAOABNvDgAzYA0-DgAQ
Pi2EAQ4AE08OADOgDS8OABAuHTIBDgATLw4AM_ANHw4AEB5YHhEBDwAUDw8AMwMNDw8AEA4PABMF
DwAADAAQB40Jjh818AkNHPALixEPPAEOUTcvIvAJYBMAv2hC8AcOH4cTAMYTEi_EE1Ih8AMOP4ET
YCHwAQ5PJFx-YA8h4A5fJCY6Ug8hwA5fQAAAcRNiIaANHyU-OgDSJD8jHyQNkA0fIx8lDzcAUCQP
Ix8k-wFBgA0-I9Q6JCQ_DgAfJA4AIbIfIx8kDgxPIwwOHFcA8QQcPgwvIww_HA0PNZANXgwPIwxe
fQHxFF4MXg0bwA1ODE4NG_ANPgw_DRvwAQ0uDC4NG-ADDR4MHg0bSBHPDg0b8ActG-AJK-AZTgEd
kU8PJ78u8AAPJypGoykPLg810A8nDykPAIAnDy7QDycfKSRGQA8pHycgAEOwDycvEQCQLycPLrAP
Jz8pwH8xDyk-IABDkA8nTxEAQ08nDy4PABFfDQAAWB8jJ18eAFJfJw8ucB4AE28tAADzfSMnXxEA
ACAAAA8AECp_RhFvnAB0QA8uXygPKR4AAC8AEC5LAARAAAAnfgEiABVPIgAQcCIAE28eABJwLwAi
TycvAACtACMuPxEAET8iAECQDy4vUQASJ94AAO8AIy4fEQARHyIAMLAPLjgJIo8nIAEAMQETLg8A
YC4fNdDPLvoGP87wMboITvAPUho58AQqHDsZ8AAaXEsZsBp8axmACpyLCHAJK2x7wBvAYAlbPGsp
CGAJexwrxZviUAmbajkIUAmbeikIDkAHAFBQCYt6GRE5MHuKGTAjAQcAUHAIKSuapUQgCFkPAFCA
CGl6GZcIIGlqrETwBAhpWhkIDrAIyQgewAi5CA7gCHmvll94PvACfqEdH-AQUz8P8AgOPxEe8AUO
bQ7wAw8OHxBNHg8O8AIMHxBuDE4B8AQMLxB_DPAADCt_DA810Aw7jg8NBgDyBgoPNbAMS44MCrAM
S54KCZAMS64MCgYA8BcJcAxbrhwKcAxLzgwKCVAKLBveHApQCkzeHAoJQApsviwKQApsnqmf-woK
-AYKCUAa-AIaGVAJKqw6KYAZqknQqfAyyAAdMI9PFMUh8B0WHxPwAh5PFj4PE_AebxZODxOwHR8V
XxZuDYAdTxUvFp4NYA2PFb4NUA2MvhcfsA2Mrh0PEjANnJ4t5o_oDZyOPQsKIA2MngcA-yJ8HX49
CxowDSxtbi0LGlAbfT49GxpwChu9GyqgCht9GyrgChstKyrwAworOvAHKvBUvQAd8BNvjxnwAh6P
Gw8Y8AAOnxsfGg8Y0A6PG08aDxiwDo8bLj8ayTRQjxtOLxoTIlCADn8bbiUAMA8XcCsSUI4PGh8Y
GQCFYA8YHxovG74OACZPGgwATz8avi8MAAE-LxrODAACAGEAIc4tDQBDDQ8aHQsAME2eTQgA-xNw
Dxc9Xm0MHzVwDP0BDAuQDO0MG6AsrQwbwBusG-ABq-AxBAEdMImPHgQB8QwgHj8dkB0fH48gXx8d
YA1MbyAebA1QDVw7jhxMBzBs3h1hBzBc7h0eocANTO4tCgkgDSw9vj1OAv83ba4tChlACm2OLQoZ
YApdji0KCYAKXW4tChmQCk1eLQoZsApNLj0KGcAKrQoZ4AqNChnwAQptChnwAxotGhnwBQkqKfAI
KXsJHzA2PyNGAxElRgPwCx7wAg8iDyR9DA8i8AALPE0sC9ALXD08C8ALw-PyDgsPNaALXE5MC6AL
TG48CwqQDyEbLH4sCwqQCTuOBwAinhwHABArBgAwjisJBwAgfjsHADFLXksHACJOWwcA-yBLCRqg
CUsuWwkKsAlbHlsJCsAJuwka0AmbCRrwAAl7CRrwAhk7GRrwBAo5KvAHOt4RH-AJbX8n8AQOfyo_
4A6tHykOwA69LA6gDhydqvKRPI1cDmAOXG1soA9BbF1cDhQGYA5sXyhMLg8uQ0y-KD44BjUOLM8M
AEMuzyhOCwAlPr8LACVOrwsAIF6PCwABTgZAbl8oXhYA-xFgDy7_AgsfNXAL-gALGpAL3gsasAuu
GxrQqyrwAKrwUO8FOlBtPTZ9fQ==
:: gfx/1.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA5LTEzIDEzOjUxOjM5Iixtb2RpZmllZD0iMjAyNC0w
OS0xMyAxMzo1MzoxOCIscmV2aXNpb249OV1dbHo0AG0AAAAFMQAA8xR7WzBdPXtibXA9cHh1AEMg
EBAE8PAsZmxhZ3M9MCxwYW5feAgAz3k9MCx6b29tPTh9LDEA----------------------------
------------------------------------51BtPTh9fQ==
:: gfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTAzLTMwIDA1OjM5OjM0Iixtb2RpZmllZD0iMjAyNC0w
OS0xNyAxNDo1Mjo0MiIsc3RvcmVkPSIyMDI0LTAzLTMwIDA1OjM5OjM0Il1d
:: map/
:: map/0.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTAzLTMwIDA1OjM5OjM0Iixtb2RpZmllZD0iMjAyNC0w
OS0wMSAwNzozNDozNSIscmV2aXNpb249MzA3NV1dbHo0AMEAAABZEAAA8Ah7e2JtcD11c2VyZGF0
YSgiaTE2IiwzMgMALyIwAQD-------_x0zIwMDAzMDAwNDAwMDYMAC81MIAAWxMxCAATNYAALzYw
AQBbFzb8ABMxDAAPAQBVBHwBAAABEzAMAA_AAVkTMXQAEzB4ABcxjAAPAAFVEzaEAAQMAC81MAEA
--------nvEJIiksaGlkZGVuPWZhbHNlLHBhbl94PTQ3CQDSeT0wLHRpbGVfaD0yOQoAEHcKAIB6
b29tPTF9fQ==
:: map/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTAzLTMwIDA1OjM5OjM0Iixtb2RpZmllZD0iMjAyNC0w
OS0xNyAxNDo1Mjo0MiIsc3RvcmVkPSIyMDI0LTAzLTMwIDA1OjM5OjM0Il1d
:: pal/
:: pal/0.pal
b64$LS1bW3BvZCxiZ19jb2xvcj0wLGJsYWNrZXN0X2NvbG9yPTAsY3JlYXRlZD0iMjAyNC0wOC0y
MyAxODo1OTowOSIsaGlkZGVuPXtbMF09dHJ1ZSxmYWxzZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRy
dWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVl
LHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0
cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSxmYWxzZSxmYWxzZSxm
YWxzZSxmYWxzZSxmYWxzZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUs
dHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRy
dWUsdHJ1ZX0saGlkZGVuX3RvZ2dsZXM9e1swXT10cnVlLHRydWUsdHJ1ZSx0cnVlfSxpY29uPXVz
ZXJkYXRhKCJ1OCIsMTYsMTYsIjAwMDEwMTAxMDEwMTAxMDEwMTAxMDEwMDAwMDAwMDAwMDAwMTA3
MDcwNzA3MDcwNzA3MDcwNjAxMDAwMDAwMDAwMDAxMDcwNzA3MDcwNzA3MDcwNzA2MDYwMTAwMDAw
MDAwMDEwNzA3MDcwNzA3MDcwNzA3MDYwNjA2MDEwMDAwMDAwMTA3MDcwNzA3MDcwNzA3MDcwNjA2
MDYwNjAxMDAwMDAxMDcwNzA3MDcwNzA3MDcwNzA3MDcwNzA3MDEwMDAwMDEwNzA3MDcwNzA3MDcw
NzA3MDcwNzA3MDcwMTAwMDAwMTA3MDcwNjA2MDEwMTBkMGQwMTAxMDcwNzAxMDAwMDAxMDcwNzA2
MDYwMTAxMGQwZDAxMDEwNzA3MDEwMDAwMDEwNzA3MDEwMTA3MDcwNjA2MGQwZDA3MDcwMTAwMDAw
MTA3MDcwMTAxMDcwNzA2MDYwZDBkMDcwNzAxMDAwMDAxMDcwNzBkMGQwMTAxMGQwZDA2MDYwNzA3
MDEwMDAwMDEwNzA3MGQwZDAxMDEwZDBkMDYwNjA3MDcwMTAwMDAwMTA3MDcwNzA3MDcwNzA3MDcw
NzA3MDcwNzAxMDAwMDAxMDcwNzA3MDcwNzA3MDcwNzA3MDcwNzA3MDEwMDAwMDEwMTAxMDEwMTAx
MDEwMTAxMDEwMTAxMDEwMTAwIiksbG9ja2VkPXtbMF09ZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2Us
ZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFs
c2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2Us
ZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFs
c2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2Us
ZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFs
c2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2Us
ZmFsc2UsZmFsc2UsZmFsc2V9LG1vZGlmaWVkPSIyMDI0LTA5LTE3IDE0OjUyOjQyIixva3BhbF92
ZXJzaW9uPSIxLjAuMyIscmV2aXNpb249NTUzMSx0ZXN0X2N1YmVfY29sb3JzPXtbMF09ezE1LDMx
LDR9LHszMSw0LDIwfSx7NCwyMCwyMX0sezEwLDksMjV9LHs5LDI1LDI0fSx7OCwyNCwyfSx7MjYs
MTEsMjd9LHsxMSwyNywzfSx7MjcsMywxOX0sezI4LDE3LDE5fSx7MjgsMTIsMTZ9LHsxMiwxNiwx
fSx7NiwyOSwxM30sezI5LDEzLDE4fSx7MTMsMTgsMX0sezcsMjMsMTR9LHsyMywxNCwxM30sezE0
LDMwLDE4fSx7Nyw2LDIyfSx7NiwyMiw1fSx7MjIsNSwyMX0sezEsMSwxfSx7MSwxLDF9LHsxLDEs
MX19LHdoaXRlc3RfY29sb3I9N11dbHo0APIBAAAVAgAA-QV1c2VyZGF0YSgiaTMyIiw2NCwiMAEA
8A00YzM2NWEwMDgyM2YzODAwOTg0NzNmMDA5ZjUxCACRNjQ0ODc3MDBmAQDwODAwNzQxZjY1MDBh
ODI1OTIwMGUyNDliYTAwZWY4M2M1MDBmOGJiZDkwMDc3MmMxNjAwYTIzMjE5MDBkNTRmMjEwMGYz
ODI1UADwJGNiYzljMDA2NzQ5MTMwMDljNzExYTAwZDZhMjI1MDBlZGM0NTQwMGZiZTE5OTAwMmQ1
MxgA8BYzMTZlMzIwMDUwYTMyYzAwODdkNDU2MDBiZmYyOTUwMDE2NTg1CADwDTc3OTdkMDAyMGI0
YjMwMDVjZDhkMjAwYWNmNmb4ALA3MjI4NjAwNWUyNiAA0DhkM2JlZDAwYWU4MWawALA4YzRmYzAw
NGY1MyABkTkwOTQ5YTAwYgEAgDAwZGVkYWQwqACAZTllMDAwMWQCAEAwMDJiAgBAMDAzZAIAQDAw
NTMCAEAwMGI1AgAAUACgNGIzZTAwNzM2YeAA8BM5ZThmNzQwMGFhOWQ4NTAwYmViNWE0MDA1ODU5
NWQwMDY4AgBRMDA2Zja5ABE3AQBQMDA4NjivAfEGMDNmMjcyYTAwNWIzNzM0MDA2NjQwYABQMDQ5
NDQoACA1YxABgDQwMmM0ZCIp
:: pal/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA4LTIzIDE4OjU0OjE5Iixtb2RpZmllZD0iMjAyNC0w
OS0xNyAxNDo1Mjo0MiJdXQ==
:: sfx/
:: sfx/0.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTAzLTMwIDA1OjM5OjM1Iixtb2RpZmllZD0iMjAyNC0w
OS0xNyAxNDo1Mjo0MiIscmV2aXNpb249NTQ5M11dbHo0ABoBAABSCAAA8CdweHUAAygAAAQABA9A
EAIOAAGgASACoA4ADxAADfDKAQIDBAUGBwAP-5AICQoLDwwPDQ8ODw8QAPAADQ8RDxIPEw8UDxUP
Fg8XEwDxAQ8YDxkPGg8bDxwPHQ8eDx8UAPEAIA8hDyIPIw8kDyUPJg8nFADxACgPKQ8qDysPLA8t
Dy4PLxQA8QAwDzEPMg8zDzQPNQ82DzcUAP8FOA85DzoPOw88Dz0PPg8-AA--8P8BAOv-J1oBEAYP
IBABIAEgAfAAAhACDBABIA8hIAEwD0Dwww8oD--wxg-4Cg--D4AP9w8NAfAJARAGDDAAAh9EMAAc
H0AwAPIf-wEA3L-4D0AADUD--7DwcAoA--9kH-8BAP_ZUP----8g
:: sfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTAzLTMwIDA1OjM5OjM0Iixtb2RpZmllZD0iMjAyNC0w
OS0xNyAxNDo1Mjo0MiIsc3RvcmVkPSIyMDI0LTAzLTMwIDA1OjM5OjM0Il1d
:: src/
:: src/logic/
:: src/logic/creation.lua
--[[pod_format="raw",created="2024-08-30 06:25:09",modified="2024-09-17 14:52:42",revision=2868]]
--- Board Creation Logic


function logic_cells(tiling)
	local grid
	local size
	if tiling == "square" then
		grid = sgrid_new()
		local height = grid:max_height() - 1
		for x = 0, 5 do
			for y = 0, height do
				grid:set(pos(x, y), cell_good)
			end
		end
	elseif tiling == "hex" then
		grid = hgrid_new()
		local height = (grid:max_height() - 1) * 2
		for x = 0, 6 do
			for y = 0, height, 2 do
				grid:set(pos(x, y - (x % 2)), cell_good)
			end
		end
	end
	return grid
end


-------------------------------------------------------------------------


function logic_new_cell_column(stats, cells)
	stats.columns += 1
	if cells:tiling() == "square" then
		local height = cells:max_height() - 1
		for y = 0, height do
			cells:set(pos(stats.columns - 1, y), cell_good)
		end
	elseif cells:tiling() == "hex" then
		local height = (cells:max_height() - 1) * 2
		for y = 0, height do
			local x = stats.columns - 1
			cells:set(pos(x, y - (x % 2)), cell_good)
		end
	end
end

------------------------------------------------------------------------


local function random_gem()
	return math.random(gem_air, gem_air - 1 + 6)
end

local bag_of_gems = {}
local rejected_gems = {}


--local function random_gem()
--	while #bag_of_gems == 0 do
--		bag_of_gems = rejected_gems
--		rejected_gems = {}
--		for i = gem_air, gem_night do
--			add(rejected_gems, i)
--		end
--	end
--	local idx = math.random(1, #bag_of_gems)
--	local gem = bag_of_gems[idx]
--	deli(bag_of_gems, idx)
--	return gem
--end


function logic_fill_gem_at(cells, gems, states, p)
	local cell = cells:get(p) or 0
	if (cell & cell_mask == 0) or (cell & rock_mask != 0) then
		return
	end
	local test = (gems:tiling() == "square") and logic_test_sqr_match_at or logic_test_hex_match_at
	local gem = gems:get(p)
	if not gem then
		local attempts = 0
		local found = false
		while attempts < 16 and not found do
			if gem then
				add(rejected_gems, gem)
			end
			gem = random_gem()
			gems:set(p, gem)
			found = not test(gems, p)
			attempts += 1
		end
		if attempts == 16 then
			gem = gem_gift
			gems:set(p, gem)
		end
	end
end


function logic_fill_gems(cells, gems, states)
	-- TODO: transform into a coroutine
	-- TODO: fill in reverse gravity order
	if gems:tiling() == "square" then
		local height = gems:max_height() - 1
		for x = 0, 12 do
			for y = 4, height do
				logic_fill_gem_at(cells, gems, states, pos(x, y))
			end
		end
	elseif gems:tiling() == "hex" then
		cells:foreachpos(
			function(p, _)
				if p.y < 2 * 5 then
					return
				end
				logic_fill_gem_at(cells, gems, states, p)
			end
		)
	end
end

:: src/logic/matching.lua
--[[pod_format="raw",created="2024-08-24 08:12:55",modified="2024-09-17 14:52:42",revision=3927]]
--- Matching Logic

-- The matching algorithm has two phases:
--
-- 1. First, a linear sweep through all the gems, and for each gem involved in a match
--    creates a mark registering which direction(s) matched.
-- 2. Then a flood-fill algorithm is used to group matches together.


local function logic_is_matching(gem1, gem2)
	if (not gem1) or (not gem2) then
		return false
	end
	
	-- Only colored gems can match.
	if (gem1 < gem_color_first) or (gem1 > gem_color_last) then
		return false
	end
	if (gem2 < gem_color_first) or (gem2 > gem_color_last) then
		return false
	end

	return (gem1 == gem2)
end


--------------------------------------------------------------------------


local function test_3(gems, p0, p1, p2)
	local gem0 = gems:get(p0)
	local gem1 = gems:get(p1)
	local gem2 = gems:get(p2)
	return logic_is_matching(gem0, gem1)
		and logic_is_matching(gem0, gem2)
		and logic_is_matching(gem1, gem2)
end


local function test_4(gems, p0, p1, p2, p3)
	local gem0 = gems:get(p0)
	local gem1 = gems:get(p1)
	local gem2 = gems:get(p2)
	local gem3 = gems:get(p3)
	return logic_is_matching(gem0, gem1)
		and logic_is_matching(gem0, gem2)
		and logic_is_matching(gem0, gem3)
		and logic_is_matching(gem1, gem2)
		and logic_is_matching(gem1, gem3)
		and logic_is_matching(gem2, gem3)
end


function logic_test_sqr_match_at(gems, p)
	local S = p + pos(0, 1)
	local SS = p + pos(0, 2)
	local N = p + pos(0, -1)
	local NN = p + pos(0, -2)
	local E = p + pos(1, 0)
	local EE = p + pos(2, 0)
	local W = p + pos(-1, 0)
	local WW = p + pos(-2, 0)
	local SE = p + pos(1, 1)
	local SW = p + pos(-1, 1)
	local NE = p + pos(1, -1)
	local NW = p + pos(-1, -1)
	return test_3(gems, SS, S, p) or test_3(gems, S, p, N) or test_3(gems, p, N, NN)
		or test_3(gems, EE, E, p) or test_3(gems, E, p, W) or test_3(gems, p, W, WW)
		or test_4(gems, p, S, SE, E) or test_4(gems, p, S, SW, W) 
		or test_4(gems, p, N, NE, E) or test_4(gems, p, N, NW, W)
end


function logic_test_hex_match_at(gems, p)
	local S = p + pos(0, 2)
	local S_S = p + pos(0, 4)
	local N = p + pos(0, -2)
	local N_N = p + pos(0, -4)
	local SE = p + pos(1, 1)
	local SE_SE = p + pos(2, 2)
	local SW = p + pos(-1, 1)
	local SW_SW = p + pos(-2, 2)
	local NE = p + pos(1, -1)
	local NE_NE = p + pos(2, -2)
	local NW = p + pos(-1, -1)
	local NW_NW = p + pos(-2, -2)
	local E = p + pos(2, 0)
	local W = p + pos(-2, 0)
	return test_3(gems, S_S, S, p) or test_3(gems, S, p, N) or test_3(gems, p, N, N_N)
		or test_3(gems, SE_SE, SE, p) or test_3(gems, SE, p, NW) or test_3(gems, p, NW, NW_NW)
		or test_3(gems, NE_NE, NE, p) or test_3(gems, NE, p, SW) or test_3(gems, p, SW, SW_SW)
		or test_4(gems, p, SE, S, SW) or test_4(gems, p, NE, N, NW)
		or test_4(gems, p, NE, E, SE) or test_4(gems, p, NW, W, SW)
end


local function check_3_and_mark(gems, p0, p1, p2, mark, marks)
	if test_3(gems, p0, p1, p2) then
		marks:merge(p0, mark)
		marks:merge(p1, mark)
		marks:merge(p2, mark)
	end
end


local function check_4_and_mark(gems, p0, p1, p2, p3, mark, marks)
	if test_4(gems, p0, p1, p2, p3) then
		marks:merge(p0, mark)
		marks:merge(p1, mark)
		marks:merge(p2, mark)
		marks:merge(p3, mark)
	end
end


local function mark_sgrid_matches_at(gems, p0, marks)
	check_3_and_mark( gems,
		p0,
		p0 + pos(0, 1),
		p0 + pos(0, 2),
		{ name = "matching", vertical = true }, marks )
	check_3_and_mark( gems,
		p0,
		p0 + pos(1, 0),
		p0 + pos(2, 0),
		{ name = "matching", horizontal= true }, marks )
	check_4_and_mark( gems,
		p0,
		p0 + pos(1, 0),
		p0 + pos(0, 1),
		p0 + pos(1, 1),
		{ name = "matching", vertical = true, horizontal = true }, marks )
end


local function mark_hgrid_matches_at(gems, p0, marks)
	check_3_and_mark( gems,
		p0,
		p0 + pos(0, 2),
		p0 + pos(0, 4),
		{ name = "matching", vertical = true }, marks )
	check_3_and_mark( gems,
		p0,
		p0 + pos(1, 1),
		p0 + pos(2, 2),
		{ name = "matching", horizontal_SE = true }, marks )
	check_3_and_mark( gems,
		p0,
		p0 + pos(1, -1),
		p0 + pos(2, -2),
		{ name = "matching", horizontal_NE = true }, marks )
	local p1 = p0 + pos(1, 1)
	local p2 = p0 + pos(1, -1)
	local p3 = p0 + pos(2, 0)
	if test_4(gems, p0, p1, p2, p3) then
		marks:merge(p0, { name = "matching", vertical = true, horizontal_NE = true, horizontal_SE = true})
		marks:merge(p1, { name = "matching", vertical = true, horizontal_SE = true })
		marks:merge(p2, { name = "matching", vertical = true, horizontal_NE = true })
		marks:merge(p3, { name = "matching", vertical = true, horizontal_NE = true, horizontal_SE = true})
	end
end


local function mark_all_matches(gems)
	local marks = gems:new_grid()
	if gems:tiling() == "square" then
		gems:foreachpos(
			function(p, _gem)
				mark_sgrid_matches_at(gems, p, marks)
			end
		)
	elseif gems:tiling() == "hex" then
		gems:foreachpos(
			function(p, _gem)
				mark_hgrid_matches_at(gems, p, marks)
			end
		)
	end
	return marks
end


---------------------------------------------------------------------------


local function group_this_match(cells, gems, marks, p)
	-- A simple flood-fill algorithm to group all
	-- intersecting linear matches together.
	local colour = false
	local positions = {}
	local one_good_cell = false
	local remaining = { p }
	while #remaining > 0 do
		local current = deli(remaining)
		local gem = gems:get(current)
		if not colour then
			colour = gem
		end
		local mark = marks:get(current)
		if mark and mark.name == "matching"
			and (not mark.counted)
			and logic_is_matching(colour, gem)
		then
			colour = gem
			add(positions, current)
			marks:merge(current, { counted = true })
			local cell = cells:get(current)
			if cell and cell & cell_mask == cell_good then
				one_good_cell = true
			end
			local neighbours = gems:neighbours(current)
			foreach(
				neighbours,
				function(n)
					local s = marks:get(n.position)
					if not s then
						return
					end
					if s and s.name == "matching"
						and (not s.counted)
						and s[n.direction]
					then
						add(remaining, n.position)
					end
				end
			)
		end
	end
	return { colour = colour, positions = positions, one_good_cell = one_good_cell }
end


function logic_find_matches(cells, gems)
	local marks = mark_all_matches(gems)
	local matches = {}
	marks:foreachpos(
		function(p, mark)
			if mark and mark.name == "matching"
				and (not mark.counted)
			then
				local match = group_this_match(cells, gems, marks, p)
				add(matches, match)
			end
		end
	)
	return matches, marks
end
:: src/logic/mechanics.lua
--[[pod_format="raw",created="2024-08-30 06:41:59",modified="2024-09-17 14:52:42",revision=2665]]
--- Core Mechanics Logic


function logic_mark_gravity(cells, gems, marks, gravity)
	local some_gems_are_falling = false
	gems:foreachpos(
		function(p, gem)
			local below = p + gravity
			local distance = 0
			local cell_below = cells:get(below)
			while cell_below
				and (cell_below & cell_mask != cell_none)
				and (cell_below & rock_mask == 0)
			do
				if (not gems:get(below)) then
					some_gems_are_falling = true
					distance += 1
				end
				below += gravity
				cell_below = cells:get(below)
			end
			if distance > 0 then
				marks:set(p, { name = "falling", target = p + distance * gravity })
			end
		end
	)
	return some_gems_are_falling
end


function logic_enact_gravity(gems, marks)
	local fell_gems = {}
	marks:foreachpos(
		function(p, mark)
			if mark.name == "falling" then
				local new_p = mark.target
				add(fell_gems, { gem = gems:get(p), pos = new_p })
				gems:del(p)
				marks:del(p)
			end
		end
	)
	foreach(fell_gems,
		function(fell_gem)
			gems:set(fell_gem.pos, fell_gem.gem)
			marks:del(fell_gem.pos)
		end
	)
end


------------------------------------------------------------------------


function logic_mark_swap(gems, marks, source, target)
	local gem0 = gems:get(source)
	local gem1 = gems:get(target)
	local test = (gems:tiling() == "square") and logic_test_sqr_match_at or logic_test_hex_match_at
	gems:set(source, gem1)
	gems:set(target, gem0)
	local matched = test(gems, target) or test(gems, source)
	gems:set(source, gem0)
	gems:set(target, gem1)
--	if not matched then
--		return false
--	end
	marks:set(source, {
		name = "swapping",
		selected = true,
		target = target,
	})
	marks:set(target, {
		name = "swapping",
		target = source,
	})
	return true
end


function logic_enact_swap(gems, marks)
	local reinsert = {}
	marks:foreachpos(
		function(p, mark)
			if mark.name == "swapping" then
				add(reinsert, { gem = gems:get(p), position = mark.target })
				gems:del(p)
				marks:del(p)
			end
		end
	)
	foreach(
		reinsert,
		function(r) gems:set(r.position, r.gem) end
	)
end


-------------------------------------------------------------------------


function logic_enact_clear(gems, marks)
	marks:foreachpos(
		function(p, mark)
			if mark.name == "matching" then
				gems:del(p)
				marks:del(p)
			end
		end
	)
end


-------------------------------------------------------------------------


function logic_push_up(cells, gems, marks)
	if gems:tiling() == "square" then
		local width = cells:max_width() - 1
		local height = cells:max_height() - 1
		for x = 0, width do
			for y = 0, height do
				local position = pos(x, y)
				local below = pos(x, y + 1)
				gems:set(position, gems:get(below))
				marks:set(position, marks:get(below))
			end
		end
		for x = 0, 12 do
			logic_fill_gem_at(cells, gems, marks, pos(x, height))
		end
	elseif gems:tiling() == "hex" then
		local width = cells:max_width() - 1
		local height = (cells:max_height() - 1) * 2
		cells:foreachpos(
			function(position, _)
				local below = pos(position.x, position.y + 2)
				gems:set(position, gems:get(below))
				marks:set(position, marks:get(below))
			end
		)
		cells:foreachpos(
			function(position, _)
				if position.y >= height - 1
				then
					logic_fill_gem_at(cells, gems, marks, position)
				end
			end
		)
	end
end

:: src/logic/shuffle.lua
--[[pod_format="raw",created="2024-09-13 09:11:02",modified="2024-09-17 14:52:42",revision=1514]]

:: src/logic/spells.lua
--[[pod_format="raw",created="2024-08-30 06:37:36",modified="2024-09-17 14:52:42",revision=1473]]
--- Spell Logic


function logic_gain_mana(stats, matches)
	local gained = false
	foreach(
		matches,
		function(match)
			local count = #(match.positions)
			stats.in_cascade = true
			stats.experience += count + 4 * (count - 3)
			stats.colours[match.colour] += count
			gained = true
		end
	)
	return gained
end

:: src/logic/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA4LTMwIDA2OjI0OjM5Iixtb2RpZmllZD0iMjAyNC0w
OS0xNyAxNDo1Mjo0MiJdXQ==
:: src/constants.lua
--[[pod_format="raw",created="2024-08-24 15:17:10",modified="2024-09-17 14:52:42",revision=4158]]
--- Match3 Global Constants


-- Gems and cells ------------------------------------------------------

-- Color gems
gem_air = 0x01
gem_fire = 0x02
gem_day = 0x03
gem_earth = 0x04
gem_water = 0x05
gem_night = 0x06
gem_white = 0x07
gem_black = 0x08

gem_color_first = gem_air
gem_color_last = gem_black

-- Black gems
gem_gift = 0x08
gem_bomb = 0x09
gem_cat = 0x0a
gem_bat = 0x0b
gem_robot = 0x0c
gem_robot_asleep = 0x0d
gem_robot_asleep2 = 0x0e

gem_names = {
	[gem_air] = "Air",
	[gem_fire] = "Fire",
	[gem_day] = "Day",
	[gem_earth] = "Earth",
	[gem_water] = "Water",
	[gem_night] = "Night",
	[gem_white] = "White",
	[gem_black] = "Black",
}


-- Cells
cell_mask = 0x03
cell_none = 0x00
cell_good = 0x01
cell_bad = 0x02

-- Rocks
rock_full = 0x10
rock_cracked = 0x20
rock_broken = 0x30
cell_door = 0x40
cell_chest_air = 0x50
cell_chest_fire = 0x60
cell_chest_day = 0x70
cell_chest_earth = 0x80
cell_chest_water = 0x90
cell_chest_night = 0xa0

rock_mask = 0xf0

:: src/gfx.lua
--[[pod_format="raw",created="2024-08-24 12:06:13",modified="2024-09-17 14:52:42",revision=6067]]
--- Graphics


local cell_width = 29
local cell_height = 29


function gfx_draw_cells(cells, stats)
	local function draw_cell(p, _)
		local has_cell = cells:get(p)
		if p.y == -1 then
			if cells:tiling() == "square" then
				has_cell = cells:get(pos(p.x, p.y + 1))
			elseif cells:tiling() == "hex" then
				has_cell = cells:get(pos(p.x, p.y + 2))
			end
		end
		if not has_cell then
			return
		end
		local x, y = cells:coords_cell(p)
		local sprite
		if cells:tiling() == "square" then
			sprite = 32
			local offset = (stats.distance) % 2
			sprite += (p.x + p.y + offset) % 2
		elseif cells:tiling() == "hex" then
			sprite = 40
			local offset = (stats.distance) % 3
			sprite += (p.y + (p.x * 3) - offset) % 3
		end
		spr(sprite, x, y)
	end
	if cells:tiling() == "square" then
		local width = cells:max_width() - 1
		local height = cells:max_height() - 1
		for x = 0, width do
			for y = -1, height do
				draw_cell(pos(x, y))
			end
		end
	elseif cells:tiling() == "hex" then
		cells:foreachpos(draw_cell)
	end
end


-----------------------------------------------------------------------


local sprites_color_gem = {
	[gem_air] = 1,
	[gem_fire] = 2,
	[gem_day] = 3,
	[gem_earth] = 4,
	[gem_water] = 5,
	[gem_night] = 6,
	[gem_white] = 7,
	[gem_black] = 8,
}


local sprites_other_gem = {
	[gem_gift] = 8,
	[gem_bomb] = 9,
	[gem_cat] = 10,
	[gem_bat] = 11,
	[gem_robot] = 12,
	[gem_robot_asleep] = 13,
	[gem_robot_asleep2] = 13,
}

--color_gem_skin = math.random(0, 14)
color_gem_skin = 0
local function gem_sprite(gem)
	local base = 128 + color_gem_skin * 8
	if gem >= gem_color_first and gem <= gem_color_last then
		return sprites_color_gem[gem] - 1 + base
	else
		return sprites_other_gem[gem]
	end
end


local function scaled_gem(sprite, x, y, size)
	local w, h = flr(29 * size + 0.5) // 2 * 2 + 1, flr(29 * size + 0.5) // 2 * 2 + 1
	local x, y = x + ((29 - w) / 2), y + ((29 - h) / 2)
	sspr(sprite, 0, 0, 29, 29, x, y, w, h)
end


local function draw_exploded_gem(gem, x, y, clock, new_clock)
	local size = 32 * new_clock
	local colour = 10 + (gem - 1) * 5
	oval(x - size, y - size, x + 29 + size, y + 29 + size, colour + 1)
	if clock < 0.25 then
		ovalfill(x + 2, y + 2, x + 25, y + 25, 7)
	elseif clock < 0.50 then
		ovalfill(x + 2, y + 2, x + 25, y + 25, colour + 2)
	elseif clock < 0.75 then
		ovalfill(x + 1, y + 1, x + 27, y + 27, colour + 1)
	elseif clock < 1.0 then
		ovalfill(x, y, x + 29, y + 29, colour)
	end
end


function gfx_draw_gems(cells, gems, states, clock)
	local function draw_gem(p, gem)
		local x, y = gems:coords_gem(p)
		local sprite = gem_sprite(gem)
		local cell = cells:get(p)
		if cell and cell & cell_mask == cell_bad then
			pal(53, 58)
		end
		local state = states:get(p)
		if not state or state.name == "broken" then
			spr(sprite, x, y)
		elseif state.name == "new" then
			scaled_gem(sprite, x, y, clock)
		elseif state.name == "matching" then
		elseif state.name == "falling" or state.name == "swapping"
		then
			local dest_x, dest_y = gems:coords_gem(state.target)
			local ix, iy = x + clock * (dest_x - x), y + clock * (dest_y - y)
			spr(sprite, ix, iy)
		elseif state.name == "moving" then
			x, y = gems:coords_gem(state.source, gem)
			local dest_x, dest_y = gems:coords_gem(state.target)
			scaled_gem(gem_sprite(state.target_gem), dest_x, dest_y, 1.0)
		end
		pal(53, 53)	
	end
	gems:foreachpos(draw_gem)
	local new_clock = clock * clock * clock * clock
	gems:foreachpos(
		function(p, gem)
			local x, y = gems:coords_gem(p)
			local sprite = gem_sprite(gem)
			local cell = cells:get(p)
			if cell and cell & cell_mask == cell_bad then
				pal(53, 58)
			end
			local state = states:get(p)
			if state and state.name == "matching" then
				draw_exploded_gem(gem, x, y, clock, new_clock)
			elseif state and state.name == "moving" then
				x, y = gems:coords_gem(state.source, gem)
				local dest_x, dest_y = gems:coords_gem(state.target)
				local ix, iy = x + clock * (dest_x - x), y + clock * (dest_y - y)
				spr(gem_sprite(state.moving_gem), ix, iy)
			end
		end
	)
end


-----------------------------------------------------------------------


function gfx_draw_turns(ox, oy, turn, anim_turn)
	spr(64, ox, oy)
	local hundreds = (turn // 100) % 10
	local tens = (turn // 10) % 10
	local ones = turn % 10
	local anim = anim_turn // 2
	pal(7, 1)
	clip(ox + 7, oy + 3, ox + 7 + 3 * 8, oy + 3 + 8)
	-- hundreds
	if anim == 0 or (turn % 100) > 0 then
		spr(65 + hundreds, ox + 7, oy + 6)
	else
		spr(65 + hundreds, ox + 7, oy + 6 + anim)
		spr(65 + ((hundreds - 1) % 10), ox + 7, oy + 6 + anim - 10)
	end
	-- tens
	if anim == 0 or ones > 0 then
		spr(65 + tens, ox + 7 + 8, oy + 6)
	else
		spr(65 + tens, ox + 7 + 8, oy + 6 + anim)
		spr(65 + ((tens - 1) % 10), ox + 7 + 8, oy + 6 + anim - 10)
	end
	-- ones
	spr(65 + ones, ox + 7 + 2 * 8, oy + 6 + anim)
	spr(65 + ((ones - 1) % 10), ox + 7 + 2 * 8, oy + 6 + anim - 10)
	clip()
	pal(7, 7)
end


function gfx_draw_xp(ox, oy, exp, zoomed)
	local base_char
	local char_width
	if zoomed then
		base_char = 85
		char_width = 11
		oy -= 3
	else
		base_char = 75
		char_width = 8
	end
	local thousands = (exp // 1000) % 10
	local hundreds = (exp // 100) % 10
	local tens = (exp // 10) % 10
	local ones = exp % 10
	local digits = 4
	if exp < 10 then
		digits = 1
	elseif exp < 100 then
		digits = 2
	elseif exp < 1000 then
		digits = 3
	else
		digits = 4
	end
	ox -= (digits * char_width) // 2
	if exp >= 1000 then
		spr(base_char + thousands, ox, oy)
		ox += char_width
	end
	if exp >= 100 then
		spr(base_char + hundreds, ox, oy)
		ox += char_width
	end
	if exp >= 10 then
		spr(base_char + tens, ox, oy)
		ox += char_width
	end
	spr(base_char + ones, ox, oy)
end


function gfx_draw_xp_bar(ox, oy, mana)
	spr(95, ox, oy)
	if mana == 0 then
		return
	end
	local size = min(91, flr(0.5 + 91*(mana / 50)))
	rectfill(ox+1, oy+2, ox+1+size, oy+5, 40)
	line(ox+1+size, oy+2, ox+1+size, oy+5, 39)
	line(ox+1, oy+2, ox+1, oy+5, 41)
	if size > 1 then
		line(ox+2, oy+1, ox+1+size-1, oy+1, 41)
		line(ox+2, oy+6, ox+1+size-1, oy+6, 39)
	end
end
:: src/hgrid.lua
--[[pod_format="raw",created="2024-08-25 08:16:09",modified="2024-09-17 14:52:42",revision=3794]]
--- Hex Grids

--- Hex grids use the "double height" coordinate system:
---
---     (0,0)         (2,0)         (4,0)
---            (1,1)         (3,1)
---     (0,2)         (2,2)         (4,2)
---            (1,3)         (3,3)
---     (0,4)         (2,4)         (4,4)
---
--- The origin of the grid, `pos(0, 0)`, is at the top left.


-- Local Constants --------------------------------------------------------


local max_width <const> = 13
local max_height <const> = 12

local dx <const> = 24
local dy <const> = 14


------------------- -----------------------------------------------------------


local metatable = {}


function hgrid_new()
	local grid = {}
	metatable.default_origin(grid)
	setmetatable(grid, { __index = metatable })
	for i = 0, max_width * max_height do
		grid[i] = nil -- TODO false
	end
	return grid
end


function metatable:new_grid()
	return hgrid_new()
end


function metatable:clone()
	local grid = self:new_grid()
	grid.origin = self.origin
	self:foreachpos(function(p, item) grid:set(p, item) end)
	return grid
end


-----------------------------------------------------------------------------


function metatable:tiling()
	return "hex"
end


function metatable:max_width()
	return max_width
end


function metatable:max_height()
	return max_height
end


-----------------------------------------------------------------------------


function metatable:get(p)
	if p.x < 0 or p.y < 0 or p.x >= max_width then -- or p.y >= 2 * max_height - (p.x % 2) then
		return false
	end
	return self[p.x + ((p.y // 2) * max_width)]
end


function metatable:set(p, value)
	if p.x < 0 or p.y < 0 or p.x >= max_width or p.y >= 2 * max_height - (p.x % 2) then
		return false
	end
	self[p.x + ((p.y // 2) * max_width)] = value
end


function metatable:merge(p, state)
	if p.x < 0 or p.y < 0 or p.x >= max_width or p.y >= 2 * max_height - (p.x % 2) then
		return false
	end
	local index = p.x + ((p.y // 2) * max_width)
	if not self[index] then
		self[index] = {}
	end
	for k, v in pairs(state) do
		self[index][k] = v
	end
end


function metatable:del(p)
	if p.x < 0 or p.y < 0 or p.x >= max_width or p.y >= 2 * max_height - (p.x % 2) then
		return false
	end
	self[p.x + ((p.y // 2) * max_width)] = false
end


-- Screen Coordinates ---------------------------------------------------------


function metatable:default_origin()
	self.origin = { x = 116, y = 7 }
end


function metatable:compute_origin(delta)
	local min_p = pos(max_width, max_height)
	local max_p = pos(0, 0)
	self:foreachpos(
		function(position, cell)
			if not cell or cell == 0 then
				return
			end
			if position.x < min_p.x then min_p.x = position.x end
			if position.y < min_p.y then min_p.y = position.y end
			if position.x > max_p.x then max_p.x = position.x end
			if position.y > max_p.y then max_p.y = position.y end
		end
	)
	local width = 1 + max_p.x - min_p.x
	local height = 1 + max_p.y - min_p.y
	self.origin = {
		x = 110 + ((480 - 110) // 2) - ((width * dx) // 2) - (min_p.x * dx) - 4,
		y = (270 // 2) - ((height * dy) // 2) - (min_p.y * dy) - 8,
	}
	self.origin.y += 6 -- for Matchic Pon only
	self.origin.y -= flr(delta * dy * 2)
end


function metatable:coords_origin()
	return self.origin.x, self.origin.y
end


function metatable:coords_cell(p)
	local ox, oy = self:coords_origin()
	return ox + p.x * dx, oy + p.y * dy
end


function metatable:coords_gem(p)
	local ox, oy = self:coords_origin()
	return ox + (p.x * dx) + 1, oy + (p.y * dy) - 1
end


function metatable:pos(x, y)
	local ox, oy = self:coords_origin()
	x -= ox
	y -= oy + 1
	local px, py = x // dx, y // dy
	local xx, yy = x - (px * dx), y - (py * dy)
	if xx < 8 then
		if (px + py) % 2 == 0 and yy < dy + (-2 * xx) then
			px -= 1
			py -= 1
		elseif (px + py) % 2 != 0 and yy > -1 + (2 * xx) then
			px -= 1
		end
	end
	py = (2 * ((py - (px % 2)) // 2)) + (px % 2)
	return pos(px, py)
end


function metatable:distance(p0, p1)
	-- TODO: is this correct?
	return (abs(p0.x - p1.x) + abs(p0.y - p1.y)) // 2
end


-- Iterating ----------------------------------------------------------


function metatable:foreachpos(func)
	for x = 0, max_width do
		for y = x % 2, max_height * 2 - 1, 2 do
			local p = pos(x, y)
			local item = self:get(p)
			if item then
				func(p, item)
			end
		end
	end
end	


function metatable:neighbours(p)
	return {
		{ position = p + pos(1, 1), direction = "horizontal_SE" },
		{ position = p + pos(0, 2), direction = "vertical" },
		{ position = p + pos(-1, 1), direction = "horizontal_NE" },
		{ position = p + pos(-1, -1), direction = "horizontal_SE" },
		{ position = p + pos(0, -2), direction = "vertical" },
		{ position = p + pos(1, -1), direction = "horizontal_NE" },
	}
end


function metatable:blast_radius(p)
	return {
		p + pos(0, 0),
		p + pos(0, -2),
		p + pos(1, -1),
		p + pos(1, 1),
		p + pos(0, 2),
		p + pos(-1, 1),
		p + pos(-1, -1),
	}
end

:: src/in_editor.lua
--[[pod_format="raw",created="2024-08-30 08:13:35",modified="2024-09-13 09:08:06",revision=929]]
in_editor = {}

local tiling = "square"

local cells = false
local gems = false
local marks = false

local active_tool = 0
local ox, oy = 8, 8
local sx, sy = 32, 32

local tools = {
	[0] = cell_none,
	cell_good,
	cell_bad,
	rock_full,
	rock_cracked,
	rock_broken,
	cell_chest_air,
	cell_chest_fire,
	cell_chest_day,
	cell_chest_earth,
	cell_chest_water,
	cell_chest_night,
	cell_door,
	false,
	false,
	gem_gift,
	gem_bomb,
	false,
	gem_cat,
	gem_bat,
	gem_robot,
	false,
	false,
}



function in_editor:enter()
	if not cells then
		cells = logic_new_test_cells(tiling, true)
		gems = cells:new_grid()
	end
	cells:default_origin()
	gems:default_origin()
	marks = cells:new_grid()
end


function in_editor:exit()
end


function in_editor:update()
	if keyp("s") then
		tiling = "square"
		cells = false
		in_editor:enter()
	end
	if keyp("h") then
		tiling = "hex"
		cells = false
		in_editor:enter()
	end
	local mx, my, mb, _, _ = mouse()
	if mb == 0x1 and mx < 110 then
		mx -= ox
		my -= oy
		local x, y = clamp(mx // sx, 0, 2), clamp(my // sy, 0, 7)
		active_tool = clamp(x + 3 * y, 0, 22)
	elseif mb == 0x1 then
		local mp = cells:pos(mx, my)
		local tool = tools[active_tool]
		if tool == cell_none then
			local cell = cells:get(mp) or cell_none
			cell = (cell & ~cell_mask) | tool
			cells:set(mp, cell)
			gems:del(mp)
		elseif tool == cell_good or tool == cell_bad then
			local cell = cells:get(mp) or cell_none
			cell = (cell & ~cell_mask) | tool
			cells:set(mp, cell)
		elseif active_tool <= 12 then 
			local cell = cells:get(mp) or cell_none
			cell = (cell & cell_mask) | tool
			cells:set(mp, cell)
			gems:del(mp)
		elseif cells:get(mp) and cells:get(mp) & cell_mask != 0 then
			gems:set(mp, tool)
			local cell = cells:get(mp) or cell_none
			cell = (cell & cell_mask)
			cells:set(mp, cell)
		end
	end
	if mb == 0x2 then
		local mp = cells:pos(mx, my)
		local cell = cells:get(mp) or cell_none
		cell = (cell & cell_mask)
		cells:set(mp, cell)
		gems:del(mp)
	end
	if keyp("g") then
		in_game:load_from_editor(tiling, cells, gems)
		return in_game
	end
	return false
end


function in_editor:draw()
	cls(63)
	if not cells then
		return
	end
	local mx, _, _, _, _ = mouse()
	if mx <= 110 then
		window { cursor = "pointer" }
	else
		window { cursor = "crosshair" }
	end
	gfx_draw_cells(cells)
	gfx_draw_gems(cells, gems, marks, 0.0)
	-- Draw the panel
	rectfill(0, 0, 110, 269, 55)
	rectfill(ox, oy, ox + 28, oy + 28, 63)
	spr(33, ox + 1 * sx, oy + 0 * sy)
	spr(34, ox + 2 * sx, oy + 0 * sy)
	spr(48, ox + 0 * sx, oy + 1 * sy)
	spr(49, ox + 1 * sx, oy + 1 * sy)
	spr(50, ox + 2 * sx, oy + 1 * sy)
	spr(52, ox + 0 * sx, oy + 2 * sy)
	spr(53, ox + 1 * sx, oy + 2 * sy)
	spr(54, ox + 2 * sx, oy + 2 * sy)
	spr(55, ox + 0 * sx, oy + 3 * sy)
	spr(56, ox + 1 * sx, oy + 3 * sy)
	spr(57, ox + 2 * sx, oy + 3 * sy)
	spr(51, ox + 0 * sx, oy + 4 * sy)

	spr(8, ox + 0 * sx, oy + 5 * sy)
	spr(9, ox + 1 * sx, oy + 5 * sy)
--	spr(11, ox + 2 * sx, oy + 5 * sy)
	spr(10, ox + 0 * sx, oy + 6 * sy)
	spr(11, ox + 1 * sx, oy + 6 * sy)
	spr(12, ox + 2 * sx, oy + 6 * sy)
--	spr(14, ox + 0 * sx, oy + 7 * sy)
--	spr(15, ox + 1 * sx, oy + 7 * sy)

	local x, y = active_tool % 3, active_tool // 3
	rect(ox + x * sx - 1, oy + y * sy - 1, ox + x * sx + 29, oy + y * sy + 29, 7)
end
:: src/in_game.lua
--[[pod_format="raw",created="2024-08-27 17:11:11",modified="2024-09-17 14:52:42",revision=5448]]
in_game = {}


-- The Board
local tiling = "square"
local gravity = pos(0, 1)

local cells = false
local gems = false
local marks = false

local matches = {}

local prev_cells = false
local prev_gems = false
local prev_stats = false

-- State Machine
local editor_requested = false
local substate = false
local clock = 0.0
local interaction = false

local starting_stats = {
	columns = 6,
	speed = 0.333333333,
	mode_extend = false,
	mode_speed_up = true,
	turn = 0,
	offset = -0.333333333,
	distance = 0, -- how many times the board has been pushed up
	experience = 0,
	in_cascade = false,
	colours = {
		[gem_air] = 0,
		[gem_fire] = 0,
		[gem_day] = 0,
		[gem_earth] = 0,
		[gem_water] = 0,
		[gem_night] = 0,
		[gem_white] = 0,
		[gem_black] = 0,
	},
}
local stats = deep_copy(starting_stats)
local anim_turn = 0
local displayed_xp = 0
local star_seed = 37


-----------------------------------------------------------------------


-- Functions for substate need to be global, because of Lua
-- forward-declaration rule for locals.


function creating_the_board()
	cells = logic_cells(tiling)
	gems = cells:new_grid()
	cells:compute_origin(0.0)
	gems.origin = cells.origin
	marks = cells:new_grid()
	matches = {}
	stats = deep_copy(starting_stats)
	anim_turn = 0
	displayed_xp = 0
	star_seed = math.random(37, 6584587)
	logic_fill_gems(cells, gems, marks)
	return starting_new_turn
end


function starting_new_turn()
	if clock == 0.0 then
		stats.turn += 1
		stats.offset += stats.speed
		while stats.offset > 1.0 do
			logic_push_up(cells, gems, marks)
			stats.offset -= 1.0
			stats.distance += 1
			anim_turn = 20
		end
--		anim_turn = 20
		stats.in_cascade = false
		if stats.mode_extend and stats.turn % 50 == 0 then
			logic_new_cell_column(stats, cells)
		end
		if stats.mode_speed_up then
			stats.speed += 0.001
		end
	end
	cells:compute_origin((stats.offset - stats.speed) + stats.speed * clock)
	gems.origin = cells.origin
	--
	clock += 1.0 / 8.0
	if clock < 1.0 then 
		return starting_new_turn
	end
	return waiting_for_input
end


function waiting_for_input()
	local mx, my, mb, _, _ = mouse()
	if mb == 0x1 then
		local mp = cells:pos(mx, my)
		if gems:get(mp) then
			interaction = { name = "swap", position = mp, start = t() }
			return waiting_for_swap
		end
	end
	if keyp("r") then
		local mx, my = mouse()
		local p = cells:pos(mx, my)
		gems:del(p)
		matches = {}
		return applying_gravity
	end
	if keyp("a") then
		local mx, my = mouse()
		local p = cells:pos(mx, my)
		gems:set(p, gem_air)
		marks:set(p, { name = "new" })
		matches = {}
		return checking_matches
	end
	if keyp("s") then
		tiling = "square"
		return creating_the_board
	end
	if keyp("h") then
		tiling = "hex"
		return creating_the_board
	end
	if keyp("z") then
		cells = prev_cells:clone()
		gems = prev_gems:clone()
		marks = cells:new_grid()
		stats = deep_copy(prev_stats)
	end
	if keyp("1") then color_gem_skin = 5 end
	if keyp("2") then color_gem_skin = 8 end
	if keyp("3") then color_gem_skin = 10 end
	if keyp("4") then
		color_gem_skin = (color_gem_skin - 1) % 16
	end
	if keyp("5") then color_gem_skin = 0 end
	if keyp("6") then
		color_gem_skin = (color_gem_skin + 1) % 16
	end
	if keyp("7") then color_gem_skin = 2 end
	if keyp("8") then
		local prev = color_gem_skin
		while prev == color_gem_skin do
			color_gem_skin = math.random(0, 14)
		end
	end
	if keyp("9") then color_gem_skin = 15 end
	return waiting_for_input
end


function waiting_for_swap()
	local mx, my, mb, _, _ = mouse()
	if mb != 0x1 then
		interaction = false
		return waiting_for_input
	end
	local mp = cells:pos(mx, my)
	if cells:distance(mp, interaction.position) != 1
		or (not cells:get(mp))
	then
		-- TODO: also prevent upward swap when no gem
		return waiting_for_swap
	end
	if cells:tiling() == "square"
		and mp.y == interaction.position.y - 1
		and not gems:get(mp)
	then
		return waiting_for_swap
	elseif cells:tiling() == "hex"
		and mp.y == interaction.position.y - 2
		and not gems:get(mp)
	then
		return waiting_for_swap
	end
	local success = logic_mark_swap(gems, marks, interaction.position, mp)
	interaction = false
	if not success then
		return waiting_for_input
	end
	prev_cells = cells:clone()
	prev_gems = gems:clone()
	prev_stats = deep_copy(stats)
	return swapping_two_gems
end


function swapping_two_gems()
	clock += 1.0 / 16.0
	if clock < 1.0 then
		return swapping_two_gems
	end
	logic_enact_swap(gems, marks)
	return applying_initial_gravity
end


function applying_initial_gravity()
	if clock == 0.0 then
		local some_gems_are_falling = logic_mark_gravity(cells, gems, marks, gravity)
		if not some_gems_are_falling then
			return checking_matches
		end
	end
	clock += 1.0 / 16.0
	if clock < 1.0 then
		return applying_initial_gravity
	end
	logic_enact_gravity(gems, marks)
	return checking_matches
end


function checking_matches()
	matches, marks = logic_find_matches(cells, gems)
	if #matches > 0 then
		local _ = logic_gain_mana(stats, matches)
		return clearing_gems
	end
	return starting_new_turn
end


function clearing_gems()
	clock += 1.0 / 16.0
	if clock < 1.0 then
		return clearing_gems
	end
	logic_enact_clear(gems, marks)
	return applying_gravity
end


function applying_gravity()
	if clock == 0.0 then
		local some_gems_are_falling = logic_mark_gravity(cells, gems, marks, gravity)
		if not some_gems_are_falling then
			return starting_new_turn
		end
	end
	clock += 1.0 / 16.0
	if clock < 1.0 then
		return applying_gravity
	end
	logic_enact_gravity(gems, marks)
	return checking_matches
end


-----------------------------------------------------------------------


function in_game:load_from_editor(ed_tiling, ed_cells, ed_gems)
	tiling = ed_tiling
	if tiling == "square" then
		gravity = pos(0, 1)
	else
		gravity = pos(0, 2)
	end
	cells = ed_cells:clone()
	gems = ed_gems:clone()
	marks = cells:new_grid()
	matches = {}
	stats = deep_copy(starting_stats)
	substate = creating_the_board
end


-----------------------------------------------------------------------


function in_game:enter()
	editor_requested = false
	if not substate then
		substate = creating_the_board
	end
end


function in_game:exit()
end


function in_game:update()
	local next = substate()
	if next != substate then
		clock = 0.0
		substate = next
	end
	if anim_turn > 0 then
		anim_turn -= 1
	end
	if displayed_xp < stats.experience then
		displayed_xp += 0.25
	elseif displayed_xp >= stats.experience then
		displayed_xp = stats.experience
	end
	if editor_requested then
		return in_editor
	end
	return false
end


function in_game:draw()
	if not cells then
		return
	end
	-- Starry background
	local hash = star_seed
	for x = 0, 9 do
		for y = 0, 6 do
			hash = hash~(hash << 13); hash = hash~(hash >> 17); hash = hash~(hash << 5)
			local flipped = (x+y)%2 == 0
			spr(120 + (hash%8), 110 + x * 40, 0 + y * 40, flipped, flipped)
		end
	end
	-- Draw the board
	if stats.turn > 0 then
		gfx_draw_cells(cells, stats)
		gfx_draw_gems(cells, gems, marks, clock)
	end
	-- Draw the panel
	rectfill(0, 0, 110, 269, 60)
	line(0, 0, 110, 0, 62)
	line(0, 0, 0, 269, 62)
	line(110, 0, 110, 269, 58)
	line(0, 269, 110, 269, 58)
	-- Top bar
	spr(102, 6, 10)
	spr(98, 14, 5)
	gfx_draw_turns(37, 2, 1 + stats.distance, anim_turn)
	spr(100, 79, 5)
	spr(102, 101, 10)
	-- Experience
	spr(104, 16, 34)
	gfx_draw_xp(56, 34, flr(displayed_xp), displayed_xp < stats.experience)
	spr(105, 71, 34)
	gfx_draw_xp_bar(8, 50, flr(displayed_xp) % 50)
	cursor(38, 60, 58)
	print("\14level " .. string.format("%d", (1 + flr(displayed_xp // 50))))
	--
	line(0, 75, 110, 75, 62)
	line(0, 75 - 1, 110, 75 - 1, 58)
	---
	for i = 0, 5 do
		spr(96, 4, 84 + i * 30)
	end
	cursor(11, 95 + 0 * 30, 58)
	print("Air: " .. tostr(stats.colours[gem_air]))
	cursor(10, 94 + 0 * 30, 12)
	print("Air: " .. tostr(stats.colours[gem_air]))
	cursor(11, 95 + 1 * 30, 58)
	print("Fire: " .. tostr(stats.colours[gem_fire]))
	cursor(10, 94 + 1 * 30, 17)
	print("Fire: " .. tostr(stats.colours[gem_fire]))
	cursor(11, 95 + 2 * 30, 58)
	print("Day: " .. tostr(stats.colours[gem_day]))
	cursor(10, 94 + 2 * 30, 22)
	print("Day: " .. tostr(stats.colours[gem_day]))
	cursor(11, 95 + 3 * 30, 58)
	print("Earth: " .. tostr(stats.colours[gem_earth]))
	cursor(10, 94 + 3 * 30, 27)
	print("Earth: " .. tostr(stats.colours[gem_earth]))
	cursor(11, 95 + 4 * 30, 58)
	print("Water: " .. tostr(stats.colours[gem_water]))
	cursor(10, 94 + 4 * 30, 32)
	print("Water: " .. tostr(stats.colours[gem_water]))
	cursor(11, 95 + 5 * 30, 58)
	print("Night: " .. tostr(stats.colours[gem_night]))
	cursor(10, 94 + 5 * 30, 37)
	print("Night: " .. tostr(stats.colours[gem_night]))
	-- Update the cursor
	local mx, my = mouse()
	local cursor_pos = cells:pos(mx, my)
	local cell = cells:get(cursor_pos)
	if cell and cell != 0 then
		window { cursor = "grab" }
	else
		window { cursor = "" }
	end
	if false then
		rectfill(mx + 4 - 10, my + 10, mx + 36, my + 20, 7)
		print(tostr(cursor_pos.x)..","..tostr(cursor_pos.y), mx + 6 - 10, my + 12, 0)
	end
	cursor(430, 2, 0)
	print(string.format("\14turn: %d", stats.turn))
	cursor(430, 12, 0)
	print(string.format("\14speed: %1.3f", stats.speed))
end
:: src/sgrid.lua
--[[pod_format="raw",created="2024-08-24 07:17:45",modified="2024-09-17 14:52:42",revision=4355]]
--- Square Grids

--- The origin of the grid, `pos(0, 0)`, is at the top left.


---------------------------------------------------------------------------


local max_width <const> = 13
local max_height <const> = 11

local dx <const> = 27
local dy <const> = 27


----------------------------------------------------------------------------


local metatable = {}


function metatable:new_grid()
	return sgrid_new()
end


function sgrid_new()
	local grid = {}
	metatable.default_origin(grid)
	setmetatable(grid, { __index = metatable })
	for i = 0, max_width * max_height do
		grid[i] = false
	end
	return grid
end


function metatable:clone()
	local grid = self:new_grid()
	grid.origin = self.origin
	self:foreachpos(function(p, item) grid:set(p, item) end)
	return grid
end


-------------------------------------------------------------------------------


function metatable:tiling()
	return "square"
end


function metatable:max_width()
	return max_width
end


function metatable:max_height()
	return max_height
end


--------------------------------------------------------------------------------


function metatable:get(p)
	if p.x < 0 or p.y < 0 or p.x >= max_width or p.y >= max_height then
		return false
	end
	return self[p.x + (p.y * max_width)]
end


function metatable:set(p, value)
	if p.x < 0 or p.y < 0 or p.x >= max_width or p.y >= max_height then
		return false
	end
	self[p.x + (p.y * max_width)] = value
end


function metatable:merge(p, state)
	if p.x < 0 or p.y < 0 or p.x >= max_width or p.y >= max_height then
		return false
	end
	local index = p.x + (p.y * max_width)
	if not self[index] then
		self[index] = {}
	end
	for k, v in pairs(state) do
		self[index][k] = v
	end
end


function metatable:del(p)
	if p.x < 0 or p.y < 0 or p.x >= max_width or p.y >= max_height then
		return false
	end
	self[p.x + (p.y * max_width)] = false
end


function metatable:distance(p0, p1)
	return abs(p0.x - p1.x) + abs(p0.y - p1.y)
end


-------------------------------------------------------------------------------


function metatable:default_origin()
	self.origin = { x = 121, y = 4 }
end


function metatable:compute_origin(delta)
	local min_p = pos(max_width, max_height)
	local max_p = pos(0, 0)
	self:foreachpos(
		function(position, cell)
			if not cell or cell == 0 then
				return
			end
			if position.x < min_p.x then min_p.x = position.x end
			if position.y < min_p.y then min_p.y = position.y end
			if position.x > max_p.x then max_p.x = position.x end
			if position.y > max_p.y then max_p.y = position.y end
		end
	)
	local width = 1 + max_p.x - min_p.x
	local height = 1 + max_p.y - min_p.y
	self.origin = {
		x = 110 + ((480 - 110) // 2) - ((width * dx) // 2) - (min_p.x * dx),
		y = (270 // 2) - ((height * dy) // 2) - (min_p.y * dy),
	}
	self.origin.y += (dy // 2) - 3 -- for Matchic Pon only
	self.origin.y -= flr(delta * dy)
end


function metatable:coords_origin()
	return self.origin.x, self.origin.y
end


function metatable:coords_cell(p)
	local ox, oy = self:coords_origin()
	return ox + p.x * dx, oy + p.y * dy
end


function metatable:coords_gem(p)
	local ox, oy = self:coords_origin()
	return ox + p.x * dx, oy + p.y * dy
end


function metatable:pos(x, y)
	local ox, oy = self:coords_origin()
	return pos((x - ox) // dx, (y - oy) // dy)
end


----------------------------------------------------------------------------


function metatable:foreachpos(func)
	local p = pos(0, 0)
	for x = 0, max_width do
		for y = 0, max_height do
			local p = pos(x, y)
			local item = self:get(p)
			if item then
				func(p, item)
			end
		end
	end
end	


function metatable:neighbours(p)
	return {
		{ position = p + pos(1, 0), direction = "horizontal" },
		{ position = p + pos(0, 1), direction = "vertical" },
		{ position = p + pos(-1, 0), direction = "horizontal" },
		{ position = p + pos(0, -1), direction = "vertical" },
	}
end


function metatable:blast_radius(p)
	return {
		p + pos(0, 0),
		p + pos(1, 0),
		p + pos(1, 1),
		p + pos(0, 1),
		p + pos(-1, 1),
		p + pos(-1, 0),
		p + pos(-1, -1),
		p + pos(0, -1),
		p + pos(1, -1),
	}
end

:: src/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA4LTI0IDA3OjE3OjA5Iixtb2RpZmllZD0iMjAyNC0w
OS0xNyAxNDo1Mjo0MiJdXQ==
:: debug.lua
--[[pod_format="raw",created="2024-08-24 12:45:09",modified="2024-09-01 05:15:15",revision=75]]
-- Detect uninitialized globals and typos
-- from @snowkittykira from the BBS


-- if you're using include(), include this after including everything else,
-- since most included modules will need to assign global variables on load

-- these globals are needed by picotron
_init = _init or false
_draw = _draw or false
_update = _update or false
-- these are used by the picotron terminal
cproj_draw = cproj_draw or false
cproj_update = cproj_update or false
_ = _ or false
_is_terminal_command = _is_terminal_command or false
k = k or false
res = res or false
-- gui needs these
drag_t = drag_t or false

local function unknown_variable (t, k)
  error (debug.traceback ('unknown variable ' .. tostring (k), 2))
end

setmetatable (_G, {
  __index = unknown_variable,
  __newindex = unknown_variable,
})
:: drakma.lua
b64$LS1bW3BvZF9mb3JtYXQ9InJhdyIsY3JlYXRlZD0iMjAyNC0wNC0wNyAwNzo0Mjo0NSIsbW9k
aWZpZWQ9IjIwMjQtMDktMTMgMDk6MzQ6MjQiLHJldmlzaW9uPTE1MDddXQpfbW9kdWxlcyA9IHt9
CgotLSBBICdyZXF1aXJlJyBmdW5jdGlvbiBzaW1pbGFyIHRvIHN0YW5kYXJkIEx1YS4KLS0gSWRl
YSBmcm9tIGVsZ29waGVyIG9uIHRoZSBCQlMKZnVuY3Rpb24gcmVxdWlyZShuYW1lKQoJbG9jYWwg
Y2FjaGVkID0gX21vZHVsZXNbbmFtZV0KCWlmIChjYWNoZWQpIHJldHVybiBjYWNoZWQKCglsb2Nh
bCBmaWxlbmFtZSA9IGZ1bGxwYXRoKG5hbWUgLi4gJy5sdWEnKQoJbG9jYWwgc3JjID0gZmV0Y2go
ZmlsZW5hbWUpIAoKCWlmICh0eXBlKHNyYykgIT0gInN0cmluZyIpIHBhbmljKCJjb3VsZCBub3Qg
aW5jbHVkZSAiIC4uIGZpbGVuYW1lKQoKCS0tIGh0dHBzOi8vd3d3Lmx1YS5vcmcvbWFudWFsLzUu
NC9tYW51YWwuaHRtbCNwZGYtbG9hZAoJLS0gY2h1bmsgbmFtZSAoZm9yIGVycm9yIHJlcG9ydGlu
ZykKCS0tIG1vZGUgKCJ0IiBmb3IgdGV4dCBvbmx5IC0tIG5vIGJpbmFyeSBjaHVuayBsb2FkaW5n
KQoJLS0gX0VOViB1cHZhbHVlCgktLSBAIGlzIGEgc3BlY2lhbCBjaGFyYWN0ZXIgdGhhdCB0ZWxs
cyBkZWJ1Z2dlciB0aGUgc3RyaW5nIGlzIGEgZmlsZW5hbWUKCWxvY2FsIGZ1bmMsIGVyciA9IGxv
YWQoc3JjLCAiQCIgLi4gZmlsZW5hbWUsICJ0IiwgX0VOVikKCWlmIChub3QgZnVuYykgcGFuaWMo
IlN5bnRheCBlcnJvcjoiLCB0b3N0cihlcnIpKQoKCWxvY2FsIG1vZHVsZSA9IGZ1bmMoKQoJX21v
ZHVsZXNbbmFtZV0gPSBtb2R1bGUKCglyZXR1cm4gbW9kdWxlCmVuZAoKCmZ1bmN0aW9uIHBhbmlj
KC4uLikKCWxvY2FsIGFyZ3MgPSB7IC4uLiB9Cglmb3JlYWNoKAoJCWFyZ3MsCgkJZnVuY3Rpb24o
c3RyKQoJCQlzZW5kX21lc3NhZ2UoMywgeyBldmVudCA9ICJyZXBvcnRfZXJyb3IiLCBjb250ZW50
ID0gc3RyIH0pCgkJZW5kCgkpCglzdG9wKCkKZW5kCgoKLS0gVGFibGUgdXRpbGl0eSBmdW5jdGlv
bnMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0KCgpmdW5jdGlvbiBpc19lbXB0eSh0KQoJcmF3ZXF1YWwobmV4dCh0KSwgbmlsKQplbmQKCmZ1
bmN0aW9uIGRlZXBfY29weSh0LCBhbHJlYWR5KQoJaWYgKG5vdCBhbHJlYWR5KSBhbHJlYWR5ID0g
e30KCWlmIHR5cGUodCkgPT0gInRhYmxlIiB0aGVuCgkJaWYgYWxyZWFkeSBhbmQgYWxyZWFkeVt0
XSB0aGVuCgkJCXJldHVybiBhbHJlYWR5W3RdCgkJZW5kCgkJbG9jYWwgbmV3ID0ge30KCQlhbHJl
YWR5W3RdID0gbmV3CgkJZm9yIGssIHYgaW4gcGFpcnModCkgZG8KCQkJbmV3W2tdID0gZGVlcF9j
b3B5KHYsIGFscmVhZHkpCgkJZW5kCgkJcmV0dXJuIG5ldwoJZWxzZQoJCXJldHVybiB0CgllbmQK
ZW5kCgoKZnVuY3Rpb24gdG9zdHJyZWModCkKCWlmIHR5cGUodCkgIT0gInRhYmxlIiB0aGVuCgkJ
cmV0dXJuIHRvc3RyKHQpCgllbmQKCQoJbG9jYWwgcyA9IG5pbAoJZm9yIGssIHYgaW4gcGFpcnMo
dCkgZG8KCQlpZiBub3QocykgdGhlbgoJCQlzID0gInsgIgoJCWVsc2UKCQkJcyAuLj0gIiwgIgoJ
CWVuZAoJCXMgLi49IHRvc3RyKGspIC4uICIgPSAiIC4uIHRvc3RycmVjKHYpCgllbmQKCWlmIG5v
dCBzIHRoZW4KCQlyZXR1cm4gInt9IgoJZW5kCglzIC4uPSAiIH0iCgoJcmV0dXJuIHMKZW5kCgoK
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCgpmdW5jdGlvbiBjbGFtcCh2LCBtaW4sIG1heCkKCWlm
IHYgPCBtaW4gdGhlbgoJCXJldHVybiBtaW4KCWVuZAoJaWYgdiA_IG1heCB0aGVuCgkJcmV0dXJu
IG1heAoJZW5kCglyZXR1cm4gdgplbmQKCgpmdW5jdGlvbiBleHBfZGVjYXkoYSwgYiwgZGVjYXks
IGR0KQoJLS0tIExlcnAgc21vb3RoaW5nLCBidXQgZnJhbWVyYXRlLWluZGVwZW5kYW50LCBmcm9t
IEZyZXlhIEhvbG3DqXIKCS0tLSBodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PUxTTlF1
RkVET3lRCgktLS0gVXNlIGFzIGBhID0gZXhwX2RlY2F5KGEsIGIsIGRlY2F5LCBkdClgCglyZXR1
cm4gYiArIChhIC0gYikgKiBtYXRoLmV4cCgtIGRlY2F5ICogZHQpCmVuZAoKCi0tIFBvcyAtLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLQoKCi0tIFdBUk5JTkc6IGRvIG5vdCBmb3JnZXQgdGhhdCBgcG9zYCBpcyBh
IHJlZmVyZW5jZSB0eXBlLCBub3QgYSB2YWx1ZToKLS0gYXZvaWQgbW9kaWZ5aW5nIGluIHBsYWNl
LgpmdW5jdGlvbiBwb3MoeCwgeSkKCWxvY2FsIHAgPSB1c2VyZGF0YSgiaTE2IiwgMikKCXAueCA9
IHgKCXAueSA9IHkKCXJldHVybiBwCmVuZAoKCi0tIERyYXdpbmcgLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoK
Ci0tIEZyb20gU29waGllIG9uIHRoZSBkaXNjb3JkCmZ1bmN0aW9uIGdldF9kcmF3c3BhY2UoKQog
ICAgcmV0dXJuIHsKICAgICAgICBjYW1feD1wZWVrNCgweDU1MTApLAogICAgICAgIGNhbV95PXBl
ZWs0KDB4NTUxNCksCiAgICAgICAgY2xpcF9sPXBlZWsyKDB4NTUyOCksCiAgICAgICAgY2xpcF90
PXBlZWsyKDB4NTUyYSksCiAgICAgICAgY2xpcF9yPXBlZWsyKDB4NTUyYyksCiAgICAgICAgY2xp
cF9iPXBlZWsyKDB4NTUyZSksCiAgICB9CmVuZAoKCmZ1bmN0aW9uIHNldF9kcmF3c3BhY2UoZHJh
d3NwYWNlKQogICAgcG9rZTQoMHg1NTEwLGRyYXdzcGFjZS5jYW1feCkKICAgIHBva2U0KDB4NTUx
NCxkcmF3c3BhY2UuY2FtX3kpCiAgICBwb2tlMigweDU1MjgsZHJhd3NwYWNlLmNsaXBfbCkKICAg
IHBva2UyKDB4NTUyYSxkcmF3c3BhY2UuY2xpcF90KQogICAgcG9rZTIoMHg1NTJjLGRyYXdzcGFj
ZS5jbGlwX3IpCiAgICBwb2tlMigweDU1MmUsZHJhd3NwYWNlLmNsaXBfYikKZW5k
:: main.lua
--[[pod_format="raw",created="2024-03-30 05:39:34",modified="2024-09-17 14:52:42",revision=5891]]
include "drakma.lua"
include "src/constants.lua"
include "src/sgrid.lua"
include "src/hgrid.lua"
include "src/logic/creation.lua"
include "src/logic/matching.lua"
include "src/logic/spells.lua"
include "src/logic/mechanics.lua"
include "src/gfx.lua"
include "src/in_game.lua"
include "src/in_editor.lua"
include "debug.lua"


local state = in_game
local next_state = false


function _init()
	window { cursor = "" }
	fetch("pal/0.pal"):poke(0x5000)
	state:enter()
end


function _update()
	if next_state then
		state:exit()
		state = next_state
		state:enter()
	end
	next_state = state:update()
end


function _draw()
	state:draw()
	print(string.format("\014% 3.0f", (stat(1) * 100.0)) .. "%", 460, 264, 1)
end
:: .info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA4LTIzIDE4OjQ1OjEzIixtb2RpZmllZD0iMjAyNC0w
OS0xNyAxNDo1Mjo0MiIscnVudGltZT0xMCxzdG9yZWQ9IjIwMjQtMDMtMzAgMDY6NTQ6MjQiLHdv
cmtzcGFjZXM9e3tsb2NhdGlvbj0ibWFpbi5sdWEjMTUiLHdvcmtzcGFjZV9pbmRleD0xfSx7bG9j
YXRpb249InNyYy9pbl9nYW1lLmx1YSMxNTAiLHdvcmtzcGFjZV9pbmRleD0xfSx7bG9jYXRpb249
InNyYy9sb2dpYy9jcmVhdGlvbi5sdWEjNTEiLHdvcmtzcGFjZV9pbmRleD0xfSx7bG9jYXRpb249
InNyYy9sb2dpYy9zaHVmZmxlLmx1YSMxIix3b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJz
cmMvY29uc3RhbnRzLmx1YSMxNiIsd29ya3NwYWNlX2luZGV4PTF9LHtsb2NhdGlvbj0ic3JjL2dm
eC5sdWEjMTY2Iix3b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJzcmMvc2dyaWQubHVhIzEz
MiIsd29ya3NwYWNlX2luZGV4PTF9LHtsb2NhdGlvbj0ic3JjL2hncmlkLmx1YSMxNTkiLHdvcmtz
cGFjZV9pbmRleD0xfSx7bG9jYXRpb249InNyYy9sb2dpYy9tZWNoYW5pY3MubHVhIzE1MSIsd29y
a3NwYWNlX2luZGV4PTF9LHtsb2NhdGlvbj0ic3JjL2xvZ2ljL21hdGNoaW5nLmx1YSM4Iix3b3Jr
c3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJzcmMvbG9naWMvc3BlbGxzLmx1YSMxMSIsd29ya3Nw
YWNlX2luZGV4PTF9LHtsb2NhdGlvbj0iZ2Z4LzAuZ2Z4Iix3b3Jrc3BhY2VfaW5kZXg9Mn0se2xv
Y2F0aW9uPSJzZngvMC5zZngiLHdvcmtzcGFjZV9pbmRleD00fSx7bG9jYXRpb249InBhbC8wLnBh
bCIsd29ya3NwYWNlX2luZGV4PTd9fV1d
:: [eoc]
