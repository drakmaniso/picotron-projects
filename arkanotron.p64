picotron cartridge // www.picotron.net
version 2

:: gfx/
:: gfx/0.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA0LTA4IDEyOjQ0OjQ5Iixtb2RpZmllZD0iMjAyNS0w
NC0xNiAwODowNjoxMyIscmV2aXNpb249MTk5Nl1dbHo0AL4UAACkWwAA8yF7WzBdPXtibXA9cHh1
AEMgDAwE8CQHEAeAF5AXgAcQB-AkLGZsYWdzPTAscGFuX3gIAMd5PTAsem9vbT0yfSw_APEBGQ8E
B-8aCQf_Bg8bHvsFHQQAkWtuax0eaw5LDQcAQwsdDgsKACUNCwsAOC4LDSUANV1rHT8AW-0HDv0I
hQAzLTI1hwAiLTWIABkxiAAgFAyIAO8CDxsPGgf_AB8bHvsAHQQACW8O8wIN8wTqAAsOYgBBfxoP
GwUAzw8aB14fGw4HXh0eWwMAG18Ocw0Oc3sAIP4T-xoEB-4BDxseB_4dLgfOLT4Hrj1Om01Om00_
sz0u0y0e89UAD1oAGf8UAx4H7hMuB84jPgeuM06bQ06bQz6-GzMu3SMe-QATDv0CA-1aACCfAgMO
B-4AEx77BAAMIv8bZAAPYgAZXxAQBPDwMQALHzhHAQUPIAIObx79Ag79A-EAHfEPbxoLPgtuB04L
TgtODxseSw0OSw0OGx0eOw0DDlsNCQD-HgsNix0e2x0DDR4dCw6rDg0DKx7LHR6rDTsdHksNWw0r
HR5NA10DTQ5NA20DTYAAQgEJAPABKw0OGw1bHRMeLQ47HRsdHogA3zsNHg0DHhsdHlsNDiuRADIQ
AJEA8QgPGxseCwAOC04LDT4NCz4NDkstDjsDDoUAcBMNDksDDgsLADMDDQOaAPESHgsDLSsdEx4T
DQ47Mx0bDQMdCx47DRsNEysdHlsDDisNPQAhSwPdAAA4AAChADA9AwCiAD8tAwBEAj0PMQCNvwMD
BA0HDRcGDQYN_wAZ7wUFBAAnADcGNwYnFgAmNgEa-wUHBwQQJyBHAFcGVwZHFgAnFiAmEEAAGf8I
CQkEEEcgZwB3BncGZxZnFlcmACc2IEZEABr-DwsLBDAnUGcghxCHAJcGlwaHFgB3BhBnFiA3JlAm
MEoAGeANDQQwR1CHIKcQpwC3BgIA-wCnFqcWAIcWEHcmIEc2UEZOAA0P8AFcsg0NBAYHBhc2HR8S
CAAfHgcAOg_LAAssMTCMAPAbUGYwJlcgFhdWEBYHJkcAFgcWZwAGBxY3VgcGJ2YHFhd2BwYndgcG
F1YdYQAhRi1nAD8tDxJvACTPxsfG9wr2JP0K-xIKPAAd8AA2LVAXNi0wZi0gJ0YtEDeGAIAAFic2
HQ4AJosABgUAER2bAC8NFh4BHw8MAh4PMQD--xffAwYEDA8cDF4MDjwADK4FGl8bBwTwrTEASl8f
BwTwyTEADA8vAR4PMQCN8BkVBwQALxgBNgEGATYBLgAOLw4PEjcGBwY3DR8ODgI_DTYPDQYMNg0u
CwARDAoAIxIuCgD-BR5SDTwNDA08DTIAIgE8AQwBPAEi0wEdAHwAVGYBBgFmfABTZwYHBmd8ABBm
fAARZnwAIWYMCgAjEi4KAIEeUg1sDQwNbHwAX2wBDAFsfAAcEiF8AFSWAQYBlnwAU5cGBwaXfAAQ
lnwAEZZ8ACGWDAoAIxIuCgCBHlINnA0MDZx8AF_cAQwBnHwAHBInfABUxgEGAcZ8AFPHBgcGx3wA
EMZ8ABHGfAAhxgwKACMSLgoAgR5SDcwNDA3MfABfzAEMAcx8ABwSLXwAQPYAAQYFAAN_AHP3AAYH
BvcAgAAg9gCBACH2AIIAMvYADAwAJRIuDABwHlIN-AANDAUAAIgAQPwAAQwFAA_KAA4P3AIeDzEA
-_XwABoNBDcG5wY3BgcmDQfWDQYA8AoGLQbtBg0WDQcGDfcDJg0GHQf2Ag0GHRcGCABQFwYHBg0J
AC8HBhoAATAG-QMgAIUGDRbnBhcWDVUAawY9Bu0GPZkAEzSZACItMZoAHzeaABjzAfsEFg0GHfsE
Bh0fGvsGEx4EAEEXBvsEiQAv_wSIADox-xoAiQAi-gCIAC37AIgAHx6HAAoi_wCHADH-GwCHAC-8
AIcAH3AH-xoKB-4HjBAvBh0EAA5-8wYdDvMIDWUAHgCuEvAKbxoPG48aB14PGwt_DV4DHksNAx5r
Aw47EwoA8S8OiwM7Ex5bDQMbDYsNCxMNDmsDKw17Aw0TDg0TWw0bAw07HRsDED4DiwMNCwMNHisT
HisDGwMeKwMNAx5LEwgAIA5bjA8gCxPGD-8KewM7HQMLEx49A30DTQMdEw5NA40DPQMtA7oAHfEE
AE8aDxsgC18aDxtfGiAHTg8bAL4AIC47eQAUI74AQDsTHgvBADArEwvDAPIrAx47Ew0LEwAOGwMe
GwMbAw1LLQMNAyATWxMNAAMbHSMLAyADHgM7Ax4LAwAzHisDAAM7AxsDDisDEBcBAc8AYUsDAA5b
Dc8A-wprAwBLHSMePQBtAwADTSMQPRBdAyADHTMQ7gEkFANUAg8EAAp--xsGEw79CDQBDg8tBC4N
lgDxDCsXuxcrEx4bBxYBmwEmGxMeGyYBDxuLASYNCwwAYQ2LARYPDewB0hwdmxwdCxMeOx27HRs_
AB79twAOhQAfOYUAEEQLnxALiACzHxwMHxAMHxwMDxCSANINHA8cHAocCgwBJg8bmACxHQwaDB0M
Cg0WDw0TAKArHw0PG50JHw0ZogAj_QChAF-5BhMO_aEAPRUMogAEMgEhDRwCAAWfACEPEJ8AORoM
CqAAH5qgAFMQDZsANB0MGp4AIAwKPQEkHA2eACENCpwALx0BPQFhEh2dACQKDdsBGwraAQI5AR8N
nQBhIw0MngADnQAiAQqeAAadAAPXAQ_dAGIzDxwPoAAP2QEFIgENoAAPnwAzD20ESTQPGZsBAmEP
G4sNJgzAADANDIvRAwANAGArGhybGhy2ADMcuxy3AH-8BhMO-AgDOwsZD1YBBCWZC4gAcxcKGQoX
CgmOADAJGgcCABYKLAMAHgBJGQoHCVMBQZkMHw2dAC-8AJwASQF7ABUXKwMSB50ABZwAIgkKIgAP
nABiEgmdAAScABIKnQAVCZwAEgedAB8NnABhBLQBD9QBBQT0AQ_cAF8FswECmwA7DxkH1AEiDQqd
AA_cAGEDswEvDxnUAQQUDfQBD5wAP18UCgTwuM0AHD-w-0NhBS8Xu3YIUxsMHQwLXAUiDxDTBweZ
BuAKCwwdDBsMDQ8QFg8NCv8AUBkamxka_wAzGrsa-AB-_gYTDvoIA5kAOBMMmgAPbAgIERuZAAhs
CDAfG5sFAACcAD8ZuxmWBj0FnAATC50ABZEGAp0AJg8QnQASDZ4AHgGdAA85AU0SG50AMg0PEJ4A
HQrSARMd8wEPOQFeAbQBAZ4ABJ0AOwEPHNgBIgEMnwAPOgFfQw8QDxy2AQ-YAQUiAQqeAB8BCwMN
D2YITHEYDAQ3Bt8a3Q8S3twPFNvbDxEC2w8QAlAPIAQTBABCFwb7AtcPEwLXDxLb1g8h3xvVDz-c
Bj2DBBkBfAATx_IQIrYNfgAtBs1-AC8fGoAABiLHBoEAAj8ATwY9Bs2DADkg9wEQAGENB-YADRbu
ERMA7hEUAAgSEQAgAAD4ERABCQAfNpAAMD-w-xEyAEsPJAIRDzEAXCAcDk8DkQwH-gkDHvsIEwQA
QDsXuxenEAJZDwBGEQRZDxEbDAADWQ8ADQAQLA0AECwLABE7ZA_CGxMeSx27HStJAH-9CBMO-QoD
IwEZD5AAAwFMDAOTAIMfHD8QHxwfEJoAUCwPHB8QggQAcw8hDxuiAIMMHxANHA0aDVgGABQAkS8N
ASodOg0MKQ8AcDsZCJoIGRiuACP4AK0AX-gIEw74rQA9ZA0fHD0cDUUBMgwfDIQNBKkAEQ0PACId
DJcIAqgAVQo9HD0KpwAfnacAUhAdpwAEpgASDacAFSqlAAN0DwhNAW8KDD0cLQGmAFxyLR8cPQwP
DKcAFApHEQSnABgqfQ8CpgBfARw9HB2mAFwgDD2mAAKkAHYNCh0KHAodpAARAQ8AKRwKpQBfDRo9
Gg2mAF0RD0YDFC9GA0ENDA8crAAVDKsAEQ2sABgsqgBPHRo9GqkALg_wBEkBnA8C0QACnA8DZgMC
nA8ADQAQKg0AECoLABE7pw8AwQAzHLscwgBf-AgTDvzCAA0fN2sBESWZC5MAQxc5FxmWACAqBzYN
FQkQAhAKDwAjGQczDQJmAXENKRc5BwosDwBvOxwImQgcZgEAD6QAPVQJFzkXCTsBAZQAAtkNEhsR
AAKnAAimAE8KORc5pQBdAEoBBKQAEQmSAAekBAKkAAmkBF8HORcpDaQAXAG9ASkmK90BBKUABP4B
B6QAEQ0dAg_kAFoBugECogAkDxnaAQbrAQP8AQikAAIdAg_lAFsAvAFJDxkmK90BBaYAA-4BCKUA
AR0CD6QAOg_cBB4Amwyv_goH_gcEGvkGFAQADn--GQYUCv4IqywaDv4MD54ZIg9kAA7P_woH_wcP
Exv-GwYfBgAff-MGHgvzCA7ZAB4QF9kAjwIe-w4GEh79BAAMj-8YBhIO-AgCZQAeEB9lAG8PFR70
Bh0EAA6P-xQGHQ78CA1lAB4TD2UAT-8WBh8GAB9-9QYdDvUIDRkCgSH-HNoAACoTHx0EAA6P-xAG
HQ77CA0eEx8PMgBLD9oDEQ8xAO_EGg0ER-8aAFd8IDEmDfsIAHIWDQ8b_wAMqQ9kDPsCDA0GCgAf
BwoADnAWBwz7AAwHqw8jB-tXAI-8AAcmXfwATfUBHET-EAoPzhwNBgAsHA4CAGkPEAweDB0EACX9
cgsABQQAKxwOAgAHHAABBAAv-QuoAB8KnAAPqAAKHB_nACb9dAwAD6QAFh8MpAAfC5kAD6UAHClz
DhAAD6UAASYODR0ABIEBHwqoAB4bC5wABQYALBwPqAAuHgyoABVyCwAEBAASDS0ACjkAKB0MBAAf
DqgAIBgMnAAPqAAdJv10DAACBAAvHA6kAAwfHqQAIDAKDB6UAAVDAADrACwNHAIABh0AAzEBKf5z
EAAA7AEfDTQADE8dDP4KBgZOD6YkMQ9kAA5RPxoPG8_pJPEQBy4PG74dTg0eKwOrE0sdHtsTWx0e
uyNrHR7bA1sTDWcH4WsD2z1rE8stDnsDyx0eBQAPeAA_MBsTm3oAMRsDi3wAoDMrEw0eSxOLA0sX
JbA7E3sDSz1rM0sTO4UAAPMkD4cALgAEABV-iwAyPi1OjQAyWxMrjwA0awMbkQCRKzMdHhsjawML
lgBxGwMLIzsTK5oAaCMrEysDO5wAUEsTCyMbngAQS_kkDqIADzcCFg8yALJA9wv2CDkHIPYEXwcv
9ggEAAcGJAAv-QtlACoyJv0BkQcR55UXBLooDwkAAiEG7QgAPvcCJoEAD0oBGw8yAH0PWQkRDzEA
XMAaDQRX3xpnNg3eBzZvAVEWDdsHFrIBYQ0PG9sMDZUJEwyUCQIKAB8HCgAOcSYHDNsMByZQABMH
UACPNg3cBzZt3F1iARxrV98QZzYNjQkEqwAzDA4cAgAEtAAB7gYRGwQAEg68ACL7AroAP-sCBwgA
CDUmBws5ABQeugADXAA0HA4MwwAEIgBvDAsHNm3bzAAjGR-MAATLACMcDgIABMoAFwzLAA-KABsF
NwAVHoQBA1wABF4AJDYNIQAfG8gAJxgMyQAVD8kAKg4cNQE3Jg0OywAPygAbAzUAAXABA8oADPMB
JjYNuQEPzAAnEg6sCAEzAQRcAiMLHAIABMgAExsiAAVbAhP_xwA--gIHCAAID1sCAgNbAC8cC1sC
Ax-exwAjA3MJAGgAA8YAIxwLAgAExQAFZwAEVgIPxQAVBTcAB1YCGQtdAApWAg-DACQENwo0GwwO
xAAqCxwsAVomDQ4MG1ECD8UAFR8eUQIAA10ABOgBC1ECL95dRQZOZFfQZzYN0O4AFNDlACLwANwA
E-DcAD-wAgcIAAhEJgfwANMAFNDKAF-QBzZt0IgBHmAcHxxcHhyMAXYOLD8QLA4M2wMWe2oFYwwO
DJsMDkUChAwOHCs8KxwOJgaBDgwrHB4cKwwFBAMRAAC6AxoMEwALJAADRAACzwADYAAGjAUFfAAB
mQARO5gAb20cHlweHOIAHjAMDxzaADAPHAz8A0UcfxAcbQIlHJsrA1QODCtcK_wDkg4cGxw_HBsc
DuIAAcoAETwGABYHEQAAtgILEwAJJAAERAAC4gADYAAE4gAFegATNmkBIzZt6AAPwgEfIZ8QwAEW
vs4ERS5cLgy7AWMuHD8cHC68AZMcHhwLPAscHhy8ASAuDA0AIQsMMAADEQA6DD4MEQAJIgAFQgAD
ugFVLhw7HC66AQd7AAOTAE9tHJ4cHgQjND5cPtIAZB4sPxwsHtMAci4MGzwbDC7SACEuHKAAIhwu
0gAArwAQPq8AFAcPADgMXgwPAAkeAAQ8AALMAANYAATMADQeLDt0AAONAA-oBCBALxB8Lq0FRRxf
HBypBVQOHAtcC_ICECYPAACWABMcfgKzHgwLHF4cCwweDRYPAHUMfgwLDB4HDwA6LhwuEQAKIAAC
PgAC1AAFXAAGXAMHfAAAmQAQW5gAT20ufC7cAB4gHxDWACEfEFgDRw8cXAtaAwJ2AASJBhEclAAS
HOAAhQ4MCxx_HAsMXgNACwwuPNEAJg4HEQA8DBsMEwALJAACRAAC5gADYAAHrAYGfgAVNm8BITZt
7gAP5QXfKN8Q9AtUPkgPGD6UAEI_aAw_lgByPigMHigMPpsAMD4YDAMAHwcNABcxJgcuDQAGPwNk
FwY_FwYeugAe3j8DD7oAHyc4H7oAI1gcugBiThgcGBxOuQCPTggcHggcTgcNABcxJgc_DQAUPrkA
fy4HFh4HFi65ADlUThgfGE65AEJOOBxOuQBCXjgcXrcAf14IHAgcXgcMABQwJgdODAAUTrIAbz4H
FgcWPrEAOhY-sAAyXjxerwBTbjxuDRYJAB8HCQALVCYHXjxenwA-TjZOnAA6Jx8YTQEkHDhNASQc
OE0BbxwIHAheBwwAFDAmB04MAAZNASEWB1IBD7cCOEQfGDg_sQA0PhxYtwJEHBgcGLcCMBwIHoQA
Dw0AFzEmBz4NAAa3AjEWBx69Ag_5ADg2DxhIuQAjDGi5AGQ_DCgeDCgqBCAMGAMAHwcNABcAaQcA
DQAGKgRfBhc_BhcqBBsPCREuDtYFDzIA-zcOjwEPMQD---------------8XUG09OH19
:: gfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA0LTA4IDEzOjM0OjM0Iixtb2RpZmllZD0iMjAyNS0w
NC0xNiAwODowNjoxMyJdXQ==
:: lib/
:: lib/collides.lua
--[[pod_format="raw",created="2025-04-10 10:36:12",modified="2025-04-16 08:06:13",revision=2556]]
----------------------------------------------------------------------------------


local M = {}


----------------------------------------------------------------------------------


local function distance_squared(x1, y1, x2, y2)
	local delta_x = x1 - x2
	local delta_y = y1 - y2
	return (delta_x * delta_x) + (delta_y * delta_y)
end


----------------------------------------------------------------------------------


function M.circle_box(cx, cy, radius, left, top, right, bottom)
	local closest_x = mid(left, cx, right)
	local closest_y = mid(top, cy, bottom)
	return distance_squared(cx, cy, closest_x, closest_y) < radius * radius
end


-----------------------------------------------------------------------------------


function M.circle_circle(cx1, cy1, radius1, cx2, cy2, radius2)
	local both_radius = radius1 + radius2
	return distance_squared(cx1, cy1, cx2, cy2) < both_radius * both_radius
end


-----------------------------------------------------------------------------------


function M.find_quadrant(x, y, left, top, right, bottom)
	local slope1 = (bottom - top) / (right - left)
	local c1 = top - slope1 * left
	local slope2 = (top - bottom) / (right - left)
	local c2 = bottom - slope2 * left
	if y >= slope1 * x + c1 then
		if y >= slope2 * x + c2 then
			return "bottom"
		else
			return "left"
		end
	else
		if y > slope2 * x + c2 then
			return "right"
		else
			return "top"
		end
	end
end


-----------------------------------------------------------------------------------


return M


-----------------------------------------------------------------------------------

:: lib/mathfix.lua
--[[pod_format="raw",created="2025-04-10 14:41:14",modified="2025-04-16 08:06:13",revision=2343]]
math.round =
	function(n)
		return math.floor(0.5 + n)
	end
	
math.round_toward_zero =
	function(n)
		return n >= 0.0 and n - (n % 1) or n - (n % -1)
	end

math.round_away_from_zero =
	function(n)
		return n >= 0.0 and n - (n % -1) or n - (n % 1)
	end

math.sign =
	function(n)
		return n ~= 0 and sgn(n) or 0
	end


return nil
:: lib/require.lua
--[[pod_format="raw",created="2025-03-19 09:08:58",modified="2025-04-16 08:06:13",revision=8647]]
---------------------------------------------------------------------------------------------


_modules = {}


-- A 'require' function similar to standard Lua.
-- Idea from elgopher on the BBS
function require(name)
	if (_modules == nil) _modules = {}

	local cached = _modules[name]
	if (cached) return cached

	local filename = fullpath(name)
	local src = fetch(filename) 
	if type(src) != "string" then
		panic("could not include " .. filename)
	end

	-- https://www.lua.org/manual/5.4/manual.html#pdf-load
	-- chunk name (for error reporting)
	-- mode ("t" for text only -- no binary chunk loading)
	-- _ENV upvalue
	-- @ is a special character that tells debugger the string is a filename
	local func, err = load(src, "@" .. filename, "t", _ENV)
	if not func then
		panic("Syntax error:", tostr(err))
	end

	local module = func()
	_modules[name] = module

	return module
end


--------------------------------------------------------------------------------------------


function send_error(...)
	send_message(3, { event = "report_error", content = "*Error:" })
	
	local path = debug.getinfo(3).source
	local line = debug.getinfo(3).currentline
	local str = sub(path, 2) .. ":" .. string.format("%d", line) .. ":\n"

	local args = { ... }
	str ..= table.concat(args, "\n")
	send_message(3, { event = "report_error", content = str })
end


function panic(...)
	send_message(3, { event = "report_error", content = "*Fatal error:" })
	
	local path = debug.getinfo(3).source
	local line = debug.getinfo(3).currentline
	local str = sub(path, 2) .. ":" .. string.format("%d", line) .. ":\n"

	local args = { ... }
	str ..= table.concat(args, "\n")
	send_message(3, { event = "report_error", content = str })

	stop()
end


--------------------------------------------------------------------------------------------

:: lib/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA0LTEwIDA4OjQ0OjI4Iixtb2RpZmllZD0iMjAyNS0w
NC0xNiAwODowNjoxMyJdXQ==
:: map/
:: map/0.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA0LTA4IDEyOjQ0OjQ5Iixtb2RpZmllZD0iMjAyNS0w
NC0xNiAwODowNjoxMyIscmV2aXNpb249MTgyMl1dbHo0ALgAAAC5FgAA-w57e2JtcD11c2VyZGF0
YSgiaTE2IiwzMiwyMiwiMAEACm8xOTAwMWEEADQvYjABAB4-MTgwAQA2LzE4gAD---93LzEwgABr
HzCAAP------nA8BAE-xCSIpLGhpZGRlbj1mYWxzZSxwYW5feD0tMQkA8gJ5PS0xMS41LHRpbGVf
aD0xMgoAEHcKAI96b29tPTF9LFwLCQ8BAP-------------2D1wLBBUzXAsfMFwLB1BtPTF9fQ==
:: map/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA0LTA4IDEzOjM0OjM0Iixtb2RpZmllZD0iMjAyNS0w
NC0xNiAwODowNjoxMyJdXQ==
:: sfx/
:: sfx/0.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA0LTA4IDEyOjQ0OjQ5Iixtb2RpZmllZD0iMjAyNS0w
NC0xNiAwODowNjoxMyIscmV2aXNpb249MTgzMV1dbHo0AMABAAA7CwAA-zBweHUAAygAAAQABA9A
EAIOAAGgASACoA4ADxAADfDKAQIDQA8PkAQFBgdADJAICQoLQAyQDwwPDQ8ODEAM8P8BAOvxJ6oB
EAYPIBABIAEgAfAAAhACDhABIA8hEAIBMA9CkA8RAhAPEA85DyJAAQ8REAEPSg8rA7APEhYA8AQn
DzxAAg8OEAEP7OAPEhAGCQACOwD2HQ85EAEgBA8cAAKACSAMIA9C8E8PEfAfAvCXD-gKD-8PgA-3
Dw0B8AkBEAYOeAD6ChYAESAPJQ-qD8QBDxEPSQ_8AA8QD9MPyZCTAE9ckA8SkwACHxOTAAIRB5MA
YDEPOQ9dAJUAox4AAg8QDzQPv1CbAP8GBwgwDx8ABAAP3QAC8AwPEfAHBfAHqwAMApAAkCQPXw8v
ETAPwyUB-wUgDlAED0IAETAP3vCjC-AHDwzwr0MAD_8hIAEwD0Dwww8oD--wxjAA------8-H-8B
AKzzBcgPQAAPEEAPSP--LwH9Lw79L-BwEwAsRf0SABlHEgDzDAJADzAPLw8tDysPKQ8oDyYPJP0o
AWD9KH79KDIA7wQwHyT9LhL9Lh79LvD-AQD-5VD-----BA==
:: sfx/1.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA0LTEyIDEzOjUzOjAwIixtb2RpZmllZD0iMjAyNS0w
NC0xNiAwODowNjoxMyIscmV2aXNpb249NTQ3XV1sejQAjgEAAPsZAAD-MHB4dQADKAAABAAED0AQ
Ag4AAaABIAKgDgAPEAAN8MoBAgNADw_QBAUGB0AMkAgJCgtADJAPDA8NDw4MQAzw-wEA6-EnqgEQ
Bg8gEAEgASAB8AACEAIOEAEgDyEQAgEwD0KQDxECEA8QDzkPIkABDxEQAQ9KDysDsA8SFgDwBCcP
PEACDw4QAQ-s4A8SEAYJAAI7APYdDzkQASAEDxwAAoAJIAwgD0LwTw8R8B8C8JcP_AoP-w_AD-cP
DQHwCQEQBg54APoKFgARIA8lD_oPxAEPEQ9JD7wADxAP0w-JkJMAT1yQDxKTAAIfE5MAAhEHkwBg
MQ85D10AlQCjHgACDxAPNA_-UJsA-wYHCDAPHwAEAA-dAALwDA8R8AcF8AerAAwCkACQJA9fDy8R
MA-DJQH-BSAOUAQPQgARMA-e8KML8AcPDPCvQwAP7yEgATAPQPDDDygP--DGMAD------z8f-wEA
rM-ID0AADxBA--_w8HALAP----------------------FFD-sPD-OQ==
:: sfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA0LTA4IDEzOjM0OjM0Iixtb2RpZmllZD0iMjAyNS0w
NC0xNiAwODowNjoxMyJdXQ==
:: src/
:: src/in_game.lua
--[[pod_format="raw",created="2025-04-10 09:08:13",modified="2025-04-16 08:06:13",revision=2578]]
-----------------------------------------------------------------------------------


local M = {}


local new_ball = require "src/new_ball.lua"
local new_brick = require "src/new_brick.lua"
local new_bullet = require "src/new_bullet.lua"
local new_racket = require "src/new_racket.lua"
local new_walls = require "src/new_walls.lua"


-----------------------------------------------------------------------------------


local balls = {}
local walls = nil
local racket = nil
local bricks = {}
local bullets = {}


local fire_timer = 0


-----------------------------------------------------------------------------------


function M.enter()
	local ball = new_ball()
	ball:set_position(240, 200)
	ball:set_angle(math.pi)
	ball:set_speed(2)
	balls = { ball }
	walls = new_walls(12 * 26 + 8)
	racket = new_racket()
	racket:grab_ball(ball)
	local left, _, _ = walls:collider()
	for i = 2, 9 do
		for j = 0, 8 do
			add(bricks, new_brick(left + 5 + i * 26, 40 + j * 13))
		end
	end
end


-----------------------------------------------------------------------------------


local counter = 0
function M.update()
	racket:move(walls)
	counter += 1
	fire_timer = max(0, fire_timer - 1)
	if counter % 1 ~= 0 then return end
	
	if fire_timer == 0 and (key("space") or key("f") or btn(4) or btn(5)) then
		if racket:has_grabbed_ball() then
			racket:launch_ball()
			fire_timer = 20
		else
			add(bullets, new_bullet(racket:bullets_starting_position()))
			sfx(4, 1)
			fire_timer = 15
		end
	end
	
	for ball in all(balls) do
		ball:move(
			function(ball, sign_x, sign_y)
				if walls:bounce(ball, sign_x, sign_y) then
					return true
				end
				if racket:bounce(ball, sign_x, sign_y) then
					return true
				end
				for brick in all(bricks) do
					if brick:bounce(ball, sign_x, sign_y) then
						return true
					end
				end
				return false
			end
		)
	end
	
	for bullet in all(bullets) do
		bullet:move()
	end
end


-----------------------------------------------------------------------------------


function M.draw()
	cls(1)
	spr(161 + ((counter // 4) % 6), 10, 10)
	spr(169 + ((counter // 6) % 5), 10, 30)
	spr(177 + ((counter // 6) % 7), 10, 50)
	walls:draw()
	for brick in all(bricks) do
		brick:draw()
	end
	for bullet in all(bullets) do
		bullet:draw()
	end
	for ball in all(balls) do
		ball:draw()
	end
	racket:draw()
end


-----------------------------------------------------------------------------------


return M


-----------------------------------------------------------------------------------

:: src/new_ball.lua
--[[pod_format="raw",created="2025-04-10 11:22:18",modified="2025-04-16 08:06:13",revision=2523]]
-----------------------------------------------------------------------------------


require "lib/mathfix.lua"


-----------------------------------------------------------------------------------


return function()
	local self = {}
	
	local screen_x, screen_y = 0, 0
	local remain_x, remain_y = 0.0, 0.0
	local radius = 3
	local speed = 2.0
	local vel_x, vel_y = 0.0, 0.0
	local flip_x_timer = 0
	local flip_y_timer = 0
	local stuck = false
	
	function self:collider()
		return screen_x, screen_y, radius
	end
	
	function self:set_position(x, y)
		screen_x, screen_y = x, y
		remain_x, remain_y = 0, 0
	end
	
	function self:set_angle(a)
		vel_x = speed * math.sin(a)
		vel_y = - speed * math.cos(a)
		if mode == "mixed" then
			vel_x, vel_y = math.round(2*vel_x)/2, math.round(2*vel_y)/2
		elseif mode == "retro" then
			vel_x, vel_y = math.round(vel_x), math.round(vel_y)
		end
		remain_x, remain_y = 0, 0
	end
	
	function self:set_speed(s)
		speed = s
		if mode == "retro" then
			speed += 0.5
		end
	end
	
	function self:set_stuck(s)
		stuck = s
	end
	
	function self:flip_x()
		if flip_x_timer < 8 then return false end
		vel_x = - vel_x
		remain_x, remain_y = 0, 0
		flip_x_timer = 0
		return true
	end
	
	function self:flip_y()
		if flip_y_timer < 8 then return false end
		vel_y = - vel_y
		remain_x, remain_y = 0, 0
		flip_y_timer = 0
		return true
	end
	
	function self:move(handle_collisions)
		flip_x_timer += 1
		flip_y_timer += 1
		if stuck then return end
		remain_x += vel_x
		remain_y += vel_y
		local move_x, move_y =
			math.round_toward_zero(remain_x),
			math.round_toward_zero(remain_y)
		remain_x -= move_x
		remain_y -= move_y
		local sign_x, sign_y = math.sign(move_x), math.sign(move_y)
		while move_x ~= 0 or move_y ~= 0 do
			local prev_x, prev_y = screen_x, screen_y
			if move_x ~= 0 then
				screen_x += sign_x
				move_x -= sign_x
				if handle_collisions(self, sign_x, 0) then
					screen_x = prev_x
					move_x = 0
				end
			end
			if move_y ~= 0 then
				screen_y += sign_y
				move_y -= sign_y
				if handle_collisions(self, 0, sign_y) then
					screen_y = prev_y
					move_y = 0
				end
			end
		end
	end
	
	function self:draw()
--		print("Vel: "..string.format("% 5.2f  % 5.2f", vel_x, vel_y), 5, 200, 7)
--		print("Pos: "..string.format("% 6.1f % 6.1f", screen_x, screen_y), 5, 210, 7)
		local x, y = math.round(screen_x), math.round(screen_y)
		spr(17, x - 2, y - 2)
	end
	
	return self
end


-----------------------------------------------------------------------------------

:: src/new_brick.lua
--[[pod_format="raw",created="2025-04-12 16:44:24",modified="2025-04-16 08:06:13",revision=618]]
-------------------------------------------------------------------------------------


local collides = require "lib/collides.lua"


-------------------------------------------------------------------------------------


return function(x, y)
	local self = {}
	
	local destroyed = false
	
	function self:box()
		return x, y, x + 26 - 1, y + 13 - 1
	end
	
	function self:bounce(ball, sign_x, sign_y)
		if destroyed then return end
		local cx, cy, radius = ball:collider()
		local l, t, r, b = self:box()
		if collides.circle_box(cx, cy, radius, l, t, r, b) then
			if sign_x ~= 0 and ball:flip_x() then
				sfx(2, 0)
				destroyed = true
				return true
			end
			if sign_y ~= 0 and ball:flip_y() then
				sfx(2, 0)
				destroyed = true
				return true
			end
		end
		return false
	end
	
	function self:draw()
		if destroyed then return end
		spr(67, x, y)
	end
	
	return self
end


-------------------------------------------------------------------------------------

:: src/new_bullet.lua
--[[pod_format="raw",created="2025-04-15 09:35:47",modified="2025-04-16 08:06:13",revision=119]]
------------------------------------------------------------------------------------


return function(x, y)
	local self = {}
	
	local x, y = x, y
	
	function self:move()
		y -= 4
	end
	
	function self:draw()
		spr(40, x - 1, y - 1)
	end
	
	return self
end


------------------------------------------------------------------------------------

:: src/new_racket.lua
--[[pod_format="raw",created="2025-04-10 19:09:05",modified="2025-04-16 08:06:13",revision=1942]]
-----------------------------------------------------------------------------------


local collides = require "lib/collides.lua"


-----------------------------------------------------------------------------------


return function()
	local self = {}
	
	local center_x, top = 240, 260
	local speed = 3
	local width = 33
	local grabbed_ball = nil
	local grabbed_offset = 0
	
	function self:box()
		local left = center_x - width // 2
		local right = left + width - 1
		local bottom = top + 7 - 1
		return left, top, right, bottom
	end
	
	function self:bullets_starting_position()
		return center_x, top
	end
	
	function self:grab_ball(ball)
		ball:set_stuck(true)
		grabbed_ball = ball
		grabbed_offset = math.random(0, (width // 2)) - width // 4
	end
	
	function self:has_grabbed_ball()
		return grabbed_ball ~= nil
	end
	
	function self:launch_ball()
		if grabbed_ball then
			grabbed_ball:set_stuck(false)
			grabbed_ball:set_angle(self:bounce_angle(grabbed_ball))
			grabbed_ball = nil
			sfx(0, 0)
		end
	end
	
	function self:move(walls)
		local wall_left, _, wall_right = walls:collider()
		if key("a") or key("j") then
			center_x -= speed
		elseif key("d") or key("l") then
			center_x += speed
		end
		local left_x = ((btn(1) or 0) - (btn(0) or 0)) / 255.0
		local right_x = ((btn(9) or 0) - (btn(8) or 0)) / 255.0
		local joy_x = mid(-1.0, left_x + right_x, 1.0)
		center_x += speed * joy_x
		center_x = mid(wall_left + width // 2, center_x, wall_right - width // 2)
		if grabbed_ball then
			local _, _, radius = grabbed_ball:collider()
			grabbed_ball:set_position(center_x + grabbed_offset, top - radius)
		end
	end
	
	function self:bounce(ball, sign_x, sign_y)
		local cx, cy, radius = ball:collider()
		local l, t, r, b = self:box()
		if cy > t + (b - t) // 2 then
			return false
		end
		local above = (sign_y > 0) -- or (cy < t + (b - t) // 2)
		if collides.circle_box(cx, cy, radius, l, t, r, b) and above then
			ball:set_angle(self:bounce_angle(ball))
			sfx(1, 0)
			return true
		end
		return false
	end
	
	function self:bounce_angle(ball)
		local cx, cy, radius = ball:collider()
		local dx = (cx - center_x) / ((width + radius) / 2)
		local angle = 0.66 * dx * (math.pi / 2.0)
		return angle
	end
	
	function self:draw()
		spr(50, center_x - width // 2, top)
	end
	
	return self
end


-----------------------------------------------------------------------------------

:: src/new_walls.lua
--[[pod_format="raw",created="2025-04-12 12:35:09",modified="2025-04-16 08:06:13",revision=830]]
-----------------------------------------------------------------------------------


-----------------------------------------------------------------------------------


return function(width)
	local self = {}
	
	local left = 240 - width // 2 - 1
	local top = 13
	local right = left + width + 1
	
	function self:collider()
		return left, top, right
	end
	
	function self:bounce(ball, sign_x, sign_y)
		local cx, cy, radius = ball:collider()
		if cx - left < radius then
			ball:flip_x()
			sfx(0, 0)
			return true
		end
		if right - cx < radius then
			ball:flip_x()
			sfx(0, 0)
			return true
		end
		if cy - top < radius then
			ball:flip_y()
			sfx(0, 0)
			return true
		end
		return false
	end
	
	function self:draw()
		sspr(26, 0, 0, 1, 13, left + 1, top - 13 + 1, right - left - 1, 13)
		sspr(24, 0, 0, 13, 1, left - 13 + 1, top + 1, 13, 270 - top)
		sspr(24, 0, 0, 13, 1, right, top + 1, 13, 270 - top)
		spr(25, left - 13 + 1, top - 13 + 1)
		spr(27, right, top - 13 + 1)
--		line(left + 30, top, right - 30, 10, 8)
--		line(left, top, left, 200, 8)
--		line(right, top, right, 200, 8)
	end
	
	return self
end


-----------------------------------------------------------------------------------

:: src/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA0LTEwIDA4OjQ0OjI0Iixtb2RpZmllZD0iMjAyNS0w
NC0xNiAwODowNjoxMyJdXQ==
:: design.md
b64$LS1bW3BvZF9mb3JtYXQ9InJhdyIsY3JlYXRlZD0iMjAyNS0wNC0wOCAxMzozNDo1MiIsbW9k
aWZpZWQ9IjIwMjUtMDQtMTYgMDg6MDY6MTMiLHJldmlzaW9uPTI2MTddXQojIERlc2lnbgoKIyMg
UmFja2V0IE1vZGlmaWVycwoKLSBMYXJnZXIgcmFja2V0LgotIEZhc3RlciBtb3ZlbWVudC4KLSBN
YWduZXQ6IGdyYWIgdGhlIGJhbGwgaWYgc2hvb3RpbmcgcmlnaHQgYmVmb3JlIHRvdWNoLgotIFR1
bm5lbDogY2FuIGdvIHRocm91Z2ggdGhlIGJvcmRlcnMgb2YgdGhlIHNjcmVlbiBhbiByZS1hcHBl
YXIgb24gdGhlIG90aGVyCiAgc2lkZS4KLSBUd2luczogdHdvIHNsaWdodGx5IHNtYWxsZXIgcmFj
a2V0cy4KLSBGYWlsc2FmZTogb25jZSBwZXIgbGV2ZWwsIGNhdGNoIGEgbG9zdCBiYWxsIGlmIHNo
b290aW5nIGF0IHRoZSByaWdodCB0aW1lLgoKIyMgQmFsbCBNb2RpZmllcnMKCi0gTXVsdGliYWxs
OiBhZGQgYW4gYWRkaXRpb25hbCBiYWxsOyBhIGxpZmUgaXMgbG9zdCBvbmx5IHdoZW4gdGhlIGxh
c3QgbXVsdGliYWxsCiAgaXMgbG9zdC4KLSBCaWdnZXIgYmFsbC4KLSBQYXJhY2h1dGU6IHNsb3dz
IHRoZSBiYWxsIHdoZW4gYXBwcm9hY2hpbmcgdGhlIGJvdHRvbSBvZiB0aGUgc2NyZWVuLgotIFRy
aWdnZXIgYmFsbDogYm91bmNlIG9uIHByb2plY3RpbGVzLgoKIyMgV2VhcG9ucwoKLSBTaW5nbGUg
YnVsbGV0OiBkZWZhdWx0IHdlYXBvbi4KLSBCdXJzdCBidWxsZXRzOiBmaXJlIDIsIDMsIDQuLi4g
YnVsbGV0cyBpbiBxdWljayBidXJzdHMuCi0gTXVsdGkgYnVsbGV0czogZmlyZSAyLCAzLCA0Li4u
IGJ1bGxldHMgaW4gcGFyYWxsZWwuCi0gTGFzZXI6IGltbWVkaWF0ZSwgYnV0IHNsb3cgZmlyZSBy
YXRlLgotIFJvY2tldHM-OiBmb2xsb3dzIHJhY2tldCBtb3ZlbWVudCBhZnRlciBiZWluZyBmaXJl
ZC4KCiMjIEJyaWNrcwoKLSBIb3Jpem9udGFsIGJyaWNrLgotIFZlcnRpY2FsIGJyaWNrLgotIFNt
YWxsIHNxdWFyZSBicmljay4KLSBEaWFtb25kIGJyaWNrPwotIEFuZ2xlZCBicmljaz8KLSBSb3Vu
ZCBicmljaz8KLSBIZXhhZ29uYWwgYnJpY2s-CgotIEJyaWNrcyBoYXZlIGRpZmZlcmVudCB0b3Vn
aG5lc3M6IHRoZXkgYXJlIGRlc3Ryb3kgYnkgb25lLCB0d28gb3IgdGhyZWUgaGl0CiAgZnJvbSBh
IGJhbGwuCgotIEFybW9yOiBwcm90ZWN0cyB0aGUgYnJpY2sgZnJvbSBiYWxsczsgbXVzdCBiZSBz
aG9vdGVkIHNldmVyYWwgdGltZXMuCi0gU2hpZWxkOiBwcm90ZWN0cyB0aGUgYnJpc2sgZnJvbSBi
YWxsczsgd2hlbiBzaG9vdGVkLCB0aGUgc2hpZWxkIGlzIGxvd2VyZWQgZm9yCiAgYSBsaW1pdGVk
IHRpbWUuCi0gQnVtcGVyIFNoaWVsZDogcHJvdGVjdHMgdGhlIGJyaWNrIGZyb20gYmFsbHMsIGFu
ZCBtYWtlIGJhbGxzIGJvdW5jZSB3aXRoCiAgZ3JlYXRlciBzcGVlZCBhbmQgcmFuZG9tIGRpcmVj
dGlvbjsgd2hlbiBzaG9vdGVkLCB0aGUgYnVtcGVyIGlzIGRpc2FibGVkIGZvcgogIGEgc2hvcnQg
bGltaXRlZCB0aW1lLgotIE1hZ25ldCBTaGllbGQuCi0gVGVsZXBvcnRlciBTaGllbGQ6IHdoZW4g
aGl0IGJ5IGEgYmFsbCwgdGhlIGJhbGwgaXMgdGVsZXBvcnRlZCBhdCB0aGUgYm90dG9tCiAgb2Yg
dGhlIHNjcmVlbiwga2VlcGluZyBpdHMgY3VycmVudCB2ZWxvY2l0eS4KLSBCdWlsZGVyIFNoaWVs
ZDogaWYgYW55IG9mIGl0cyBlaWdodCBuZWlnaGJvcnMgYXJlIGVtcHR5LCBnZW5lcmF0ZSBhIG5l
dyBicmljay4KLSBEaXJlY3Rpb25hbCBTaGllbGQ6IHByb3RlY3QgZnJvbSBhbGwgaGl0cyBjb21p
bmcgZnJvbSBiZWxvdzsgY2Fubm90IGJlCiAgZGlzYWJsZWQgYnkgd2VhcG9ucy4KLSBNb3Zpbmcg
U2hpZWxkPwotIFJlcGVsbGVyIFNoaWVsZD86IGdlbmVyYXRlcyBhIGZvcmNlZmllbGQgdGhhdCBj
b250aW51b3VzbHkgcmVwZWxzIGJhbGxzLg==
:: main.lua
--[[pod_format="raw",created="2025-04-08 12:44:49",modified="2025-04-16 08:06:13",revision=2630]]
-----------------------------------------------------------------------------------


include "lib/require.lua"

local in_game = require "src/in_game.lua"


-----------------------------------------------------------------------------------


-- "modern", "mixed" or "retro"
mode = "modern"


-----------------------------------------------------------------------------------


function _init()
	window {
		title = "Arkanotron",
		tabbed = false,
		cursor = 1,
	}
	in_game.enter()
end


-----------------------------------------------------------------------------------


function _update()
	in_game.update()
end


-----------------------------------------------------------------------------------


function _draw()
	in_game.draw()
end


-----------------------------------------------------------------------------------

:: .info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA0LTA4IDEyOjU5OjM2Iixtb2RpZmllZD0iMjAyNS0w
NC0xNiAwODowNjoxMyIscnVudGltZT0xNyx3b3Jrc3BhY2VzPXt7bG9jYXRpb249ImdmeC8wLmdm
eCIsd29ya3NwYWNlX2luZGV4PTJ9LHtsb2NhdGlvbj0ibWFwLzAubWFwIix3b3Jrc3BhY2VfaW5k
ZXg9M30se2xvY2F0aW9uPSJzZngvMC5zZngiLHdvcmtzcGFjZV9pbmRleD00fSx7bG9jYXRpb249
InNmeC8xLnNmeCIsd29ya3NwYWNlX2luZGV4PTR9LHtsb2NhdGlvbj0ibWFpbi5sdWEiLHdvcmtz
cGFjZV9pbmRleD03fSx7bG9jYXRpb249InNmeC8xLnNmeCIsd29ya3NwYWNlX2luZGV4PTh9fV1d
:: [eoc]
